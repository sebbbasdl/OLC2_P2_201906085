2023-10-21 22:45:30:446 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-21 22:45:30:467 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-21 22:45:30:832 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-21 22:45:30:838 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-21 22:45:30:840 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-21 22:45:30:840 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-10-21 22:45:30:863 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=150> ID<tokenIndex=152> D_PTS<tokenIndex=154> types<tokenIndex=156> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=136> VAR<tokenIndex=138> ID<tokenIndex=140> D_PTS<tokenIndex=142> types<tokenIndex=144> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-10-21 22:45:30:871 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 150))) (ID (ELEMENT_OPTIONS (= tokenIndex 152))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 154))) (types (ELEMENT_OPTIONS (= tokenIndex 156))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 136))) (VAR (ELEMENT_OPTIONS (= tokenIndex 138))) (ID (ELEMENT_OPTIONS (= tokenIndex 140))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 142))) (types (ELEMENT_OPTIONS (= tokenIndex 144))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-10-21 22:45:30:872 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lpf]
    :   ( {} ID<tokenIndex=241> D_PTS<tokenIndex=243> types<tokenIndex=245> {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | { $lpf = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=229> ID<tokenIndex=231> D_PTS<tokenIndex=233> types<tokenIndex=235> {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
        )*
    ;
2023-10-21 22:45:30:874 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 241))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 243))) (types (ELEMENT_OPTIONS (= tokenIndex 245))) {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 229))) (ID (ELEMENT_OPTIONS (= tokenIndex 231))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 233))) (types (ELEMENT_OPTIONS (= tokenIndex 235))) {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }))))))
2023-10-21 22:45:30:874 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=402>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=396> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-10-21 22:45:30:875 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 402))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 396))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-10-21 22:45:30:879 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} callFunction<tokenIndex=647> { $e = $callFunction.cf } 
        | ID<tokenIndex=653> LLAVEIZQ<tokenIndex=655> listStructExp<tokenIndex=657> LLAVEDER<tokenIndex=659> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | PARIZQ<tokenIndex=665> expr<tokenIndex=667> PARDER<tokenIndex=669> { $e = $expr.e } 
        | list=listArray<tokenIndex=677> { $e = $list.p} 
        | CORIZQ<tokenIndex=683> listParams<tokenIndex=685> CORDER<tokenIndex=687> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=693>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=699>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=705> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=711> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MUL<tokenIndex=522>|DIV<tokenIndex=524>) right=expr<tokenIndex=529,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(ADD<tokenIndex=542>|SUB<tokenIndex=544>) right=expr<tokenIndex=549,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MAY_IG<tokenIndex=562>|MAYOR<tokenIndex=564>) right=expr<tokenIndex=569,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MEN_IG<tokenIndex=582>|MENOR<tokenIndex=584>) right=expr<tokenIndex=589,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(IG_IG<tokenIndex=602>|DIF<tokenIndex=604>) right=expr<tokenIndex=609,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=AND<tokenIndex=621> right=expr<tokenIndex=625,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=OR<tokenIndex=637> right=expr<tokenIndex=641,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-21 22:45:30:888 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (callFunction (ELEMENT_OPTIONS (= tokenIndex 647))) { $e = $callFunction.cf }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 653))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 655))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 657))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 659))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 665))) (expr (ELEMENT_OPTIONS (= tokenIndex 667))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 669))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 677)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 683))) (listParams (ELEMENT_OPTIONS (= tokenIndex 685))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 687))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 693))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 699))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 705))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 711))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 522))) (DIV (ELEMENT_OPTIONS (= tokenIndex 524))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 529) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 542))) (SUB (ELEMENT_OPTIONS (= tokenIndex 544))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 549) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 562))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 564))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 569) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 582))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 584))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 589) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 602))) (DIF (ELEMENT_OPTIONS (= tokenIndex 604))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 609) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 621)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 625) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 637)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 641) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-21 22:45:30:889 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=736> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=728> expr<tokenIndex=730> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-21 22:45:30:891 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 736))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 728))) (expr (ELEMENT_OPTIONS (= tokenIndex 730))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-21 22:45:30:891 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=779> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=755> expr<tokenIndex=757> CORDER<tokenIndex=759> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=771> ID<tokenIndex=773> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2023-10-21 22:45:30:894 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 779))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 755))) (expr (ELEMENT_OPTIONS (= tokenIndex 757))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 759))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 771))) (ID (ELEMENT_OPTIONS (= tokenIndex 773))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2023-10-21 22:45:30:894 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=823>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=815> expr<tokenIndex=817> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-10-21 22:45:30:896 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 823))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 815))) (expr (ELEMENT_OPTIONS (= tokenIndex 817))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-10-21 22:45:30:897 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=856> D_PTS<tokenIndex=858> expr<tokenIndex=860>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=844> ID<tokenIndex=846> D_PTS<tokenIndex=848> expr<tokenIndex=850> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-10-21 22:45:30:899 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 856))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 858))) (expr (ELEMENT_OPTIONS (= tokenIndex 860))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 844))) (ID (ELEMENT_OPTIONS (= tokenIndex 846))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 848))) (expr (ELEMENT_OPTIONS (= tokenIndex 850))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-10-21 22:45:30:909 grammar LogManager.java:25 import INT=1
2023-10-21 22:45:30:909 grammar LogManager.java:25 import FLOAT=2
2023-10-21 22:45:30:909 grammar LogManager.java:25 import BOOL=3
2023-10-21 22:45:30:909 grammar LogManager.java:25 import STR=4
2023-10-21 22:45:30:910 grammar LogManager.java:25 import TRU=5
2023-10-21 22:45:30:910 grammar LogManager.java:25 import FAL=6
2023-10-21 22:45:30:910 grammar LogManager.java:25 import PRINT=7
2023-10-21 22:45:30:910 grammar LogManager.java:25 import IF=8
2023-10-21 22:45:30:911 grammar LogManager.java:25 import ELSE=9
2023-10-21 22:45:30:911 grammar LogManager.java:25 import WHILE=10
2023-10-21 22:45:30:911 grammar LogManager.java:25 import VAR=11
2023-10-21 22:45:30:911 grammar LogManager.java:25 import FUNC=12
2023-10-21 22:45:30:911 grammar LogManager.java:25 import STRUCT=13
2023-10-21 22:45:30:912 grammar LogManager.java:25 import NUMBER=14
2023-10-21 22:45:30:912 grammar LogManager.java:25 import STRING=15
2023-10-21 22:45:30:912 grammar LogManager.java:25 import ID=16
2023-10-21 22:45:30:912 grammar LogManager.java:25 import DIF=17
2023-10-21 22:45:30:913 grammar LogManager.java:25 import IG_IG=18
2023-10-21 22:45:30:913 grammar LogManager.java:25 import NOT=19
2023-10-21 22:45:30:913 grammar LogManager.java:25 import OR=20
2023-10-21 22:45:30:913 grammar LogManager.java:25 import AND=21
2023-10-21 22:45:30:913 grammar LogManager.java:25 import IG=22
2023-10-21 22:45:30:914 grammar LogManager.java:25 import MAY_IG=23
2023-10-21 22:45:30:914 grammar LogManager.java:25 import MEN_IG=24
2023-10-21 22:45:30:914 grammar LogManager.java:25 import MAYOR=25
2023-10-21 22:45:30:914 grammar LogManager.java:25 import MENOR=26
2023-10-21 22:45:30:915 grammar LogManager.java:25 import MUL=27
2023-10-21 22:45:30:915 grammar LogManager.java:25 import DIV=28
2023-10-21 22:45:30:915 grammar LogManager.java:25 import ADD=29
2023-10-21 22:45:30:915 grammar LogManager.java:25 import SUB=30
2023-10-21 22:45:30:915 grammar LogManager.java:25 import PARIZQ=31
2023-10-21 22:45:30:916 grammar LogManager.java:25 import PARDER=32
2023-10-21 22:45:30:916 grammar LogManager.java:25 import LLAVEIZQ=33
2023-10-21 22:45:30:916 grammar LogManager.java:25 import LLAVEDER=34
2023-10-21 22:45:30:916 grammar LogManager.java:25 import D_PTS=35
2023-10-21 22:45:30:916 grammar LogManager.java:25 import CORIZQ=36
2023-10-21 22:45:30:918 grammar LogManager.java:25 import CORDER=37
2023-10-21 22:45:30:918 grammar LogManager.java:25 import COMA=38
2023-10-21 22:45:30:918 grammar LogManager.java:25 import ARROW1=39
2023-10-21 22:45:30:918 grammar LogManager.java:25 import PUNTO=40
2023-10-21 22:45:30:919 grammar LogManager.java:25 import WHITESPACE=41
2023-10-21 22:45:30:919 grammar LogManager.java:25 import COMMENT=42
2023-10-21 22:45:30:919 grammar LogManager.java:25 import LINE_COMMENT=43
2023-10-21 22:45:30:919 grammar LogManager.java:25 import 'Int'=1
2023-10-21 22:45:30:919 grammar LogManager.java:25 import 'Float'=2
2023-10-21 22:45:30:920 grammar LogManager.java:25 import 'Bool'=3
2023-10-21 22:45:30:920 grammar LogManager.java:25 import 'String'=4
2023-10-21 22:45:30:920 grammar LogManager.java:25 import 'true'=5
2023-10-21 22:45:30:920 grammar LogManager.java:25 import 'false'=6
2023-10-21 22:45:30:920 grammar LogManager.java:25 import 'print'=7
2023-10-21 22:45:30:920 grammar LogManager.java:25 import 'if'=8
2023-10-21 22:45:30:921 grammar LogManager.java:25 import 'else'=9
2023-10-21 22:45:30:921 grammar LogManager.java:25 import 'while'=10
2023-10-21 22:45:30:921 grammar LogManager.java:25 import 'var'=11
2023-10-21 22:45:30:921 grammar LogManager.java:25 import 'func'=12
2023-10-21 22:45:30:921 grammar LogManager.java:25 import 'struct'=13
2023-10-21 22:45:30:921 grammar LogManager.java:25 import '!='=17
2023-10-21 22:45:30:922 grammar LogManager.java:25 import '=='=18
2023-10-21 22:45:30:922 grammar LogManager.java:25 import '!'=19
2023-10-21 22:45:30:922 grammar LogManager.java:25 import '||'=20
2023-10-21 22:45:30:922 grammar LogManager.java:25 import '&&'=21
2023-10-21 22:45:30:922 grammar LogManager.java:25 import '='=22
2023-10-21 22:45:30:923 grammar LogManager.java:25 import '>='=23
2023-10-21 22:45:30:923 grammar LogManager.java:25 import '<='=24
2023-10-21 22:45:30:923 grammar LogManager.java:25 import '>'=25
2023-10-21 22:45:30:923 grammar LogManager.java:25 import '<'=26
2023-10-21 22:45:30:923 grammar LogManager.java:25 import '*'=27
2023-10-21 22:45:30:924 grammar LogManager.java:25 import '/'=28
2023-10-21 22:45:30:924 grammar LogManager.java:25 import '+'=29
2023-10-21 22:45:30:924 grammar LogManager.java:25 import '-'=30
2023-10-21 22:45:30:924 grammar LogManager.java:25 import '('=31
2023-10-21 22:45:30:924 grammar LogManager.java:25 import ')'=32
2023-10-21 22:45:30:925 grammar LogManager.java:25 import '{'=33
2023-10-21 22:45:30:925 grammar LogManager.java:25 import '}'=34
2023-10-21 22:45:30:925 grammar LogManager.java:25 import ':'=35
2023-10-21 22:45:30:925 grammar LogManager.java:25 import '['=36
2023-10-21 22:45:30:925 grammar LogManager.java:25 import ']'=37
2023-10-21 22:45:30:925 grammar LogManager.java:25 import ','=38
2023-10-21 22:45:30:926 grammar LogManager.java:25 import '->'=39
2023-10-21 22:45:30:926 grammar LogManager.java:25 import '.'=40
2023-10-21 22:45:30:926 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, VAR=11, FUNC=12, STRUCT=13, NUMBER=14, STRING=15, ID=16, DIF=17, IG_IG=18, NOT=19, OR=20, AND=21, IG=22, MAY_IG=23, MEN_IG=24, MAYOR=25, MENOR=26, MUL=27, DIV=28, ADD=29, SUB=30, PARIZQ=31, PARDER=32, LLAVEIZQ=33, LLAVEDER=34, D_PTS=35, CORIZQ=36, CORDER=37, COMA=38, ARROW1=39, PUNTO=40, WHITESPACE=41, COMMENT=42, LINE_COMMENT=43, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'var'=11, 'func'=12, 'struct'=13, '!='=17, '=='=18, '!'=19, '||'=20, '&&'=21, '='=22, '>='=23, '<='=24, '>'=25, '<'=26, '*'=27, '/'=28, '+'=29, '-'=30, '('=31, ')'=32, '{'=33, '}'=34, ':'=35, '['=36, ']'=37, ','=38, '->'=39, '.'=40}
2023-10-21 22:45:30:927 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, VAR=11, FUNC=12, STRUCT=13, NUMBER=14, STRING=15, ID=16, DIF=17, IG_IG=18, NOT=19, OR=20, AND=21, IG=22, MAY_IG=23, MEN_IG=24, MAYOR=25, MENOR=26, MUL=27, DIV=28, ADD=29, SUB=30, PARIZQ=31, PARDER=32, LLAVEIZQ=33, LLAVEDER=34, D_PTS=35, CORIZQ=36, CORDER=37, COMA=38, ARROW1=39, PUNTO=40, WHITESPACE=41, COMMENT=42, LINE_COMMENT=43}
2023-10-21 22:45:30:927 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'var'=11, 'func'=12, 'struct'=13, '!='=17, '=='=18, '!'=19, '||'=20, '&&'=21, '='=22, '>='=23, '<='=24, '>'=25, '<'=26, '*'=27, '/'=28, '+'=29, '-'=30, '('=31, ')'=32, '{'=33, '}'=34, ':'=35, '['=36, ']'=37, ','=38, '->'=39, '.'=40}
2023-10-21 22:45:30:963 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-21 22:45:30:963 LL1 LogManager.java:25 look=[{7..8, 11..13, 16}, {<EOF>, 34}]
2023-10-21 22:45:30:964 LL1 LogManager.java:25 LL(1)? true
2023-10-21 22:45:30:964 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-21 22:45:30:964 LL1 LogManager.java:25 look=[7, 8, 11, 16, 12, 13]
2023-10-21 22:45:30:964 LL1 LogManager.java:25 LL(1)? true
2023-10-21 22:45:30:964 LL1 LogManager.java:25 
DECISION 2 in rule listStructDec
2023-10-21 22:45:30:965 LL1 LogManager.java:25 look=[11, null]
2023-10-21 22:45:30:965 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:965 LL1 LogManager.java:25 
DECISION 3 in rule listStructDec
2023-10-21 22:45:30:965 LL1 LogManager.java:25 look=[null, 34]
2023-10-21 22:45:30:965 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:965 LL1 LogManager.java:25 
DECISION 4 in rule function
2023-10-21 22:45:30:965 LL1 LogManager.java:25 look=[12, 12]
2023-10-21 22:45:30:965 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:966 LL1 LogManager.java:25 
DECISION 5 in rule listParamsFunc
2023-10-21 22:45:30:966 LL1 LogManager.java:25 look=[16, null]
2023-10-21 22:45:30:966 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:966 LL1 LogManager.java:25 
DECISION 6 in rule listParamsFunc
2023-10-21 22:45:30:966 LL1 LogManager.java:25 look=[null, 32]
2023-10-21 22:45:30:966 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:966 LL1 LogManager.java:25 
DECISION 7 in rule ifstmt
2023-10-21 22:45:30:967 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-10-21 22:45:30:967 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:967 LL1 LogManager.java:25 
DECISION 8 in rule elseiflist
2023-10-21 22:45:30:967 LL1 LogManager.java:25 look=[null, {<EOF>, 7..9, 11..13, 16, 34}]
2023-10-21 22:45:30:967 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:967 LL1 LogManager.java:25 
DECISION 9 in rule declarationstmt
2023-10-21 22:45:30:967 LL1 LogManager.java:25 look=[11, 11]
2023-10-21 22:45:30:967 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:968 LL1 LogManager.java:25 
DECISION 10 in rule types
2023-10-21 22:45:30:968 LL1 LogManager.java:25 look=[1, 2, 4, 3, 36]
2023-10-21 22:45:30:968 LL1 LogManager.java:25 LL(1)? true
2023-10-21 22:45:30:968 LL1 LogManager.java:25 
DECISION 11 in rule expr
2023-10-21 22:45:30:968 LL1 LogManager.java:25 look=[16, 16, 31, 16, 36, 14, 15, 5, 6]
2023-10-21 22:45:30:968 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:968 LL1 LogManager.java:25 
DECISION 12 in rule expr
2023-10-21 22:45:30:969 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-10-21 22:45:30:969 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:969 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-10-21 22:45:30:969 LL1 LogManager.java:25 look=[null, null]
2023-10-21 22:45:30:969 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:970 LL1 LogManager.java:25 
DECISION 14 in rule listParams
2023-10-21 22:45:30:970 LL1 LogManager.java:25 look=[null, 37]
2023-10-21 22:45:30:970 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:970 LL1 LogManager.java:25 
DECISION 15 in rule listArray
2023-10-21 22:45:30:970 LL1 LogManager.java:25 look=[null, null]
2023-10-21 22:45:30:970 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:970 LL1 LogManager.java:25 
DECISION 16 in rule listArray
2023-10-21 22:45:30:971 LL1 LogManager.java:25 look=[null, null]
2023-10-21 22:45:30:971 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:971 LL1 LogManager.java:25 
DECISION 17 in rule listParamsCall
2023-10-21 22:45:30:971 LL1 LogManager.java:25 look=[{5..6, 14..16, 31, 36}, null]
2023-10-21 22:45:30:971 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:971 LL1 LogManager.java:25 
DECISION 18 in rule listParamsCall
2023-10-21 22:45:30:971 LL1 LogManager.java:25 look=[null, 32]
2023-10-21 22:45:30:972 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:972 LL1 LogManager.java:25 
DECISION 19 in rule listStructExp
2023-10-21 22:45:30:972 LL1 LogManager.java:25 look=[16, null]
2023-10-21 22:45:30:972 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:972 LL1 LogManager.java:25 
DECISION 20 in rule listStructExp
2023-10-21 22:45:30:972 LL1 LogManager.java:25 look=[null, 34]
2023-10-21 22:45:30:972 LL1 LogManager.java:25 LL(1)? false
2023-10-21 22:45:30:981 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-21 22:45:30:997 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-21 22:45:30:998 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-10-21 22:45:30:999 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-10-21 22:45:31:000 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-21 22:45:31:001 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-10-21 22:45:31:003 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-21 22:45:31:004 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-10-21 22:45:31:004 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-10-21 22:45:31:005 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-21 22:45:31:005 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-10-21 22:45:31:006 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-10-21 22:45:31:006 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-10-21 22:45:31:006 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-10-21 22:45:31:007 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-10-21 22:45:31:007 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-10-21 22:45:31:007 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-10-21 22:45:31:007 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-10-21 22:45:31:008 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2023-10-21 22:45:31:008 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-10-21 22:45:31:008 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,42:23].[@-1,21:23='ass',<0>,42:34]
2023-10-21 22:45:31:009 action-translator LogManager.java:25 translate  $inst = $function.fun 
2023-10-21 22:45:31:009 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:13]
2023-10-21 22:45:31:009 action-translator LogManager.java:25 qattr [@-1,10:17='function',<0>,43:21].[@-1,19:21='fun',<0>,43:30]
2023-10-21 22:45:31:009 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-10-21 22:45:31:009 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:19]
2023-10-21 22:45:31:010 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,44:27].[@-1,25:27='dec',<0>,44:42]
2023-10-21 22:45:31:011 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-10-21 22:45:31:012 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,48:46]
2023-10-21 22:45:31:012 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,48:76].[@-1,39:42='line',<0>,48:83]
2023-10-21 22:45:31:013 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,48:90].[@-1,53:55='pos',<0>,48:97]
2023-10-21 22:45:31:014 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,48:103].[@-1,62:65='text',<0>,48:106]
2023-10-21 22:45:31:014 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,48:113].[@-1,83:83='l',<0>,48:127]
2023-10-21 22:45:31:015 action-translator LogManager.java:25 translate 
2023-10-21 22:45:31:015 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-10-21 22:45:31:015 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-10-21 22:45:31:015 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-10-21 22:45:31:015 action-translator LogManager.java:25 attr [@-1,213:213='l',<0>,6:25]
2023-10-21 22:45:31:016 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-10-21 22:45:31:016 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-10-21 22:45:31:016 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:017 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-10-21 22:45:31:017 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,13:98].[@-1,184:187='text',<0>,13:101]
2023-10-21 22:45:31:017 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,13:108].[@-1,197:198='ty',<0>,13:114]
2023-10-21 22:45:31:017 action-translator LogManager.java:25 qattr [@-1,274:277='list',<0>,14:72].[@-1,279:279='l',<0>,14:77]
2023-10-21 22:45:31:017 action-translator LogManager.java:25 attr [@-1,353:353='l',<0>,15:59]
2023-10-21 22:45:31:019 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:020 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)

2023-10-21 22:45:31:020 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,70:5]
2023-10-21 22:45:31:021 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,70:37].[@-1,43:46='line',<0>,70:42]
2023-10-21 22:45:31:021 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,70:49].[@-1,55:57='pos',<0>,70:54]
2023-10-21 22:45:31:022 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,70:60].[@-1,64:67='text',<0>,70:63]
2023-10-21 22:45:31:022 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,70:70].[@-1,86:88='lpf',<0>,70:85]
2023-10-21 22:45:31:022 action-translator LogManager.java:25 qattr [@-1,110:114='block',<0>,70:109].[@-1,116:118='blk',<0>,70:115]
2023-10-21 22:45:31:023 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)

2023-10-21 22:45:31:023 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,74:5]
2023-10-21 22:45:31:023 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,74:37].[@-1,43:46='line',<0>,74:42]
2023-10-21 22:45:31:024 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,74:49].[@-1,55:57='pos',<0>,74:54]
2023-10-21 22:45:31:024 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,74:60].[@-1,64:67='text',<0>,74:63]
2023-10-21 22:45:31:024 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,74:70].[@-1,86:88='lpf',<0>,74:85]
2023-10-21 22:45:31:024 action-translator LogManager.java:25 qattr [@-1,92:96='types',<0>,74:91].[@-1,98:99='ty',<0>,74:97]
2023-10-21 22:45:31:024 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,74:102].[@-1,109:111='blk',<0>,74:108]
2023-10-21 22:45:31:025 action-translator LogManager.java:25 translate 
2023-10-21 22:45:31:025 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-10-21 22:45:31:025 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,3:5]
2023-10-21 22:45:31:025 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,4:51].[@-1,84:87='line',<0>,4:54]
2023-10-21 22:45:31:026 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,4:61].[@-1,94:96='pos',<0>,4:64]
2023-10-21 22:45:31:026 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,4:70].[@-1,103:106='text',<0>,4:73]
2023-10-21 22:45:31:026 action-translator LogManager.java:25 qattr [@-1,110:114='types',<0>,4:80].[@-1,116:117='ty',<0>,4:86]
2023-10-21 22:45:31:026 action-translator LogManager.java:25 attr [@-1,126:128='lpf',<0>,5:5]
2023-10-21 22:45:31:026 action-translator LogManager.java:25 attr [@-1,140:142='lpf',<0>,5:19]
2023-10-21 22:45:31:026 action-translator LogManager.java:25 translate  $lpf = []interface{}{} 
2023-10-21 22:45:31:026 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,7:12]
2023-10-21 22:45:31:026 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:027 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-10-21 22:45:31:027 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,12:61].[@-1,103:106='line',<0>,12:64]
2023-10-21 22:45:31:027 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,12:71].[@-1,113:115='pos',<0>,12:74]
2023-10-21 22:45:31:027 action-translator LogManager.java:25 qattr [@-1,119:120='ID',<0>,12:80].[@-1,122:125='text',<0>,12:83]
2023-10-21 22:45:31:027 action-translator LogManager.java:25 qattr [@-1,129:133='types',<0>,12:90].[@-1,135:136='ty',<0>,12:96]
2023-10-21 22:45:31:027 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,13:28].[@-1,173:175='lpf',<0>,13:33]
2023-10-21 22:45:31:027 action-translator LogManager.java:25 attr [@-1,204:206='lpf',<0>,14:15]
2023-10-21 22:45:31:027 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:029 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-21 22:45:31:029 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,94:15]
2023-10-21 22:45:31:029 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,94:49].[@-1,39:42='line',<0>,94:52]
2023-10-21 22:45:31:029 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,94:59].[@-1,49:51='pos',<0>,94:62]
2023-10-21 22:45:31:029 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,94:68].[@-1,58:61='text',<0>,94:71]
2023-10-21 22:45:31:030 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,94:78].[@-1,70:70='e',<0>,94:83]
2023-10-21 22:45:31:030 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-10-21 22:45:31:030 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,98:29]
2023-10-21 22:45:31:031 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,98:59].[@-1,38:41='line',<0>,98:65]
2023-10-21 22:45:31:031 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,98:71].[@-1,50:52='pos',<0>,98:77]
2023-10-21 22:45:31:031 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,98:82].[@-1,60:60='e',<0>,98:87]
2023-10-21 22:45:31:034 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-10-21 22:45:31:034 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,102:36]
2023-10-21 22:45:31:034 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,102:65].[@-1,34:37='line',<0>,102:68]
2023-10-21 22:45:31:034 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,102:75].[@-1,44:46='pos',<0>,102:78]
2023-10-21 22:45:31:034 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,102:84].[@-1,55:55='e',<0>,102:89]
2023-10-21 22:45:31:035 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,102:93].[@-1,65:67='blk',<0>,102:99]
2023-10-21 22:45:31:035 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-10-21 22:45:31:035 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,103:69]
2023-10-21 22:45:31:035 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,103:98].[@-1,33:36='line',<0>,103:101]
2023-10-21 22:45:31:035 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,103:108].[@-1,43:45='pos',<0>,103:111]
2023-10-21 22:45:31:036 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,103:117].[@-1,54:54='e',<0>,103:122]
2023-10-21 22:45:31:036 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,103:126].[@-1,61:63='blk',<0>,103:129]
2023-10-21 22:45:31:036 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,103:140].[@-1,75:77='blk',<0>,103:143]
2023-10-21 22:45:31:037 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-10-21 22:45:31:037 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,104:47]
2023-10-21 22:45:31:037 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,104:76].[@-1,34:37='line',<0>,104:79]
2023-10-21 22:45:31:037 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,104:86].[@-1,44:46='pos',<0>,104:89]
2023-10-21 22:45:31:037 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,104:95].[@-1,55:55='e',<0>,104:100]
2023-10-21 22:45:31:037 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,104:104].[@-1,65:67='blk',<0>,104:110]
2023-10-21 22:45:31:037 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,104:116].[@-1,82:93='else_if_list',<0>,104:127]
2023-10-21 22:45:31:038 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-10-21 22:45:31:038 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,105:82]
2023-10-21 22:45:31:038 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,105:111].[@-1,34:37='line',<0>,105:114]
2023-10-21 22:45:31:038 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,105:121].[@-1,44:46='pos',<0>,105:124]
2023-10-21 22:45:31:039 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,105:130].[@-1,55:55='e',<0>,105:135]
2023-10-21 22:45:31:039 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,105:139].[@-1,62:64='blk',<0>,105:142]
2023-10-21 22:45:31:039 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,105:148].[@-1,79:90='else_if_list',<0>,105:159]
2023-10-21 22:45:31:040 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,105:174].[@-1,97:99='blk',<0>,105:177]
2023-10-21 22:45:31:040 action-translator LogManager.java:25 translate 
2023-10-21 22:45:31:040 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-10-21 22:45:31:040 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-10-21 22:45:31:040 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-10-21 22:45:31:041 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-10-21 22:45:31:041 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-10-21 22:45:31:041 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-21 22:45:31:042 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-10-21 22:45:31:042 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-10-21 22:45:31:042 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-10-21 22:45:31:042 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-10-21 22:45:31:042 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-21 22:45:31:043 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-10-21 22:45:31:043 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,122:41]
2023-10-21 22:45:31:043 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,122:70].[@-1,34:37='line',<0>,122:73]
2023-10-21 22:45:31:043 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,122:80].[@-1,44:46='pos',<0>,122:83]
2023-10-21 22:45:31:043 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,122:89].[@-1,55:55='e',<0>,122:94]
2023-10-21 22:45:31:043 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,122:98].[@-1,65:67='blk',<0>,122:104]
2023-10-21 22:45:31:044 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-10-21 22:45:31:044 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,126:32]
2023-10-21 22:45:31:045 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,126:67].[@-1,41:44='line',<0>,126:71]
2023-10-21 22:45:31:045 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,126:78].[@-1,52:54='pos',<0>,126:82]
2023-10-21 22:45:31:045 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,126:88].[@-1,61:64='text',<0>,126:91]
2023-10-21 22:45:31:045 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,126:98].[@-1,74:75='ty',<0>,126:104]
2023-10-21 22:45:31:046 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,126:109].[@-1,84:84='e',<0>,126:114]
2023-10-21 22:45:31:047 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e) 
2023-10-21 22:45:31:047 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,127:20]
2023-10-21 22:45:31:047 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,127:55].[@-1,41:44='line',<0>,127:59]
2023-10-21 22:45:31:047 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,127:66].[@-1,52:54='pos',<0>,127:70]
2023-10-21 22:45:31:048 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,127:76].[@-1,61:64='text',<0>,127:79]
2023-10-21 22:45:31:048 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,127:107].[@-1,94:94='e',<0>,127:112]
2023-10-21 22:45:31:049 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-10-21 22:45:31:049 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,131:8]
2023-10-21 22:45:31:050 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-10-21 22:45:31:050 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,132:10]
2023-10-21 22:45:31:050 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-10-21 22:45:31:051 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,133:8]
2023-10-21 22:45:31:051 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-10-21 22:45:31:052 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,134:9]
2023-10-21 22:45:31:052 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-10-21 22:45:31:053 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,135:18]
2023-10-21 22:45:31:055 action-translator LogManager.java:25 translate 
2023-10-21 22:45:31:055 action-translator LogManager.java:25 translate  $e = $callFunction.cf 
2023-10-21 22:45:31:055 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:44]
2023-10-21 22:45:31:056 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,2:49].[@-1,20:21='cf',<0>,2:62]
2023-10-21 22:45:31:056 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-10-21 22:45:31:056 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:111]
2023-10-21 22:45:31:057 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,3:141].[@-1,35:38='line',<0>,3:144]
2023-10-21 22:45:31:057 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,3:151].[@-1,45:47='pos',<0>,3:154]
2023-10-21 22:45:31:057 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,3:160].[@-1,54:57='text',<0>,3:163]
2023-10-21 22:45:31:058 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,3:170].[@-1,75:75='l',<0>,3:184]
2023-10-21 22:45:31:058 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-21 22:45:31:058 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-10-21 22:45:31:059 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-10-21 22:45:31:059 action-translator LogManager.java:25 translate  $e = $list.p
2023-10-21 22:45:31:059 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-10-21 22:45:31:060 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,5:48].[@-1,12:12='p',<0>,5:53]
2023-10-21 22:45:31:060 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-10-21 22:45:31:060 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:85]
2023-10-21 22:45:31:061 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,6:111].[@-1,35:38='line',<0>,6:118]
2023-10-21 22:45:31:061 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,6:125].[@-1,49:51='pos',<0>,6:132]
2023-10-21 22:45:31:062 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,6:138].[@-1,66:66='l',<0>,6:149]
2023-10-21 22:45:31:062 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-21 22:45:31:062 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,9:30].[@-1,39:42='text',<0>,9:37]
2023-10-21 22:45:31:062 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,10:43].[@-1,102:105='text',<0>,10:50]
2023-10-21 22:45:31:063 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,14:13]
2023-10-21 22:45:31:063 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,14:43].[@-1,240:243='line',<0>,14:50]
2023-10-21 22:45:31:063 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,14:56].[@-1,253:255='pos',<0>,14:63]
2023-10-21 22:45:31:063 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,16:37].[@-1,341:344='text',<0>,16:44]
2023-10-21 22:45:31:064 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,20:13]
2023-10-21 22:45:31:064 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,20:43].[@-1,474:477='line',<0>,20:50]
2023-10-21 22:45:31:065 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,20:56].[@-1,487:489='pos',<0>,20:63]
2023-10-21 22:45:31:065 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-21 22:45:31:066 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,25:16].[@-1,25:28='text',<0>,25:23]
2023-10-21 22:45:31:066 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,26:9]
2023-10-21 22:45:31:066 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,26:39].[@-1,77:80='line',<0>,26:46]
2023-10-21 22:45:31:067 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,26:53].[@-1,91:93='pos',<0>,26:60]
2023-10-21 22:45:31:067 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-21 22:45:31:067 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:32]
2023-10-21 22:45:31:067 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,28:62].[@-1,36:39='line',<0>,28:66]
2023-10-21 22:45:31:068 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,28:73].[@-1,47:49='pos',<0>,28:77]
2023-10-21 22:45:31:068 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-21 22:45:31:068 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-10-21 22:45:31:069 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-10-21 22:45:31:069 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-10-21 22:45:31:069 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-21 22:45:31:070 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-21 22:45:31:070 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:139]
2023-10-21 22:45:31:070 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:169].[@-1,37:41='start',<0>,32:174]
2023-10-21 22:45:31:070 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:192].[@-1,60:64='start',<0>,32:197]
2023-10-21 22:45:31:071 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:217].[@-1,85:85='e',<0>,32:222]
2023-10-21 22:45:31:071 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:226].[@-1,92:95='text',<0>,32:229]
2023-10-21 22:45:31:071 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:236].[@-1,105:105='e',<0>,32:242]
2023-10-21 22:45:31:071 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-21 22:45:31:072 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-21 22:45:31:072 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:149]
2023-10-21 22:45:31:072 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:179].[@-1,37:41='start',<0>,33:184]
2023-10-21 22:45:31:072 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:202].[@-1,60:64='start',<0>,33:207]
2023-10-21 22:45:31:072 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:227].[@-1,85:85='e',<0>,33:232]
2023-10-21 22:45:31:073 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:236].[@-1,92:95='text',<0>,33:239]
2023-10-21 22:45:31:073 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:246].[@-1,105:105='e',<0>,33:252]
2023-10-21 22:45:31:073 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-21 22:45:31:073 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-21 22:45:31:073 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:154]
2023-10-21 22:45:31:073 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:184].[@-1,37:41='start',<0>,34:189]
2023-10-21 22:45:31:073 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:207].[@-1,60:64='start',<0>,34:212]
2023-10-21 22:45:31:074 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:232].[@-1,85:85='e',<0>,34:237]
2023-10-21 22:45:31:074 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:241].[@-1,92:95='text',<0>,34:244]
2023-10-21 22:45:31:074 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:251].[@-1,105:105='e',<0>,34:257]
2023-10-21 22:45:31:074 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-21 22:45:31:074 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-21 22:45:31:075 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:154]
2023-10-21 22:45:31:075 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:184].[@-1,37:41='start',<0>,35:189]
2023-10-21 22:45:31:075 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:207].[@-1,60:64='start',<0>,35:212]
2023-10-21 22:45:31:075 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:232].[@-1,85:85='e',<0>,35:237]
2023-10-21 22:45:31:075 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:241].[@-1,92:95='text',<0>,35:244]
2023-10-21 22:45:31:075 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:251].[@-1,105:105='e',<0>,35:257]
2023-10-21 22:45:31:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-10-21 22:45:31:076 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-21 22:45:31:076 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:151]
2023-10-21 22:45:31:076 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:181].[@-1,37:41='start',<0>,36:186]
2023-10-21 22:45:31:078 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:204].[@-1,60:64='start',<0>,36:209]
2023-10-21 22:45:31:078 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:229].[@-1,85:85='e',<0>,36:234]
2023-10-21 22:45:31:079 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:238].[@-1,92:95='text',<0>,36:241]
2023-10-21 22:45:31:079 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:248].[@-1,105:105='e',<0>,36:254]
2023-10-21 22:45:31:079 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-10-21 22:45:31:080 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-21 22:45:31:080 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:127]
2023-10-21 22:45:31:081 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:157].[@-1,37:41='start',<0>,37:162]
2023-10-21 22:45:31:081 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:180].[@-1,60:64='start',<0>,37:185]
2023-10-21 22:45:31:081 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:205].[@-1,85:85='e',<0>,37:210]
2023-10-21 22:45:31:082 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:214].[@-1,92:95='text',<0>,37:217]
2023-10-21 22:45:31:082 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:224].[@-1,105:105='e',<0>,37:230]
2023-10-21 22:45:31:082 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-10-21 22:45:31:082 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-21 22:45:31:082 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:126]
2023-10-21 22:45:31:083 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:156].[@-1,37:41='start',<0>,38:161]
2023-10-21 22:45:31:083 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:179].[@-1,60:64='start',<0>,38:184]
2023-10-21 22:45:31:083 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:204].[@-1,85:85='e',<0>,38:209]
2023-10-21 22:45:31:083 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:213].[@-1,92:95='text',<0>,38:216]
2023-10-21 22:45:31:084 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:223].[@-1,105:105='e',<0>,38:229]
2023-10-21 22:45:31:084 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-21 22:45:31:084 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-21 22:45:31:085 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-21 22:45:31:085 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-21 22:45:31:085 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-10-21 22:45:31:085 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-10-21 22:45:31:085 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-10-21 22:45:31:086 action-translator LogManager.java:25 translate 
2023-10-21 22:45:31:086 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-21 22:45:31:087 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-21 22:45:31:087 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-21 22:45:31:087 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-21 22:45:31:087 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-21 22:45:31:087 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-21 22:45:31:088 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-21 22:45:31:088 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-21 22:45:31:088 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-21 22:45:31:088 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-21 22:45:31:089 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-21 22:45:31:090 action-translator LogManager.java:25 translate 
2023-10-21 22:45:31:090 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-10-21 22:45:31:090 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-10-21 22:45:31:090 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-10-21 22:45:31:090 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-10-21 22:45:31:090 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-10-21 22:45:31:091 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:091 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-10-21 22:45:31:091 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-10-21 22:45:31:091 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-10-21 22:45:31:091 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-10-21 22:45:31:091 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-10-21 22:45:31:091 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-10-21 22:45:31:092 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-21 22:45:31:092 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-10-21 22:45:31:092 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:111]
2023-10-21 22:45:31:092 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:144].[@-1,40:44='start',<0>,6:149]
2023-10-21 22:45:31:092 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:167].[@-1,63:67='start',<0>,6:172]
2023-10-21 22:45:31:092 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:192].[@-1,88:88='p',<0>,6:197]
2023-10-21 22:45:31:092 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:201].[@-1,95:98='text',<0>,6:204]
2023-10-21 22:45:31:093 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:093 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-21 22:45:31:093 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-21 22:45:31:093 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,195:36]
2023-10-21 22:45:31:094 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,195:65].[@-1,34:37='line',<0>,195:68]
2023-10-21 22:45:31:094 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,195:75].[@-1,44:46='pos',<0>,195:78]
2023-10-21 22:45:31:094 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,195:84].[@-1,53:56='text',<0>,195:87]
2023-10-21 22:45:31:094 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,195:94].[@-1,75:75='l',<0>,195:109]
2023-10-21 22:45:31:095 action-translator LogManager.java:25 translate 
2023-10-21 22:45:31:096 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-21 22:45:31:096 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-21 22:45:31:096 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-21 22:45:31:096 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-21 22:45:31:096 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-21 22:45:31:096 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-21 22:45:31:097 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-21 22:45:31:097 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:097 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-10-21 22:45:31:097 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-10-21 22:45:31:097 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-10-21 22:45:31:098 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-10-21 22:45:31:098 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:098 action-translator LogManager.java:25 translate 
2023-10-21 22:45:31:099 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-10-21 22:45:31:099 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-10-21 22:45:31:099 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-10-21 22:45:31:099 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-10-21 22:45:31:099 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-21 22:45:31:100 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-10-21 22:45:31:100 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:100 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-10-21 22:45:31:101 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-10-21 22:45:31:101 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-10-21 22:45:31:102 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-10-21 22:45:31:102 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-10-21 22:45:31:102 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-21 22:45:31:286 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-21 22:45:31:286 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-21 22:45:31:329 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-21 22:45:31:329 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

