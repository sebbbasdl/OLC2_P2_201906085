2023-11-02 12:04:01:554 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-11-02 12:04:01:574 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-11-02 12:04:01:953 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT returntmt { $inst = $returntmt.ret }) (ALT callFunctionInst { $inst = $callFunctionInst.cfi }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE callFunctionInst (returns interfaces.Instruction cfi) (BLOCK (ALT ID PARIZQ listParams PARDER { $cfi = instructions.NewCall_Function($ID.line, $ID.pos, $ID.text, $listParams.l) }))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT (= list listParamsFunc) COMA GUIONB ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT GUIONB ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE returntmt (returns  interfaces.Instruction ret) (BLOCK (ALT RETURN expr {  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)  }))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MODULO))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-11-02 12:04:01:960 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT returntmt { $inst = $returntmt.ret }) (ALT callFunctionInst { $inst = $callFunctionInst.cfi }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE callFunctionInst (returns interfaces.Instruction cfi) (BLOCK (ALT ID PARIZQ listParams PARDER { $cfi = instructions.NewCall_Function($ID.line, $ID.pos, $ID.text, $listParams.l) }))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT (= list listParamsFunc) COMA GUIONB ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT GUIONB ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE returntmt (returns  interfaces.Instruction ret) (BLOCK (ALT RETURN expr {  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)  }))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (SET MUL DIV MODULO)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-11-02 12:04:01:962 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT returntmt { $inst = $returntmt.ret }) (ALT callFunctionInst { $inst = $callFunctionInst.cfi }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE callFunctionInst (returns interfaces.Instruction cfi) (BLOCK (ALT ID PARIZQ listParams PARDER { $cfi = instructions.NewCall_Function($ID.line, $ID.pos, $ID.text, $listParams.l) }))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT (= list listParamsFunc) COMA GUIONB ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT GUIONB ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE returntmt (returns  interfaces.Instruction ret) (BLOCK (ALT RETURN expr {  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)  }))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (SET MUL DIV MODULO)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-11-02 12:04:01:962 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-11-02 12:04:01:986 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=197> ID<tokenIndex=199> D_PTS<tokenIndex=201> types<tokenIndex=203> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=183> VAR<tokenIndex=185> ID<tokenIndex=187> D_PTS<tokenIndex=189> types<tokenIndex=191> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-11-02 12:04:02:010 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 197))) (ID (ELEMENT_OPTIONS (= tokenIndex 199))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 201))) (types (ELEMENT_OPTIONS (= tokenIndex 203))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 183))) (VAR (ELEMENT_OPTIONS (= tokenIndex 185))) (ID (ELEMENT_OPTIONS (= tokenIndex 187))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 189))) (types (ELEMENT_OPTIONS (= tokenIndex 191))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-11-02 12:04:02:012 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lpf]
    :   ( {} ID<tokenIndex=307> D_PTS<tokenIndex=309> types<tokenIndex=311> {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | GUIONB<tokenIndex=335> ID<tokenIndex=337> D_PTS<tokenIndex=339> types<tokenIndex=341> {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | { $lpf = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=295> ID<tokenIndex=297> D_PTS<tokenIndex=299> types<tokenIndex=301> {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=321> GUIONB<tokenIndex=323> ID<tokenIndex=325> D_PTS<tokenIndex=327> types<tokenIndex=329> {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
        )*
    ;
2023-11-02 12:04:02:015 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 307))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 309))) (types (ELEMENT_OPTIONS (= tokenIndex 311))) {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT (GUIONB (ELEMENT_OPTIONS (= tokenIndex 335))) (ID (ELEMENT_OPTIONS (= tokenIndex 337))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 339))) (types (ELEMENT_OPTIONS (= tokenIndex 341))) {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 295))) (ID (ELEMENT_OPTIONS (= tokenIndex 297))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 299))) (types (ELEMENT_OPTIONS (= tokenIndex 301))) {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 321))) (GUIONB (ELEMENT_OPTIONS (= tokenIndex 323))) (ID (ELEMENT_OPTIONS (= tokenIndex 325))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 327))) (types (ELEMENT_OPTIONS (= tokenIndex 329))) {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }))))))
2023-11-02 12:04:02:015 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=498>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=492> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-11-02 12:04:02:018 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 498))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 492))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-11-02 12:04:02:018 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=574>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=568> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-11-02 12:04:02:021 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 574))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 568))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-11-02 12:04:02:023 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=SUB<tokenIndex=901> right=expr<tokenIndex=905,p=20> { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) } 
        | callFunction<tokenIndex=1045> { $e = $callFunction.cf } 
        | ID<tokenIndex=1051> LLAVEIZQ<tokenIndex=1053> listStructExp<tokenIndex=1055> LLAVEDER<tokenIndex=1057> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | PARIZQ<tokenIndex=1063> expr<tokenIndex=1065> PARDER<tokenIndex=1067> { $e = $expr.e } 
        | list=listArray<tokenIndex=1075> { $e = $list.p} 
        | CORIZQ<tokenIndex=1081> listParams<tokenIndex=1083> CORDER<tokenIndex=1085> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | INT<tokenIndex=1091> PARIZQ<tokenIndex=1093> expr<tokenIndex=1095> PARDER<tokenIndex=1097> { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) } 
        | STR<tokenIndex=1103> PARIZQ<tokenIndex=1105> expr<tokenIndex=1107> PARDER<tokenIndex=1109> { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) } 
        | FLOAT<tokenIndex=1115> PARIZQ<tokenIndex=1117> expr<tokenIndex=1119> PARDER<tokenIndex=1121> { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) } 
        | NUMBER<tokenIndex=1127>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1133>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1139> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1145> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=918>|DIV<tokenIndex=920>|MODULO<tokenIndex=922>) right=expr<tokenIndex=927,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=940>|SUB<tokenIndex=942>) right=expr<tokenIndex=947,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=960>|MAYOR<tokenIndex=962>) right=expr<tokenIndex=967,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=980>|MENOR<tokenIndex=982>) right=expr<tokenIndex=987,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=1000>|DIF<tokenIndex=1002>) right=expr<tokenIndex=1007,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=1019> right=expr<tokenIndex=1023,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=1035> right=expr<tokenIndex=1039,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-11-02 12:04:02:033 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 901)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 905) (= p 20)))) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 1045))) { $e = $callFunction.cf }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1051))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 1053))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 1055))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 1057))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1063))) (expr (ELEMENT_OPTIONS (= tokenIndex 1065))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1067))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 1075)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1081))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1083))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1085))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 1091))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1093))) (expr (ELEMENT_OPTIONS (= tokenIndex 1095))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1097))) { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) }) (ALT (STR (ELEMENT_OPTIONS (= tokenIndex 1103))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1105))) (expr (ELEMENT_OPTIONS (= tokenIndex 1107))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1109))) { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) }) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 1115))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1117))) (expr (ELEMENT_OPTIONS (= tokenIndex 1119))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1121))) { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1127))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1133))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1139))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1145))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 918))) (DIV (ELEMENT_OPTIONS (= tokenIndex 920))) (MODULO (ELEMENT_OPTIONS (= tokenIndex 922))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 927) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 940))) (SUB (ELEMENT_OPTIONS (= tokenIndex 942))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 947) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 960))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 962))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 967) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 980))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 982))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 987) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1000))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1002))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1007) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1019)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1023) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1035)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1039) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-11-02 12:04:02:033 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1170> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1162> expr<tokenIndex=1164> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-11-02 12:04:02:035 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1170))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1162))) (expr (ELEMENT_OPTIONS (= tokenIndex 1164))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-11-02 12:04:02:036 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1213> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=1189> expr<tokenIndex=1191> CORDER<tokenIndex=1193> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1205> ID<tokenIndex=1207> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2023-11-02 12:04:02:039 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1213))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1189))) (expr (ELEMENT_OPTIONS (= tokenIndex 1191))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1193))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1205))) (ID (ELEMENT_OPTIONS (= tokenIndex 1207))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2023-11-02 12:04:02:039 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1257>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1249> expr<tokenIndex=1251> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-11-02 12:04:02:041 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1257))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1249))) (expr (ELEMENT_OPTIONS (= tokenIndex 1251))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-11-02 12:04:02:042 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1290> D_PTS<tokenIndex=1292> expr<tokenIndex=1294>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1278> ID<tokenIndex=1280> D_PTS<tokenIndex=1282> expr<tokenIndex=1284> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-11-02 12:04:02:044 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1290))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1292))) (expr (ELEMENT_OPTIONS (= tokenIndex 1294))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1278))) (ID (ELEMENT_OPTIONS (= tokenIndex 1280))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1282))) (expr (ELEMENT_OPTIONS (= tokenIndex 1284))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-11-02 12:04:02:055 grammar LogManager.java:25 import INT=1
2023-11-02 12:04:02:056 grammar LogManager.java:25 import FLOAT=2
2023-11-02 12:04:02:056 grammar LogManager.java:25 import BOOL=3
2023-11-02 12:04:02:056 grammar LogManager.java:25 import STR=4
2023-11-02 12:04:02:057 grammar LogManager.java:25 import TRU=5
2023-11-02 12:04:02:058 grammar LogManager.java:25 import FAL=6
2023-11-02 12:04:02:058 grammar LogManager.java:25 import PRINT=7
2023-11-02 12:04:02:058 grammar LogManager.java:25 import IF=8
2023-11-02 12:04:02:058 grammar LogManager.java:25 import ELSE=9
2023-11-02 12:04:02:059 grammar LogManager.java:25 import WHILE=10
2023-11-02 12:04:02:059 grammar LogManager.java:25 import FOR=11
2023-11-02 12:04:02:059 grammar LogManager.java:25 import SWITCH=12
2023-11-02 12:04:02:059 grammar LogManager.java:25 import CASE=13
2023-11-02 12:04:02:060 grammar LogManager.java:25 import DEFAULT=14
2023-11-02 12:04:02:060 grammar LogManager.java:25 import IN=15
2023-11-02 12:04:02:060 grammar LogManager.java:25 import VAR=16
2023-11-02 12:04:02:060 grammar LogManager.java:25 import LET=17
2023-11-02 12:04:02:061 grammar LogManager.java:25 import BREAK=18
2023-11-02 12:04:02:061 grammar LogManager.java:25 import CONTINUE=19
2023-11-02 12:04:02:061 grammar LogManager.java:25 import RETURN=20
2023-11-02 12:04:02:062 grammar LogManager.java:25 import GUARD=21
2023-11-02 12:04:02:062 grammar LogManager.java:25 import APPEND=22
2023-11-02 12:04:02:062 grammar LogManager.java:25 import REMOVELAST=23
2023-11-02 12:04:02:063 grammar LogManager.java:25 import REMOVE=24
2023-11-02 12:04:02:063 grammar LogManager.java:25 import COUNT=25
2023-11-02 12:04:02:063 grammar LogManager.java:25 import ISEMPTY=26
2023-11-02 12:04:02:064 grammar LogManager.java:25 import AT=27
2023-11-02 12:04:02:064 grammar LogManager.java:25 import FUNC=28
2023-11-02 12:04:02:064 grammar LogManager.java:25 import STRUCT=29
2023-11-02 12:04:02:064 grammar LogManager.java:25 import NUMBER=30
2023-11-02 12:04:02:065 grammar LogManager.java:25 import STRING=31
2023-11-02 12:04:02:065 grammar LogManager.java:25 import ID=32
2023-11-02 12:04:02:065 grammar LogManager.java:25 import DIF=33
2023-11-02 12:04:02:065 grammar LogManager.java:25 import IG_IG=34
2023-11-02 12:04:02:065 grammar LogManager.java:25 import NOT=35
2023-11-02 12:04:02:066 grammar LogManager.java:25 import OR=36
2023-11-02 12:04:02:066 grammar LogManager.java:25 import AND=37
2023-11-02 12:04:02:066 grammar LogManager.java:25 import IG=38
2023-11-02 12:04:02:066 grammar LogManager.java:25 import MAY_IG=39
2023-11-02 12:04:02:067 grammar LogManager.java:25 import MEN_IG=40
2023-11-02 12:04:02:067 grammar LogManager.java:25 import MAYOR=41
2023-11-02 12:04:02:067 grammar LogManager.java:25 import MENOR=42
2023-11-02 12:04:02:067 grammar LogManager.java:25 import MUL=43
2023-11-02 12:04:02:067 grammar LogManager.java:25 import DIV=44
2023-11-02 12:04:02:068 grammar LogManager.java:25 import ADD=45
2023-11-02 12:04:02:068 grammar LogManager.java:25 import SUB=46
2023-11-02 12:04:02:068 grammar LogManager.java:25 import PARIZQ=47
2023-11-02 12:04:02:068 grammar LogManager.java:25 import PARDER=48
2023-11-02 12:04:02:068 grammar LogManager.java:25 import LLAVEIZQ=49
2023-11-02 12:04:02:069 grammar LogManager.java:25 import LLAVEDER=50
2023-11-02 12:04:02:069 grammar LogManager.java:25 import D_PTS=51
2023-11-02 12:04:02:069 grammar LogManager.java:25 import CORIZQ=52
2023-11-02 12:04:02:069 grammar LogManager.java:25 import CORDER=53
2023-11-02 12:04:02:070 grammar LogManager.java:25 import COMA=54
2023-11-02 12:04:02:070 grammar LogManager.java:25 import ARROW1=55
2023-11-02 12:04:02:070 grammar LogManager.java:25 import PUNTO=56
2023-11-02 12:04:02:071 grammar LogManager.java:25 import MODULO=57
2023-11-02 12:04:02:071 grammar LogManager.java:25 import GUIONB=58
2023-11-02 12:04:02:071 grammar LogManager.java:25 import WHITESPACE=59
2023-11-02 12:04:02:071 grammar LogManager.java:25 import COMMENT=60
2023-11-02 12:04:02:072 grammar LogManager.java:25 import LINE_COMMENT=61
2023-11-02 12:04:02:072 grammar LogManager.java:25 import 'Int'=1
2023-11-02 12:04:02:072 grammar LogManager.java:25 import 'Float'=2
2023-11-02 12:04:02:072 grammar LogManager.java:25 import 'Bool'=3
2023-11-02 12:04:02:072 grammar LogManager.java:25 import 'String'=4
2023-11-02 12:04:02:073 grammar LogManager.java:25 import 'true'=5
2023-11-02 12:04:02:073 grammar LogManager.java:25 import 'false'=6
2023-11-02 12:04:02:073 grammar LogManager.java:25 import 'print'=7
2023-11-02 12:04:02:073 grammar LogManager.java:25 import 'if'=8
2023-11-02 12:04:02:073 grammar LogManager.java:25 import 'else'=9
2023-11-02 12:04:02:073 grammar LogManager.java:25 import 'while'=10
2023-11-02 12:04:02:074 grammar LogManager.java:25 import 'for'=11
2023-11-02 12:04:02:074 grammar LogManager.java:25 import 'switch'=12
2023-11-02 12:04:02:074 grammar LogManager.java:25 import 'case'=13
2023-11-02 12:04:02:074 grammar LogManager.java:25 import 'default'=14
2023-11-02 12:04:02:074 grammar LogManager.java:25 import 'in'=15
2023-11-02 12:04:02:074 grammar LogManager.java:25 import 'var'=16
2023-11-02 12:04:02:075 grammar LogManager.java:25 import 'let'=17
2023-11-02 12:04:02:075 grammar LogManager.java:25 import 'break'=18
2023-11-02 12:04:02:075 grammar LogManager.java:25 import 'continue'=19
2023-11-02 12:04:02:075 grammar LogManager.java:25 import 'return'=20
2023-11-02 12:04:02:075 grammar LogManager.java:25 import 'guard'=21
2023-11-02 12:04:02:075 grammar LogManager.java:25 import 'append'=22
2023-11-02 12:04:02:076 grammar LogManager.java:25 import 'removeLast'=23
2023-11-02 12:04:02:076 grammar LogManager.java:25 import 'remove'=24
2023-11-02 12:04:02:076 grammar LogManager.java:25 import 'count'=25
2023-11-02 12:04:02:076 grammar LogManager.java:25 import 'isEmpty'=26
2023-11-02 12:04:02:076 grammar LogManager.java:25 import 'at'=27
2023-11-02 12:04:02:077 grammar LogManager.java:25 import 'func'=28
2023-11-02 12:04:02:077 grammar LogManager.java:25 import 'struct'=29
2023-11-02 12:04:02:077 grammar LogManager.java:25 import '!='=33
2023-11-02 12:04:02:077 grammar LogManager.java:25 import '=='=34
2023-11-02 12:04:02:077 grammar LogManager.java:25 import '!'=35
2023-11-02 12:04:02:078 grammar LogManager.java:25 import '||'=36
2023-11-02 12:04:02:078 grammar LogManager.java:25 import '&&'=37
2023-11-02 12:04:02:078 grammar LogManager.java:25 import '='=38
2023-11-02 12:04:02:078 grammar LogManager.java:25 import '>='=39
2023-11-02 12:04:02:078 grammar LogManager.java:25 import '<='=40
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '>'=41
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '<'=42
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '*'=43
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '/'=44
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '+'=45
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '-'=46
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '('=47
2023-11-02 12:04:02:079 grammar LogManager.java:25 import ')'=48
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '{'=49
2023-11-02 12:04:02:079 grammar LogManager.java:25 import '}'=50
2023-11-02 12:04:02:079 grammar LogManager.java:25 import ':'=51
2023-11-02 12:04:02:080 grammar LogManager.java:25 import '['=52
2023-11-02 12:04:02:080 grammar LogManager.java:25 import ']'=53
2023-11-02 12:04:02:080 grammar LogManager.java:25 import ','=54
2023-11-02 12:04:02:080 grammar LogManager.java:25 import '->'=55
2023-11-02 12:04:02:080 grammar LogManager.java:25 import '.'=56
2023-11-02 12:04:02:080 grammar LogManager.java:25 import '%'=57
2023-11-02 12:04:02:080 grammar LogManager.java:25 import '_'=58
2023-11-02 12:04:02:081 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-11-02 12:04:02:081 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61}
2023-11-02 12:04:02:081 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-11-02 12:04:02:122 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-11-02 12:04:02:123 LL1 LogManager.java:25 look=[{7..8, 10..12, 16..21, 28..29, 32}, null]
2023-11-02 12:04:02:123 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:123 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-11-02 12:04:02:123 LL1 LogManager.java:25 look=[7, 8, {16..17}, 32, 28, 29, 10, 11, 21, 12, 18, 19, 20, 32]
2023-11-02 12:04:02:123 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:123 LL1 LogManager.java:25 
DECISION 2 in rule listStructDec
2023-11-02 12:04:02:124 LL1 LogManager.java:25 look=[16, null]
2023-11-02 12:04:02:124 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:124 LL1 LogManager.java:25 
DECISION 3 in rule listStructDec
2023-11-02 12:04:02:124 LL1 LogManager.java:25 look=[null, 50]
2023-11-02 12:04:02:124 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:124 LL1 LogManager.java:25 
DECISION 4 in rule function
2023-11-02 12:04:02:124 LL1 LogManager.java:25 look=[28, 28]
2023-11-02 12:04:02:124 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:124 LL1 LogManager.java:25 
DECISION 5 in rule listParamsFunc
2023-11-02 12:04:02:124 LL1 LogManager.java:25 look=[32, 58, null]
2023-11-02 12:04:02:124 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:124 LL1 LogManager.java:25 
DECISION 6 in rule listParamsFunc
2023-11-02 12:04:02:124 LL1 LogManager.java:25 look=[null, null]
2023-11-02 12:04:02:124 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:124 LL1 LogManager.java:25 
DECISION 7 in rule listParamsFunc
2023-11-02 12:04:02:124 LL1 LogManager.java:25 look=[null, 48]
2023-11-02 12:04:02:124 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:125 LL1 LogManager.java:25 
DECISION 8 in rule ifstmt
2023-11-02 12:04:02:125 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-11-02 12:04:02:125 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:125 LL1 LogManager.java:25 
DECISION 9 in rule elseiflist
2023-11-02 12:04:02:125 LL1 LogManager.java:25 look=[null, null]
2023-11-02 12:04:02:125 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:125 LL1 LogManager.java:25 
DECISION 10 in rule caselist
2023-11-02 12:04:02:125 LL1 LogManager.java:25 look=[null, 14]
2023-11-02 12:04:02:125 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:125 LL1 LogManager.java:25 
DECISION 11 in rule forstmt
2023-11-02 12:04:02:125 LL1 LogManager.java:25 look=[11, 11, 11]
2023-11-02 12:04:02:125 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:125 LL1 LogManager.java:25 
DECISION 12 in rule declarationstmt
2023-11-02 12:04:02:125 LL1 LogManager.java:25 look=[16, 16, 17, 17]
2023-11-02 12:04:02:125 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:125 LL1 LogManager.java:25 
DECISION 13 in rule types
2023-11-02 12:04:02:125 LL1 LogManager.java:25 look=[1, 2, 4, 3, 52]
2023-11-02 12:04:02:126 LL1 LogManager.java:25 LL(1)? true
2023-11-02 12:04:02:126 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-11-02 12:04:02:126 LL1 LogManager.java:25 look=[46, 32, 32, 47, 32, 52, 1, 4, 2, 30, 31, 5, 6]
2023-11-02 12:04:02:126 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:126 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-11-02 12:04:02:126 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-11-02 12:04:02:126 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:126 LL1 LogManager.java:25 
DECISION 16 in rule expr
2023-11-02 12:04:02:126 LL1 LogManager.java:25 look=[null, null]
2023-11-02 12:04:02:126 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:126 LL1 LogManager.java:25 
DECISION 17 in rule listParams
2023-11-02 12:04:02:126 LL1 LogManager.java:25 look=[null, {48, 53}]
2023-11-02 12:04:02:126 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:126 LL1 LogManager.java:25 
DECISION 18 in rule listArray
2023-11-02 12:04:02:126 LL1 LogManager.java:25 look=[null, null]
2023-11-02 12:04:02:126 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:126 LL1 LogManager.java:25 
DECISION 19 in rule listArray
2023-11-02 12:04:02:127 LL1 LogManager.java:25 look=[null, null]
2023-11-02 12:04:02:127 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:127 LL1 LogManager.java:25 
DECISION 20 in rule listParamsCall
2023-11-02 12:04:02:127 LL1 LogManager.java:25 look=[{1..2, 4..6, 30..32, 46..47, 52}, null]
2023-11-02 12:04:02:127 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:127 LL1 LogManager.java:25 
DECISION 21 in rule listParamsCall
2023-11-02 12:04:02:127 LL1 LogManager.java:25 look=[null, 48]
2023-11-02 12:04:02:127 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:127 LL1 LogManager.java:25 
DECISION 22 in rule listStructExp
2023-11-02 12:04:02:127 LL1 LogManager.java:25 look=[32, null]
2023-11-02 12:04:02:127 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:127 LL1 LogManager.java:25 
DECISION 23 in rule listStructExp
2023-11-02 12:04:02:128 LL1 LogManager.java:25 look=[null, 50]
2023-11-02 12:04:02:128 LL1 LogManager.java:25 LL(1)? false
2023-11-02 12:04:02:137 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-11-02 12:04:02:155 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-11-02 12:04:02:155 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-11-02 12:04:02:156 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-11-02 12:04:02:159 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-11-02 12:04:02:160 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-11-02 12:04:02:161 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-11-02 12:04:02:161 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-11-02 12:04:02:161 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-11-02 12:04:02:162 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-11-02 12:04:02:162 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-11-02 12:04:02:163 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-11-02 12:04:02:163 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-11-02 12:04:02:164 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-11-02 12:04:02:164 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-11-02 12:04:02:164 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-11-02 12:04:02:164 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-11-02 12:04:02:165 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-11-02 12:04:02:166 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2023-11-02 12:04:02:166 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-11-02 12:04:02:166 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,42:23].[@-1,21:23='ass',<0>,42:34]
2023-11-02 12:04:02:166 action-translator LogManager.java:25 translate  $inst = $function.fun 
2023-11-02 12:04:02:167 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:13]
2023-11-02 12:04:02:167 action-translator LogManager.java:25 qattr [@-1,10:17='function',<0>,43:21].[@-1,19:21='fun',<0>,43:30]
2023-11-02 12:04:02:168 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-11-02 12:04:02:168 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:19]
2023-11-02 12:04:02:169 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,44:27].[@-1,25:27='dec',<0>,44:42]
2023-11-02 12:04:02:169 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-11-02 12:04:02:169 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-11-02 12:04:02:170 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,45:22].[@-1,20:25='whiles',<0>,45:32]
2023-11-02 12:04:02:170 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-11-02 12:04:02:170 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:12]
2023-11-02 12:04:02:170 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,46:20].[@-1,18:21='fors',<0>,46:28]
2023-11-02 12:04:02:171 action-translator LogManager.java:25 translate  $inst = $guardtmt.guard 
2023-11-02 12:04:02:171 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:13]
2023-11-02 12:04:02:171 action-translator LogManager.java:25 qattr [@-1,10:17='guardtmt',<0>,47:21].[@-1,19:23='guard',<0>,47:30]
2023-11-02 12:04:02:172 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-11-02 12:04:02:172 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:14]
2023-11-02 12:04:02:172 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,48:22].[@-1,20:24='swtch',<0>,48:32]
2023-11-02 12:04:02:172 action-translator LogManager.java:25 translate  $inst = $breaktmt.break 
2023-11-02 12:04:02:172 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:13]
2023-11-02 12:04:02:172 action-translator LogManager.java:25 qattr [@-1,10:17='breaktmt',<0>,49:21].[@-1,19:23='break',<0>,49:30]
2023-11-02 12:04:02:173 action-translator LogManager.java:25 translate  $inst = $continuetmt.continue 
2023-11-02 12:04:02:173 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:15]
2023-11-02 12:04:02:173 action-translator LogManager.java:25 qattr [@-1,10:20='continuetmt',<0>,50:23].[@-1,22:29='continue',<0>,50:35]
2023-11-02 12:04:02:173 action-translator LogManager.java:25 translate  $inst = $returntmt.ret 
2023-11-02 12:04:02:174 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:14]
2023-11-02 12:04:02:174 action-translator LogManager.java:25 qattr [@-1,10:18='returntmt',<0>,51:22].[@-1,20:22='ret',<0>,51:32]
2023-11-02 12:04:02:175 action-translator LogManager.java:25 translate  $inst = $callFunctionInst.cfi 
2023-11-02 12:04:02:175 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:21]
2023-11-02 12:04:02:175 action-translator LogManager.java:25 qattr [@-1,10:25='callFunctionInst',<0>,52:29].[@-1,27:29='cfi',<0>,52:46]
2023-11-02 12:04:02:176 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-11-02 12:04:02:176 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,57:46]
2023-11-02 12:04:02:177 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,57:76].[@-1,39:42='line',<0>,57:83]
2023-11-02 12:04:02:179 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,57:90].[@-1,53:55='pos',<0>,57:97]
2023-11-02 12:04:02:179 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,57:103].[@-1,62:65='text',<0>,57:106]
2023-11-02 12:04:02:180 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,57:113].[@-1,83:83='l',<0>,57:127]
2023-11-02 12:04:02:181 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:182 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-11-02 12:04:02:182 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-11-02 12:04:02:183 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-11-02 12:04:02:183 action-translator LogManager.java:25 attr [@-1,213:213='l',<0>,6:25]
2023-11-02 12:04:02:183 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-11-02 12:04:02:183 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-11-02 12:04:02:184 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:185 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-11-02 12:04:02:185 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,13:98].[@-1,184:187='text',<0>,13:101]
2023-11-02 12:04:02:185 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,13:108].[@-1,197:198='ty',<0>,13:114]
2023-11-02 12:04:02:185 action-translator LogManager.java:25 qattr [@-1,274:277='list',<0>,14:72].[@-1,279:279='l',<0>,14:77]
2023-11-02 12:04:02:186 action-translator LogManager.java:25 attr [@-1,353:353='l',<0>,15:59]
2023-11-02 12:04:02:189 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:190 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)

2023-11-02 12:04:02:191 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,79:5]
2023-11-02 12:04:02:191 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,79:37].[@-1,43:46='line',<0>,79:42]
2023-11-02 12:04:02:191 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,79:49].[@-1,55:57='pos',<0>,79:54]
2023-11-02 12:04:02:192 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,79:60].[@-1,64:67='text',<0>,79:63]
2023-11-02 12:04:02:192 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,79:70].[@-1,86:88='lpf',<0>,79:85]
2023-11-02 12:04:02:193 action-translator LogManager.java:25 qattr [@-1,110:114='block',<0>,79:109].[@-1,116:118='blk',<0>,79:115]
2023-11-02 12:04:02:193 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)

2023-11-02 12:04:02:193 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,83:5]
2023-11-02 12:04:02:194 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,83:37].[@-1,43:46='line',<0>,83:42]
2023-11-02 12:04:02:194 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,83:49].[@-1,55:57='pos',<0>,83:54]
2023-11-02 12:04:02:194 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,83:60].[@-1,64:67='text',<0>,83:63]
2023-11-02 12:04:02:194 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,83:70].[@-1,86:88='lpf',<0>,83:85]
2023-11-02 12:04:02:194 action-translator LogManager.java:25 qattr [@-1,92:96='types',<0>,83:91].[@-1,98:99='ty',<0>,83:97]
2023-11-02 12:04:02:195 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,83:102].[@-1,109:111='blk',<0>,83:108]
2023-11-02 12:04:02:195 action-translator LogManager.java:25 translate  $cfi = instructions.NewCall_Function($ID.line, $ID.pos, $ID.text, $listParams.l) 
2023-11-02 12:04:02:196 action-translator LogManager.java:25 attr [@-1,2:4='cfi',<0>,88:32]
2023-11-02 12:04:02:196 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,88:69].[@-1,42:45='line',<0>,88:72]
2023-11-02 12:04:02:196 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,88:79].[@-1,52:54='pos',<0>,88:82]
2023-11-02 12:04:02:197 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,88:88].[@-1,61:64='text',<0>,88:91]
2023-11-02 12:04:02:198 action-translator LogManager.java:25 qattr [@-1,68:77='listParams',<0>,88:98].[@-1,79:79='l',<0>,88:109]
2023-11-02 12:04:02:199 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:201 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-11-02 12:04:02:201 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,3:5]
2023-11-02 12:04:02:202 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,4:51].[@-1,84:87='line',<0>,4:54]
2023-11-02 12:04:02:202 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,4:61].[@-1,94:96='pos',<0>,4:64]
2023-11-02 12:04:02:203 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,4:70].[@-1,103:106='text',<0>,4:73]
2023-11-02 12:04:02:203 action-translator LogManager.java:25 qattr [@-1,110:114='types',<0>,4:80].[@-1,116:117='ty',<0>,4:86]
2023-11-02 12:04:02:203 action-translator LogManager.java:25 attr [@-1,126:128='lpf',<0>,5:5]
2023-11-02 12:04:02:204 action-translator LogManager.java:25 attr [@-1,140:142='lpf',<0>,5:19]
2023-11-02 12:04:02:204 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-11-02 12:04:02:205 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,8:5]
2023-11-02 12:04:02:205 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,9:51].[@-1,84:87='line',<0>,9:54]
2023-11-02 12:04:02:205 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,9:61].[@-1,94:96='pos',<0>,9:64]
2023-11-02 12:04:02:205 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,9:70].[@-1,103:106='text',<0>,9:73]
2023-11-02 12:04:02:205 action-translator LogManager.java:25 qattr [@-1,110:114='types',<0>,9:80].[@-1,116:117='ty',<0>,9:86]
2023-11-02 12:04:02:205 action-translator LogManager.java:25 attr [@-1,126:128='lpf',<0>,10:5]
2023-11-02 12:04:02:205 action-translator LogManager.java:25 attr [@-1,140:142='lpf',<0>,10:19]
2023-11-02 12:04:02:205 action-translator LogManager.java:25 translate  $lpf = []interface{}{} 
2023-11-02 12:04:02:205 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,12:12]
2023-11-02 12:04:02:206 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-11-02 12:04:02:206 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-11-02 12:04:02:206 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,17:61].[@-1,103:106='line',<0>,17:64]
2023-11-02 12:04:02:206 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,17:71].[@-1,113:115='pos',<0>,17:74]
2023-11-02 12:04:02:207 action-translator LogManager.java:25 qattr [@-1,119:120='ID',<0>,17:80].[@-1,122:125='text',<0>,17:83]
2023-11-02 12:04:02:207 action-translator LogManager.java:25 qattr [@-1,129:133='types',<0>,17:90].[@-1,135:136='ty',<0>,17:96]
2023-11-02 12:04:02:207 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,18:28].[@-1,173:175='lpf',<0>,18:33]
2023-11-02 12:04:02:207 action-translator LogManager.java:25 attr [@-1,204:206='lpf',<0>,19:15]
2023-11-02 12:04:02:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:208 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-11-02 12:04:02:209 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,23:61].[@-1,103:106='line',<0>,23:64]
2023-11-02 12:04:02:209 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,23:71].[@-1,113:115='pos',<0>,23:74]
2023-11-02 12:04:02:210 action-translator LogManager.java:25 qattr [@-1,119:120='ID',<0>,23:80].[@-1,122:125='text',<0>,23:83]
2023-11-02 12:04:02:210 action-translator LogManager.java:25 qattr [@-1,129:133='types',<0>,23:90].[@-1,135:136='ty',<0>,23:96]
2023-11-02 12:04:02:210 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,24:28].[@-1,173:175='lpf',<0>,24:33]
2023-11-02 12:04:02:211 action-translator LogManager.java:25 attr [@-1,204:206='lpf',<0>,25:15]
2023-11-02 12:04:02:211 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-11-02 12:04:02:212 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:212 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)
2023-11-02 12:04:02:213 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,118:15]
2023-11-02 12:04:02:213 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,118:49].[@-1,39:42='line',<0>,118:52]
2023-11-02 12:04:02:213 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,118:59].[@-1,49:51='pos',<0>,118:62]
2023-11-02 12:04:02:214 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,118:68].[@-1,58:61='text',<0>,118:71]
2023-11-02 12:04:02:214 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,118:78].[@-1,70:70='e',<0>,118:83]
2023-11-02 12:04:02:215 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-11-02 12:04:02:215 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,122:29]
2023-11-02 12:04:02:215 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,122:59].[@-1,38:41='line',<0>,122:65]
2023-11-02 12:04:02:216 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,122:71].[@-1,50:52='pos',<0>,122:77]
2023-11-02 12:04:02:216 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,122:82].[@-1,60:60='e',<0>,122:87]
2023-11-02 12:04:02:218 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-11-02 12:04:02:218 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,126:36]
2023-11-02 12:04:02:218 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,126:65].[@-1,34:37='line',<0>,126:68]
2023-11-02 12:04:02:219 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,126:75].[@-1,44:46='pos',<0>,126:78]
2023-11-02 12:04:02:219 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,126:84].[@-1,55:55='e',<0>,126:89]
2023-11-02 12:04:02:220 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,126:93].[@-1,65:67='blk',<0>,126:99]
2023-11-02 12:04:02:220 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-11-02 12:04:02:221 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,127:69]
2023-11-02 12:04:02:221 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,127:98].[@-1,33:36='line',<0>,127:101]
2023-11-02 12:04:02:221 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,127:108].[@-1,43:45='pos',<0>,127:111]
2023-11-02 12:04:02:221 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,127:117].[@-1,54:54='e',<0>,127:122]
2023-11-02 12:04:02:221 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,127:126].[@-1,61:63='blk',<0>,127:129]
2023-11-02 12:04:02:221 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,127:140].[@-1,75:77='blk',<0>,127:143]
2023-11-02 12:04:02:222 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-11-02 12:04:02:223 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,128:47]
2023-11-02 12:04:02:223 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,128:76].[@-1,34:37='line',<0>,128:79]
2023-11-02 12:04:02:223 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,128:86].[@-1,44:46='pos',<0>,128:89]
2023-11-02 12:04:02:224 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,128:95].[@-1,55:55='e',<0>,128:100]
2023-11-02 12:04:02:224 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,128:104].[@-1,65:67='blk',<0>,128:110]
2023-11-02 12:04:02:225 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,128:116].[@-1,82:93='else_if_list',<0>,128:127]
2023-11-02 12:04:02:226 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-11-02 12:04:02:227 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,129:82]
2023-11-02 12:04:02:227 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,129:111].[@-1,34:37='line',<0>,129:114]
2023-11-02 12:04:02:228 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,129:121].[@-1,44:46='pos',<0>,129:124]
2023-11-02 12:04:02:228 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,129:130].[@-1,55:55='e',<0>,129:135]
2023-11-02 12:04:02:228 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,129:139].[@-1,62:64='blk',<0>,129:142]
2023-11-02 12:04:02:229 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,129:148].[@-1,79:90='else_if_list',<0>,129:159]
2023-11-02 12:04:02:229 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,129:174].[@-1,97:99='blk',<0>,129:177]
2023-11-02 12:04:02:231 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:231 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-11-02 12:04:02:231 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-11-02 12:04:02:231 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-11-02 12:04:02:231 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-11-02 12:04:02:232 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-11-02 12:04:02:232 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-02 12:04:02:232 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-11-02 12:04:02:232 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-11-02 12:04:02:232 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-11-02 12:04:02:232 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-11-02 12:04:02:233 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-02 12:04:02:234 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-11-02 12:04:02:234 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,146:41]
2023-11-02 12:04:02:234 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,146:70].[@-1,34:37='line',<0>,146:73]
2023-11-02 12:04:02:235 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,146:80].[@-1,44:46='pos',<0>,146:83]
2023-11-02 12:04:02:235 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,146:89].[@-1,55:55='e',<0>,146:94]
2023-11-02 12:04:02:235 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,146:98].[@-1,65:67='blk',<0>,146:104]
2023-11-02 12:04:02:236 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-11-02 12:04:02:236 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,150:64]
2023-11-02 12:04:02:236 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,150:97].[@-1,42:45='line',<0>,150:104]
2023-11-02 12:04:02:236 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,150:111].[@-1,56:58='pos',<0>,150:118]
2023-11-02 12:04:02:237 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,150:124].[@-1,67:67='e',<0>,150:129]
2023-11-02 12:04:02:237 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,150:132].[@-1,79:83='cases',<0>,150:141]
2023-11-02 12:04:02:237 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,150:149].[@-1,93:95='blk',<0>,150:155]
2023-11-02 12:04:02:237 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:238 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-11-02 12:04:02:239 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-11-02 12:04:02:239 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-11-02 12:04:02:239 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-11-02 12:04:02:239 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-11-02 12:04:02:239 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-02 12:04:02:239 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-11-02 12:04:02:240 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-11-02 12:04:02:240 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-11-02 12:04:02:240 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-11-02 12:04:02:241 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-02 12:04:02:242 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-11-02 12:04:02:242 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,165:26]
2023-11-02 12:04:02:243 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,165:57].[@-1,38:41='line',<0>,165:62]
2023-11-02 12:04:02:243 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,165:69].[@-1,50:52='pos',<0>,165:74]
2023-11-02 12:04:02:243 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,165:79].[@-1,60:60='e',<0>,165:84]
2023-11-02 12:04:02:244 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,165:88].[@-1,70:72='blk',<0>,165:94]
2023-11-02 12:04:02:245 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-11-02 12:04:02:245 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,169:39]
2023-11-02 12:04:02:245 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,169:71].[@-1,40:43='line',<0>,169:77]
2023-11-02 12:04:02:246 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,169:84].[@-1,53:55='pos',<0>,169:90]
2023-11-02 12:04:02:246 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,169:96].[@-1,64:64='e',<0>,169:101]
2023-11-02 12:04:02:247 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,169:105].[@-1,74:76='blk',<0>,169:111]
2023-11-02 12:04:02:248 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-11-02 12:04:02:249 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,173:74]
2023-11-02 12:04:02:249 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,173:102].[@-1,34:37='line',<0>,173:106]
2023-11-02 12:04:02:250 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,173:113].[@-1,45:47='pos',<0>,173:117]
2023-11-02 12:04:02:250 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,173:123].[@-1,54:57='text',<0>,173:126]
2023-11-02 12:04:02:250 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,173:133].[@-1,64:64='e',<0>,173:136]
2023-11-02 12:04:02:251 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,173:139].[@-1,70:70='e',<0>,173:142]
2023-11-02 12:04:02:251 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,173:152].[@-1,86:88='blk',<0>,173:158]
2023-11-02 12:04:02:252 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-11-02 12:04:02:253 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,174:78]
2023-11-02 12:04:02:253 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,174:106].[@-1,34:37='line',<0>,174:110]
2023-11-02 12:04:02:253 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,174:117].[@-1,45:47='pos',<0>,174:121]
2023-11-02 12:04:02:254 action-translator LogManager.java:25 qattr [@-1,51:56='GUIONB',<0>,174:127].[@-1,58:61='text',<0>,174:134]
2023-11-02 12:04:02:254 action-translator LogManager.java:25 qattr [@-1,65:66='e1',<0>,174:141].[@-1,68:68='e',<0>,174:144]
2023-11-02 12:04:02:254 action-translator LogManager.java:25 qattr [@-1,71:72='e2',<0>,174:147].[@-1,74:74='e',<0>,174:150]
2023-11-02 12:04:02:255 action-translator LogManager.java:25 qattr [@-1,84:88='block',<0>,174:160].[@-1,90:92='blk',<0>,174:166]
2023-11-02 12:04:02:258 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-11-02 12:04:02:258 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,175:56]
2023-11-02 12:04:02:258 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,175:84].[@-1,34:37='line',<0>,175:88]
2023-11-02 12:04:02:259 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,175:95].[@-1,45:47='pos',<0>,175:99]
2023-11-02 12:04:02:259 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,175:105].[@-1,54:57='text',<0>,175:108]
2023-11-02 12:04:02:259 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,175:124].[@-1,74:77='text',<0>,175:128]
2023-11-02 12:04:02:259 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,175:135].[@-1,87:89='blk',<0>,175:141]
2023-11-02 12:04:02:260 action-translator LogManager.java:25 translate $guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )
2023-11-02 12:04:02:260 action-translator LogManager.java:25 attr [@-1,1:5='guard',<0>,179:43]
2023-11-02 12:04:02:260 action-translator LogManager.java:25 qattr [@-1,33:37='GUARD',<0>,179:75].[@-1,39:42='line',<0>,179:81]
2023-11-02 12:04:02:260 action-translator LogManager.java:25 qattr [@-1,46:50='GUARD',<0>,179:88].[@-1,52:54='pos',<0>,179:94]
2023-11-02 12:04:02:261 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,179:100].[@-1,63:63='e',<0>,179:105]
2023-11-02 12:04:02:261 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,179:109].[@-1,73:75='blk',<0>,179:115]
2023-11-02 12:04:02:261 action-translator LogManager.java:25 translate  $break = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-11-02 12:04:02:262 action-translator LogManager.java:25 attr [@-1,2:6='break',<0>,183:10]
2023-11-02 12:04:02:262 action-translator LogManager.java:25 qattr [@-1,33:37='BREAK',<0>,183:41].[@-1,39:42='line',<0>,183:47]
2023-11-02 12:04:02:262 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,183:54].[@-1,52:54='pos',<0>,183:60]
2023-11-02 12:04:02:263 action-translator LogManager.java:25 translate   $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)  
2023-11-02 12:04:02:263 action-translator LogManager.java:25 attr [@-1,3:5='ret',<0>,187:17]
2023-11-02 12:04:02:263 action-translator LogManager.java:25 qattr [@-1,33:38='RETURN',<0>,187:47].[@-1,40:43='line',<0>,187:54]
2023-11-02 12:04:02:263 action-translator LogManager.java:25 qattr [@-1,47:52='RETURN',<0>,187:61].[@-1,54:56='pos',<0>,187:68]
2023-11-02 12:04:02:263 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,187:74].[@-1,65:65='e',<0>,187:79]
2023-11-02 12:04:02:264 action-translator LogManager.java:25 translate  $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-11-02 12:04:02:264 action-translator LogManager.java:25 attr [@-1,2:9='continue',<0>,192:13]
2023-11-02 12:04:02:264 action-translator LogManager.java:25 qattr [@-1,39:46='CONTINUE',<0>,192:50].[@-1,48:51='line',<0>,192:59]
2023-11-02 12:04:02:264 action-translator LogManager.java:25 qattr [@-1,55:62='CONTINUE',<0>,192:66].[@-1,64:66='pos',<0>,192:75]
2023-11-02 12:04:02:265 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);
2023-11-02 12:04:02:266 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,197:30] [@-1,6:91=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)',<0>,197:35]
2023-11-02 12:04:02:266 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)
2023-11-02 12:04:02:266 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,197:59].[@-1,34:37='line',<0>,197:63]
2023-11-02 12:04:02:266 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,197:70].[@-1,45:47='pos',<0>,197:74]
2023-11-02 12:04:02:267 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,197:80].[@-1,54:57='text',<0>,197:83]
2023-11-02 12:04:02:267 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,197:90].[@-1,67:68='ty',<0>,197:96]
2023-11-02 12:04:02:267 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,197:101].[@-1,77:77='e',<0>,197:106]
2023-11-02 12:04:02:268 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);
2023-11-02 12:04:02:269 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,198:19] [@-1,6:98=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)',<0>,198:24]
2023-11-02 12:04:02:269 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-11-02 12:04:02:269 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,198:48].[@-1,34:37='line',<0>,198:52]
2023-11-02 12:04:02:269 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,198:59].[@-1,45:47='pos',<0>,198:63]
2023-11-02 12:04:02:270 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,198:69].[@-1,54:57='text',<0>,198:72]
2023-11-02 12:04:02:270 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,198:97].[@-1,84:84='e',<0>,198:102]
2023-11-02 12:04:02:270 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);
2023-11-02 12:04:02:271 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,199:19] [@-1,6:97=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)',<0>,199:24]
2023-11-02 12:04:02:271 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-11-02 12:04:02:271 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,199:48].[@-1,34:37='line',<0>,199:52]
2023-11-02 12:04:02:271 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,199:59].[@-1,45:47='pos',<0>,199:63]
2023-11-02 12:04:02:271 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,199:69].[@-1,54:57='text',<0>,199:72]
2023-11-02 12:04:02:272 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,199:97].[@-1,84:84='e',<0>,199:102]
2023-11-02 12:04:02:272 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);
2023-11-02 12:04:02:273 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,200:30] [@-1,6:90=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)',<0>,200:35]
2023-11-02 12:04:02:273 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)
2023-11-02 12:04:02:273 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,200:59].[@-1,34:37='line',<0>,200:63]
2023-11-02 12:04:02:274 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,200:70].[@-1,45:47='pos',<0>,200:74]
2023-11-02 12:04:02:274 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,200:80].[@-1,54:57='text',<0>,200:83]
2023-11-02 12:04:02:274 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,200:90].[@-1,67:68='ty',<0>,200:96]
2023-11-02 12:04:02:275 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,200:101].[@-1,77:77='e',<0>,200:106]
2023-11-02 12:04:02:275 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-11-02 12:04:02:276 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,204:8]
2023-11-02 12:04:02:276 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-11-02 12:04:02:276 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,205:10]
2023-11-02 12:04:02:277 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-11-02 12:04:02:277 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,206:8]
2023-11-02 12:04:02:277 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-11-02 12:04:02:278 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,207:9]
2023-11-02 12:04:02:278 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-11-02 12:04:02:278 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,208:18]
2023-11-02 12:04:02:281 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:281 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) 
2023-11-02 12:04:02:281 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-11-02 12:04:02:282 action-translator LogManager.java:25 attr [@-1,32:33='op',<0>,2:100]
2023-11-02 12:04:02:282 action-translator LogManager.java:25 attr [@-1,47:48='op',<0>,2:115]
2023-11-02 12:04:02:283 action-translator LogManager.java:25 qattr [@-1,64:68='right',<0>,2:132].[@-1,70:70='e',<0>,2:138]
2023-11-02 12:04:02:283 action-translator LogManager.java:25 qattr [@-1,81:85='right',<0>,2:149].[@-1,87:87='e',<0>,2:155]
2023-11-02 12:04:02:283 action-translator LogManager.java:25 translate  $e = $callFunction.cf 
2023-11-02 12:04:02:284 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:42]
2023-11-02 12:04:02:284 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,3:47].[@-1,20:21='cf',<0>,3:60]
2023-11-02 12:04:02:285 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-11-02 12:04:02:285 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:115]
2023-11-02 12:04:02:285 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,4:145].[@-1,35:38='line',<0>,4:148]
2023-11-02 12:04:02:286 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,4:155].[@-1,45:47='pos',<0>,4:158]
2023-11-02 12:04:02:286 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,4:164].[@-1,54:57='text',<0>,4:167]
2023-11-02 12:04:02:287 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,4:174].[@-1,75:75='l',<0>,4:188]
2023-11-02 12:04:02:287 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-11-02 12:04:02:287 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:82]
2023-11-02 12:04:02:287 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,5:87].[@-1,12:12='e',<0>,5:92]
2023-11-02 12:04:02:288 action-translator LogManager.java:25 translate  $e = $list.p
2023-11-02 12:04:02:288 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:44]
2023-11-02 12:04:02:288 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,6:49].[@-1,12:12='p',<0>,6:54]
2023-11-02 12:04:02:289 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-11-02 12:04:02:289 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:88]
2023-11-02 12:04:02:289 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,7:114].[@-1,35:38='line',<0>,7:121]
2023-11-02 12:04:02:290 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,7:128].[@-1,49:51='pos',<0>,7:135]
2023-11-02 12:04:02:291 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,7:141].[@-1,66:66='l',<0>,7:152]
2023-11-02 12:04:02:291 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) 
2023-11-02 12:04:02:291 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:103]
2023-11-02 12:04:02:291 action-translator LogManager.java:25 attr [@-1,33:35='INT',<0>,8:134]
2023-11-02 12:04:02:292 action-translator LogManager.java:25 attr [@-1,48:50='INT',<0>,8:149]
2023-11-02 12:04:02:292 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,8:166].[@-1,70:70='e',<0>,8:171]
2023-11-02 12:04:02:292 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,8:197].[@-1,101:104='text',<0>,8:202]
2023-11-02 12:04:02:292 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) 
2023-11-02 12:04:02:294 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:103]
2023-11-02 12:04:02:294 action-translator LogManager.java:25 attr [@-1,33:35='STR',<0>,9:134]
2023-11-02 12:04:02:294 action-translator LogManager.java:25 attr [@-1,48:50='STR',<0>,9:149]
2023-11-02 12:04:02:294 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,9:166].[@-1,70:70='e',<0>,9:171]
2023-11-02 12:04:02:294 action-translator LogManager.java:25 qattr [@-1,94:97='expr',<0>,9:195].[@-1,99:102='text',<0>,9:200]
2023-11-02 12:04:02:295 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) 
2023-11-02 12:04:02:295 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,10:105]
2023-11-02 12:04:02:295 action-translator LogManager.java:25 attr [@-1,33:37='FLOAT',<0>,10:136]
2023-11-02 12:04:02:295 action-translator LogManager.java:25 attr [@-1,50:54='FLOAT',<0>,10:153]
2023-11-02 12:04:02:295 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,10:172].[@-1,74:74='e',<0>,10:177]
2023-11-02 12:04:02:295 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,10:200].[@-1,102:105='text',<0>,10:205]
2023-11-02 12:04:02:295 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-11-02 12:04:02:295 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,13:30].[@-1,39:42='text',<0>,13:37]
2023-11-02 12:04:02:295 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,14:43].[@-1,102:105='text',<0>,14:50]
2023-11-02 12:04:02:296 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,18:13]
2023-11-02 12:04:02:296 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,18:43].[@-1,240:243='line',<0>,18:50]
2023-11-02 12:04:02:296 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,18:56].[@-1,253:255='pos',<0>,18:63]
2023-11-02 12:04:02:296 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,20:37].[@-1,341:344='text',<0>,20:44]
2023-11-02 12:04:02:296 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,24:13]
2023-11-02 12:04:02:296 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,24:43].[@-1,474:477='line',<0>,24:50]
2023-11-02 12:04:02:296 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,24:56].[@-1,487:489='pos',<0>,24:63]
2023-11-02 12:04:02:297 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-11-02 12:04:02:297 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,29:16].[@-1,25:28='text',<0>,29:23]
2023-11-02 12:04:02:297 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,30:9]
2023-11-02 12:04:02:297 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,30:39].[@-1,77:80='line',<0>,30:46]
2023-11-02 12:04:02:297 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,30:53].[@-1,91:93='pos',<0>,30:60]
2023-11-02 12:04:02:298 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-11-02 12:04:02:298 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:33]
2023-11-02 12:04:02:298 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,32:63].[@-1,36:39='line',<0>,32:67]
2023-11-02 12:04:02:298 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,32:74].[@-1,47:49='pos',<0>,32:78]
2023-11-02 12:04:02:299 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-11-02 12:04:02:299 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:33]
2023-11-02 12:04:02:299 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,33:63].[@-1,36:39='line',<0>,33:67]
2023-11-02 12:04:02:299 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,33:74].[@-1,47:49='pos',<0>,33:78]
2023-11-02 12:04:02:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-11-02 12:04:02:300 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-11-02 12:04:02:300 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:162]
2023-11-02 12:04:02:300 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:192].[@-1,37:41='start',<0>,36:197]
2023-11-02 12:04:02:300 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:215].[@-1,60:64='start',<0>,36:220]
2023-11-02 12:04:02:300 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:240].[@-1,85:85='e',<0>,36:245]
2023-11-02 12:04:02:300 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:249].[@-1,92:95='text',<0>,36:252]
2023-11-02 12:04:02:300 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:259].[@-1,105:105='e',<0>,36:265]
2023-11-02 12:04:02:300 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-11-02 12:04:02:300 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-11-02 12:04:02:300 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:149]
2023-11-02 12:04:02:300 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:179].[@-1,37:41='start',<0>,37:184]
2023-11-02 12:04:02:301 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:202].[@-1,60:64='start',<0>,37:207]
2023-11-02 12:04:02:301 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:227].[@-1,85:85='e',<0>,37:232]
2023-11-02 12:04:02:301 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:236].[@-1,92:95='text',<0>,37:239]
2023-11-02 12:04:02:301 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:246].[@-1,105:105='e',<0>,37:252]
2023-11-02 12:04:02:301 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-11-02 12:04:02:302 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-11-02 12:04:02:302 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:154]
2023-11-02 12:04:02:302 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:184].[@-1,37:41='start',<0>,38:189]
2023-11-02 12:04:02:302 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:207].[@-1,60:64='start',<0>,38:212]
2023-11-02 12:04:02:302 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:232].[@-1,85:85='e',<0>,38:237]
2023-11-02 12:04:02:302 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:241].[@-1,92:95='text',<0>,38:244]
2023-11-02 12:04:02:303 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:251].[@-1,105:105='e',<0>,38:257]
2023-11-02 12:04:02:303 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-11-02 12:04:02:303 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-11-02 12:04:02:304 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:154]
2023-11-02 12:04:02:304 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:184].[@-1,37:41='start',<0>,39:189]
2023-11-02 12:04:02:304 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:207].[@-1,60:64='start',<0>,39:212]
2023-11-02 12:04:02:304 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:232].[@-1,85:85='e',<0>,39:237]
2023-11-02 12:04:02:304 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:241].[@-1,92:95='text',<0>,39:244]
2023-11-02 12:04:02:304 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:251].[@-1,105:105='e',<0>,39:257]
2023-11-02 12:04:02:305 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-11-02 12:04:02:306 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-11-02 12:04:02:306 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:154]
2023-11-02 12:04:02:306 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:184].[@-1,37:41='start',<0>,40:189]
2023-11-02 12:04:02:306 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:207].[@-1,60:64='start',<0>,40:212]
2023-11-02 12:04:02:307 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:232].[@-1,85:85='e',<0>,40:237]
2023-11-02 12:04:02:307 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:241].[@-1,92:95='text',<0>,40:244]
2023-11-02 12:04:02:308 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:251].[@-1,105:105='e',<0>,40:257]
2023-11-02 12:04:02:308 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-11-02 12:04:02:308 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-11-02 12:04:02:309 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:129]
2023-11-02 12:04:02:309 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:159].[@-1,37:41='start',<0>,41:164]
2023-11-02 12:04:02:309 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:182].[@-1,60:64='start',<0>,41:187]
2023-11-02 12:04:02:309 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:207].[@-1,85:85='e',<0>,41:212]
2023-11-02 12:04:02:309 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:216].[@-1,92:95='text',<0>,41:219]
2023-11-02 12:04:02:309 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:226].[@-1,105:105='e',<0>,41:232]
2023-11-02 12:04:02:309 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-11-02 12:04:02:310 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-11-02 12:04:02:310 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:128]
2023-11-02 12:04:02:310 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:158].[@-1,37:41='start',<0>,42:163]
2023-11-02 12:04:02:311 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:181].[@-1,60:64='start',<0>,42:186]
2023-11-02 12:04:02:311 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:206].[@-1,85:85='e',<0>,42:211]
2023-11-02 12:04:02:311 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:215].[@-1,92:95='text',<0>,42:218]
2023-11-02 12:04:02:311 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:225].[@-1,105:105='e',<0>,42:231]
2023-11-02 12:04:02:311 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-11-02 12:04:02:312 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-11-02 12:04:02:312 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-11-02 12:04:02:312 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-11-02 12:04:02:312 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-11-02 12:04:02:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-11-02 12:04:02:313 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-11-02 12:04:02:314 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:314 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-11-02 12:04:02:314 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-11-02 12:04:02:314 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-11-02 12:04:02:314 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-11-02 12:04:02:315 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-11-02 12:04:02:315 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-02 12:04:02:316 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-11-02 12:04:02:316 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-11-02 12:04:02:316 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-11-02 12:04:02:317 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-11-02 12:04:02:317 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-02 12:04:02:318 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:318 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-11-02 12:04:02:318 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-11-02 12:04:02:319 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-11-02 12:04:02:319 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-11-02 12:04:02:319 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-11-02 12:04:02:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:321 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-11-02 12:04:02:321 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:130]
2023-11-02 12:04:02:322 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:162].[@-1,39:43='start',<0>,5:167]
2023-11-02 12:04:02:322 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:185].[@-1,62:66='start',<0>,5:190]
2023-11-02 12:04:02:322 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:210].[@-1,87:87='p',<0>,5:215]
2023-11-02 12:04:02:323 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:219].[@-1,96:96='e',<0>,5:224]
2023-11-02 12:04:02:323 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-02 12:04:02:323 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-11-02 12:04:02:323 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-11-02 12:04:02:324 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-11-02 12:04:02:324 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-11-02 12:04:02:324 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-11-02 12:04:02:325 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-11-02 12:04:02:325 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:325 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-02 12:04:02:326 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-11-02 12:04:02:326 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,272:36]
2023-11-02 12:04:02:327 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,272:65].[@-1,34:37='line',<0>,272:68]
2023-11-02 12:04:02:327 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,272:75].[@-1,44:46='pos',<0>,272:78]
2023-11-02 12:04:02:327 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,272:84].[@-1,53:56='text',<0>,272:87]
2023-11-02 12:04:02:327 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,272:94].[@-1,75:75='l',<0>,272:109]
2023-11-02 12:04:02:328 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:328 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-11-02 12:04:02:329 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-11-02 12:04:02:329 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-11-02 12:04:02:329 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-11-02 12:04:02:329 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-11-02 12:04:02:330 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-11-02 12:04:02:330 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-11-02 12:04:02:330 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:330 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-11-02 12:04:02:330 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-11-02 12:04:02:330 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-11-02 12:04:02:330 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-11-02 12:04:02:331 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:332 action-translator LogManager.java:25 translate 
2023-11-02 12:04:02:332 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-11-02 12:04:02:332 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-11-02 12:04:02:332 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-11-02 12:04:02:332 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-11-02 12:04:02:333 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-11-02 12:04:02:333 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-11-02 12:04:02:333 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:333 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-11-02 12:04:02:334 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-11-02 12:04:02:334 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-11-02 12:04:02:334 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-11-02 12:04:02:334 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-11-02 12:04:02:334 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-02 12:04:02:534 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-11-02 12:04:02:534 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-11-02 12:04:02:604 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-11-02 12:04:02:604 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

