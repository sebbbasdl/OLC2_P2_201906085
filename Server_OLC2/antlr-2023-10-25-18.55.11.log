2023-10-25 18:55:10:586 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-25 18:55:10:607 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-25 18:55:11:005 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ;}) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ;}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-25 18:55:11:014 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ;}) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ;}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-25 18:55:11:017 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ;}) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ;}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-25 18:55:11:017 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-10-25 18:55:11:041 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=162> ID<tokenIndex=164> D_PTS<tokenIndex=166> types<tokenIndex=168> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=148> VAR<tokenIndex=150> ID<tokenIndex=152> D_PTS<tokenIndex=154> types<tokenIndex=156> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-10-25 18:55:11:051 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 162))) (ID (ELEMENT_OPTIONS (= tokenIndex 164))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 166))) (types (ELEMENT_OPTIONS (= tokenIndex 168))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 148))) (VAR (ELEMENT_OPTIONS (= tokenIndex 150))) (ID (ELEMENT_OPTIONS (= tokenIndex 152))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 154))) (types (ELEMENT_OPTIONS (= tokenIndex 156))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-10-25 18:55:11:052 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lpf]
    :   ( {} ID<tokenIndex=253> D_PTS<tokenIndex=255> types<tokenIndex=257> {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | { $lpf = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=241> ID<tokenIndex=243> D_PTS<tokenIndex=245> types<tokenIndex=247> {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
        )*
    ;
2023-10-25 18:55:11:055 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 253))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 255))) (types (ELEMENT_OPTIONS (= tokenIndex 257))) {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 241))) (ID (ELEMENT_OPTIONS (= tokenIndex 243))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 245))) (types (ELEMENT_OPTIONS (= tokenIndex 247))) {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }))))))
2023-10-25 18:55:11:055 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=414>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=408> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-10-25 18:55:11:056 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 414))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 408))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-10-25 18:55:11:060 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} callFunction<tokenIndex=831> { $e = $callFunction.cf } 
        | ID<tokenIndex=837> LLAVEIZQ<tokenIndex=839> listStructExp<tokenIndex=841> LLAVEDER<tokenIndex=843> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | PARIZQ<tokenIndex=849> expr<tokenIndex=851> PARDER<tokenIndex=853> { $e = $expr.e } 
        | list=listArray<tokenIndex=861> { $e = $list.p} 
        | CORIZQ<tokenIndex=867> listParams<tokenIndex=869> CORDER<tokenIndex=871> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=877>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=883>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=889> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=895> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MUL<tokenIndex=706>|DIV<tokenIndex=708>) right=expr<tokenIndex=713,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(ADD<tokenIndex=726>|SUB<tokenIndex=728>) right=expr<tokenIndex=733,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MAY_IG<tokenIndex=746>|MAYOR<tokenIndex=748>) right=expr<tokenIndex=753,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MEN_IG<tokenIndex=766>|MENOR<tokenIndex=768>) right=expr<tokenIndex=773,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(IG_IG<tokenIndex=786>|DIF<tokenIndex=788>) right=expr<tokenIndex=793,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=AND<tokenIndex=805> right=expr<tokenIndex=809,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=OR<tokenIndex=821> right=expr<tokenIndex=825,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-25 18:55:11:067 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (callFunction (ELEMENT_OPTIONS (= tokenIndex 831))) { $e = $callFunction.cf }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 837))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 839))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 841))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 843))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 849))) (expr (ELEMENT_OPTIONS (= tokenIndex 851))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 853))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 861)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 867))) (listParams (ELEMENT_OPTIONS (= tokenIndex 869))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 871))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 877))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 883))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 889))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 895))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 706))) (DIV (ELEMENT_OPTIONS (= tokenIndex 708))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 713) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 726))) (SUB (ELEMENT_OPTIONS (= tokenIndex 728))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 733) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 746))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 748))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 753) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 766))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 768))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 773) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 786))) (DIF (ELEMENT_OPTIONS (= tokenIndex 788))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 793) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 805)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 809) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 821)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 825) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-25 18:55:11:068 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=920> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=912> expr<tokenIndex=914> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-25 18:55:11:070 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 920))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 912))) (expr (ELEMENT_OPTIONS (= tokenIndex 914))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-25 18:55:11:070 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=963> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=939> expr<tokenIndex=941> CORDER<tokenIndex=943> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=955> ID<tokenIndex=957> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2023-10-25 18:55:11:073 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 963))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 939))) (expr (ELEMENT_OPTIONS (= tokenIndex 941))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 943))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 955))) (ID (ELEMENT_OPTIONS (= tokenIndex 957))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2023-10-25 18:55:11:073 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1007>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=999> expr<tokenIndex=1001> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-10-25 18:55:11:075 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1007))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 999))) (expr (ELEMENT_OPTIONS (= tokenIndex 1001))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-10-25 18:55:11:075 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1040> D_PTS<tokenIndex=1042> expr<tokenIndex=1044>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1028> ID<tokenIndex=1030> D_PTS<tokenIndex=1032> expr<tokenIndex=1034> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-10-25 18:55:11:078 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1040))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1042))) (expr (ELEMENT_OPTIONS (= tokenIndex 1044))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1028))) (ID (ELEMENT_OPTIONS (= tokenIndex 1030))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1032))) (expr (ELEMENT_OPTIONS (= tokenIndex 1034))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-10-25 18:55:11:088 grammar LogManager.java:25 import INT=1
2023-10-25 18:55:11:088 grammar LogManager.java:25 import FLOAT=2
2023-10-25 18:55:11:089 grammar LogManager.java:25 import BOOL=3
2023-10-25 18:55:11:089 grammar LogManager.java:25 import STR=4
2023-10-25 18:55:11:089 grammar LogManager.java:25 import TRU=5
2023-10-25 18:55:11:089 grammar LogManager.java:25 import FAL=6
2023-10-25 18:55:11:089 grammar LogManager.java:25 import PRINT=7
2023-10-25 18:55:11:090 grammar LogManager.java:25 import IF=8
2023-10-25 18:55:11:090 grammar LogManager.java:25 import ELSE=9
2023-10-25 18:55:11:090 grammar LogManager.java:25 import WHILE=10
2023-10-25 18:55:11:090 grammar LogManager.java:25 import FOR=11
2023-10-25 18:55:11:090 grammar LogManager.java:25 import SWITCH=12
2023-10-25 18:55:11:091 grammar LogManager.java:25 import CASE=13
2023-10-25 18:55:11:091 grammar LogManager.java:25 import DEFAULT=14
2023-10-25 18:55:11:091 grammar LogManager.java:25 import IN=15
2023-10-25 18:55:11:091 grammar LogManager.java:25 import VAR=16
2023-10-25 18:55:11:091 grammar LogManager.java:25 import LET=17
2023-10-25 18:55:11:092 grammar LogManager.java:25 import BREAK=18
2023-10-25 18:55:11:092 grammar LogManager.java:25 import CONTINUE=19
2023-10-25 18:55:11:092 grammar LogManager.java:25 import RETURN=20
2023-10-25 18:55:11:092 grammar LogManager.java:25 import GUARD=21
2023-10-25 18:55:11:092 grammar LogManager.java:25 import APPEND=22
2023-10-25 18:55:11:093 grammar LogManager.java:25 import REMOVELAST=23
2023-10-25 18:55:11:093 grammar LogManager.java:25 import REMOVE=24
2023-10-25 18:55:11:093 grammar LogManager.java:25 import COUNT=25
2023-10-25 18:55:11:093 grammar LogManager.java:25 import ISEMPTY=26
2023-10-25 18:55:11:093 grammar LogManager.java:25 import AT=27
2023-10-25 18:55:11:094 grammar LogManager.java:25 import FUNC=28
2023-10-25 18:55:11:094 grammar LogManager.java:25 import STRUCT=29
2023-10-25 18:55:11:094 grammar LogManager.java:25 import NUMBER=30
2023-10-25 18:55:11:094 grammar LogManager.java:25 import STRING=31
2023-10-25 18:55:11:095 grammar LogManager.java:25 import ID=32
2023-10-25 18:55:11:095 grammar LogManager.java:25 import DIF=33
2023-10-25 18:55:11:095 grammar LogManager.java:25 import IG_IG=34
2023-10-25 18:55:11:095 grammar LogManager.java:25 import NOT=35
2023-10-25 18:55:11:096 grammar LogManager.java:25 import OR=36
2023-10-25 18:55:11:096 grammar LogManager.java:25 import AND=37
2023-10-25 18:55:11:096 grammar LogManager.java:25 import IG=38
2023-10-25 18:55:11:096 grammar LogManager.java:25 import MAY_IG=39
2023-10-25 18:55:11:097 grammar LogManager.java:25 import MEN_IG=40
2023-10-25 18:55:11:097 grammar LogManager.java:25 import MAYOR=41
2023-10-25 18:55:11:097 grammar LogManager.java:25 import MENOR=42
2023-10-25 18:55:11:097 grammar LogManager.java:25 import MUL=43
2023-10-25 18:55:11:097 grammar LogManager.java:25 import DIV=44
2023-10-25 18:55:11:098 grammar LogManager.java:25 import ADD=45
2023-10-25 18:55:11:098 grammar LogManager.java:25 import SUB=46
2023-10-25 18:55:11:098 grammar LogManager.java:25 import PARIZQ=47
2023-10-25 18:55:11:098 grammar LogManager.java:25 import PARDER=48
2023-10-25 18:55:11:099 grammar LogManager.java:25 import LLAVEIZQ=49
2023-10-25 18:55:11:099 grammar LogManager.java:25 import LLAVEDER=50
2023-10-25 18:55:11:099 grammar LogManager.java:25 import D_PTS=51
2023-10-25 18:55:11:099 grammar LogManager.java:25 import CORIZQ=52
2023-10-25 18:55:11:099 grammar LogManager.java:25 import CORDER=53
2023-10-25 18:55:11:099 grammar LogManager.java:25 import COMA=54
2023-10-25 18:55:11:100 grammar LogManager.java:25 import ARROW1=55
2023-10-25 18:55:11:100 grammar LogManager.java:25 import PUNTO=56
2023-10-25 18:55:11:100 grammar LogManager.java:25 import MODULO=57
2023-10-25 18:55:11:100 grammar LogManager.java:25 import GUIONB=58
2023-10-25 18:55:11:100 grammar LogManager.java:25 import WHITESPACE=59
2023-10-25 18:55:11:101 grammar LogManager.java:25 import COMMENT=60
2023-10-25 18:55:11:101 grammar LogManager.java:25 import LINE_COMMENT=61
2023-10-25 18:55:11:101 grammar LogManager.java:25 import 'Int'=1
2023-10-25 18:55:11:101 grammar LogManager.java:25 import 'Float'=2
2023-10-25 18:55:11:101 grammar LogManager.java:25 import 'Bool'=3
2023-10-25 18:55:11:101 grammar LogManager.java:25 import 'String'=4
2023-10-25 18:55:11:103 grammar LogManager.java:25 import 'true'=5
2023-10-25 18:55:11:103 grammar LogManager.java:25 import 'false'=6
2023-10-25 18:55:11:103 grammar LogManager.java:25 import 'print'=7
2023-10-25 18:55:11:103 grammar LogManager.java:25 import 'if'=8
2023-10-25 18:55:11:103 grammar LogManager.java:25 import 'else'=9
2023-10-25 18:55:11:104 grammar LogManager.java:25 import 'while'=10
2023-10-25 18:55:11:104 grammar LogManager.java:25 import 'for'=11
2023-10-25 18:55:11:104 grammar LogManager.java:25 import 'switch'=12
2023-10-25 18:55:11:104 grammar LogManager.java:25 import 'case'=13
2023-10-25 18:55:11:105 grammar LogManager.java:25 import 'default'=14
2023-10-25 18:55:11:105 grammar LogManager.java:25 import 'in'=15
2023-10-25 18:55:11:105 grammar LogManager.java:25 import 'var'=16
2023-10-25 18:55:11:105 grammar LogManager.java:25 import 'let'=17
2023-10-25 18:55:11:105 grammar LogManager.java:25 import 'break'=18
2023-10-25 18:55:11:106 grammar LogManager.java:25 import 'continue'=19
2023-10-25 18:55:11:106 grammar LogManager.java:25 import 'return'=20
2023-10-25 18:55:11:106 grammar LogManager.java:25 import 'guard'=21
2023-10-25 18:55:11:106 grammar LogManager.java:25 import 'append'=22
2023-10-25 18:55:11:107 grammar LogManager.java:25 import 'removeLast'=23
2023-10-25 18:55:11:107 grammar LogManager.java:25 import 'remove'=24
2023-10-25 18:55:11:107 grammar LogManager.java:25 import 'count'=25
2023-10-25 18:55:11:108 grammar LogManager.java:25 import 'isEmpty'=26
2023-10-25 18:55:11:108 grammar LogManager.java:25 import 'at'=27
2023-10-25 18:55:11:108 grammar LogManager.java:25 import 'func'=28
2023-10-25 18:55:11:108 grammar LogManager.java:25 import 'struct'=29
2023-10-25 18:55:11:108 grammar LogManager.java:25 import '!='=33
2023-10-25 18:55:11:109 grammar LogManager.java:25 import '=='=34
2023-10-25 18:55:11:109 grammar LogManager.java:25 import '!'=35
2023-10-25 18:55:11:109 grammar LogManager.java:25 import '||'=36
2023-10-25 18:55:11:109 grammar LogManager.java:25 import '&&'=37
2023-10-25 18:55:11:110 grammar LogManager.java:25 import '='=38
2023-10-25 18:55:11:110 grammar LogManager.java:25 import '>='=39
2023-10-25 18:55:11:110 grammar LogManager.java:25 import '<='=40
2023-10-25 18:55:11:110 grammar LogManager.java:25 import '>'=41
2023-10-25 18:55:11:111 grammar LogManager.java:25 import '<'=42
2023-10-25 18:55:11:111 grammar LogManager.java:25 import '*'=43
2023-10-25 18:55:11:111 grammar LogManager.java:25 import '/'=44
2023-10-25 18:55:11:111 grammar LogManager.java:25 import '+'=45
2023-10-25 18:55:11:111 grammar LogManager.java:25 import '-'=46
2023-10-25 18:55:11:112 grammar LogManager.java:25 import '('=47
2023-10-25 18:55:11:112 grammar LogManager.java:25 import ')'=48
2023-10-25 18:55:11:112 grammar LogManager.java:25 import '{'=49
2023-10-25 18:55:11:112 grammar LogManager.java:25 import '}'=50
2023-10-25 18:55:11:112 grammar LogManager.java:25 import ':'=51
2023-10-25 18:55:11:113 grammar LogManager.java:25 import '['=52
2023-10-25 18:55:11:113 grammar LogManager.java:25 import ']'=53
2023-10-25 18:55:11:113 grammar LogManager.java:25 import ','=54
2023-10-25 18:55:11:113 grammar LogManager.java:25 import '->'=55
2023-10-25 18:55:11:113 grammar LogManager.java:25 import '.'=56
2023-10-25 18:55:11:113 grammar LogManager.java:25 import '%'=57
2023-10-25 18:55:11:114 grammar LogManager.java:25 import '_'=58
2023-10-25 18:55:11:114 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-10-25 18:55:11:115 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61}
2023-10-25 18:55:11:116 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-10-25 18:55:11:151 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-25 18:55:11:152 LL1 LogManager.java:25 look=[{7..8, 10..11, 16..17, 28..29, 32}, {<EOF>, 50}]
2023-10-25 18:55:11:152 LL1 LogManager.java:25 LL(1)? true
2023-10-25 18:55:11:152 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-25 18:55:11:153 LL1 LogManager.java:25 look=[7, 8, {16..17}, 32, 28, 29, 10, 11]
2023-10-25 18:55:11:153 LL1 LogManager.java:25 LL(1)? true
2023-10-25 18:55:11:153 LL1 LogManager.java:25 
DECISION 2 in rule listStructDec
2023-10-25 18:55:11:153 LL1 LogManager.java:25 look=[16, null]
2023-10-25 18:55:11:153 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:153 LL1 LogManager.java:25 
DECISION 3 in rule listStructDec
2023-10-25 18:55:11:153 LL1 LogManager.java:25 look=[null, 50]
2023-10-25 18:55:11:153 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:153 LL1 LogManager.java:25 
DECISION 4 in rule function
2023-10-25 18:55:11:153 LL1 LogManager.java:25 look=[28, 28]
2023-10-25 18:55:11:153 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:153 LL1 LogManager.java:25 
DECISION 5 in rule listParamsFunc
2023-10-25 18:55:11:153 LL1 LogManager.java:25 look=[32, null]
2023-10-25 18:55:11:153 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:153 LL1 LogManager.java:25 
DECISION 6 in rule listParamsFunc
2023-10-25 18:55:11:153 LL1 LogManager.java:25 look=[null, 48]
2023-10-25 18:55:11:153 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:153 LL1 LogManager.java:25 
DECISION 7 in rule ifstmt
2023-10-25 18:55:11:153 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-10-25 18:55:11:153 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:153 LL1 LogManager.java:25 
DECISION 8 in rule elseiflist
2023-10-25 18:55:11:154 LL1 LogManager.java:25 look=[null, {<EOF>, 7..11, 16..17, 28..29, 32, 50}]
2023-10-25 18:55:11:154 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:154 LL1 LogManager.java:25 
DECISION 9 in rule forstmt
2023-10-25 18:55:11:154 LL1 LogManager.java:25 look=[11, 11, 11]
2023-10-25 18:55:11:154 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:154 LL1 LogManager.java:25 
DECISION 10 in rule declarationstmt
2023-10-25 18:55:11:154 LL1 LogManager.java:25 look=[16, 16, 17, 17, 16, 17]
2023-10-25 18:55:11:154 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:154 LL1 LogManager.java:25 
DECISION 11 in rule types
2023-10-25 18:55:11:154 LL1 LogManager.java:25 look=[1, 2, 4, 3, 52]
2023-10-25 18:55:11:154 LL1 LogManager.java:25 LL(1)? true
2023-10-25 18:55:11:154 LL1 LogManager.java:25 
DECISION 12 in rule expr
2023-10-25 18:55:11:154 LL1 LogManager.java:25 look=[32, 32, 47, 32, 52, 30, 31, 5, 6]
2023-10-25 18:55:11:154 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:154 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-10-25 18:55:11:154 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-10-25 18:55:11:154 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:154 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-10-25 18:55:11:155 LL1 LogManager.java:25 look=[null, null]
2023-10-25 18:55:11:155 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:155 LL1 LogManager.java:25 
DECISION 15 in rule listParams
2023-10-25 18:55:11:156 LL1 LogManager.java:25 look=[null, 53]
2023-10-25 18:55:11:156 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:156 LL1 LogManager.java:25 
DECISION 16 in rule listArray
2023-10-25 18:55:11:156 LL1 LogManager.java:25 look=[null, null]
2023-10-25 18:55:11:156 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:156 LL1 LogManager.java:25 
DECISION 17 in rule listArray
2023-10-25 18:55:11:156 LL1 LogManager.java:25 look=[null, null]
2023-10-25 18:55:11:157 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:157 LL1 LogManager.java:25 
DECISION 18 in rule listParamsCall
2023-10-25 18:55:11:157 LL1 LogManager.java:25 look=[{5..6, 30..32, 47, 52}, null]
2023-10-25 18:55:11:157 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:157 LL1 LogManager.java:25 
DECISION 19 in rule listParamsCall
2023-10-25 18:55:11:157 LL1 LogManager.java:25 look=[null, 48]
2023-10-25 18:55:11:157 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:157 LL1 LogManager.java:25 
DECISION 20 in rule listStructExp
2023-10-25 18:55:11:157 LL1 LogManager.java:25 look=[32, null]
2023-10-25 18:55:11:157 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:157 LL1 LogManager.java:25 
DECISION 21 in rule listStructExp
2023-10-25 18:55:11:157 LL1 LogManager.java:25 look=[null, 50]
2023-10-25 18:55:11:157 LL1 LogManager.java:25 LL(1)? false
2023-10-25 18:55:11:165 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-25 18:55:11:180 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-25 18:55:11:181 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-10-25 18:55:11:182 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-10-25 18:55:11:184 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-25 18:55:11:184 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-10-25 18:55:11:187 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-25 18:55:11:187 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-10-25 18:55:11:187 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-10-25 18:55:11:188 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-25 18:55:11:189 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-10-25 18:55:11:189 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-10-25 18:55:11:189 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-10-25 18:55:11:190 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-10-25 18:55:11:190 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-10-25 18:55:11:190 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-10-25 18:55:11:190 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-10-25 18:55:11:191 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-10-25 18:55:11:191 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2023-10-25 18:55:11:191 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-10-25 18:55:11:191 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,42:23].[@-1,21:23='ass',<0>,42:34]
2023-10-25 18:55:11:192 action-translator LogManager.java:25 translate  $inst = $function.fun 
2023-10-25 18:55:11:192 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:13]
2023-10-25 18:55:11:192 action-translator LogManager.java:25 qattr [@-1,10:17='function',<0>,43:21].[@-1,19:21='fun',<0>,43:30]
2023-10-25 18:55:11:192 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-10-25 18:55:11:193 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:19]
2023-10-25 18:55:11:193 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,44:27].[@-1,25:27='dec',<0>,44:42]
2023-10-25 18:55:11:193 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-10-25 18:55:11:193 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-10-25 18:55:11:193 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,45:22].[@-1,20:25='whiles',<0>,45:32]
2023-10-25 18:55:11:193 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-10-25 18:55:11:193 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:12]
2023-10-25 18:55:11:194 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,46:20].[@-1,18:21='fors',<0>,46:28]
2023-10-25 18:55:11:196 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-10-25 18:55:11:196 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,50:46]
2023-10-25 18:55:11:196 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,50:76].[@-1,39:42='line',<0>,50:83]
2023-10-25 18:55:11:198 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,50:90].[@-1,53:55='pos',<0>,50:97]
2023-10-25 18:55:11:198 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,50:103].[@-1,62:65='text',<0>,50:106]
2023-10-25 18:55:11:198 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,50:113].[@-1,83:83='l',<0>,50:127]
2023-10-25 18:55:11:200 action-translator LogManager.java:25 translate 
2023-10-25 18:55:11:200 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-10-25 18:55:11:201 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-10-25 18:55:11:201 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-10-25 18:55:11:201 action-translator LogManager.java:25 attr [@-1,213:213='l',<0>,6:25]
2023-10-25 18:55:11:201 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-10-25 18:55:11:201 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-10-25 18:55:11:202 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:203 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-10-25 18:55:11:203 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,13:98].[@-1,184:187='text',<0>,13:101]
2023-10-25 18:55:11:203 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,13:108].[@-1,197:198='ty',<0>,13:114]
2023-10-25 18:55:11:203 action-translator LogManager.java:25 qattr [@-1,274:277='list',<0>,14:72].[@-1,279:279='l',<0>,14:77]
2023-10-25 18:55:11:203 action-translator LogManager.java:25 attr [@-1,353:353='l',<0>,15:59]
2023-10-25 18:55:11:205 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:207 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)

2023-10-25 18:55:11:207 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,72:5]
2023-10-25 18:55:11:208 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,72:37].[@-1,43:46='line',<0>,72:42]
2023-10-25 18:55:11:208 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,72:49].[@-1,55:57='pos',<0>,72:54]
2023-10-25 18:55:11:209 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,72:60].[@-1,64:67='text',<0>,72:63]
2023-10-25 18:55:11:209 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,72:70].[@-1,86:88='lpf',<0>,72:85]
2023-10-25 18:55:11:209 action-translator LogManager.java:25 qattr [@-1,110:114='block',<0>,72:109].[@-1,116:118='blk',<0>,72:115]
2023-10-25 18:55:11:210 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)

2023-10-25 18:55:11:210 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,76:5]
2023-10-25 18:55:11:210 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,76:37].[@-1,43:46='line',<0>,76:42]
2023-10-25 18:55:11:210 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,76:49].[@-1,55:57='pos',<0>,76:54]
2023-10-25 18:55:11:210 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,76:60].[@-1,64:67='text',<0>,76:63]
2023-10-25 18:55:11:211 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,76:70].[@-1,86:88='lpf',<0>,76:85]
2023-10-25 18:55:11:211 action-translator LogManager.java:25 qattr [@-1,92:96='types',<0>,76:91].[@-1,98:99='ty',<0>,76:97]
2023-10-25 18:55:11:211 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,76:102].[@-1,109:111='blk',<0>,76:108]
2023-10-25 18:55:11:212 action-translator LogManager.java:25 translate 
2023-10-25 18:55:11:212 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-10-25 18:55:11:212 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,3:5]
2023-10-25 18:55:11:212 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,4:51].[@-1,84:87='line',<0>,4:54]
2023-10-25 18:55:11:213 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,4:61].[@-1,94:96='pos',<0>,4:64]
2023-10-25 18:55:11:213 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,4:70].[@-1,103:106='text',<0>,4:73]
2023-10-25 18:55:11:213 action-translator LogManager.java:25 qattr [@-1,110:114='types',<0>,4:80].[@-1,116:117='ty',<0>,4:86]
2023-10-25 18:55:11:213 action-translator LogManager.java:25 attr [@-1,126:128='lpf',<0>,5:5]
2023-10-25 18:55:11:213 action-translator LogManager.java:25 attr [@-1,140:142='lpf',<0>,5:19]
2023-10-25 18:55:11:213 action-translator LogManager.java:25 translate  $lpf = []interface{}{} 
2023-10-25 18:55:11:213 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,7:12]
2023-10-25 18:55:11:214 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:214 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-10-25 18:55:11:214 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,12:61].[@-1,103:106='line',<0>,12:64]
2023-10-25 18:55:11:214 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,12:71].[@-1,113:115='pos',<0>,12:74]
2023-10-25 18:55:11:214 action-translator LogManager.java:25 qattr [@-1,119:120='ID',<0>,12:80].[@-1,122:125='text',<0>,12:83]
2023-10-25 18:55:11:214 action-translator LogManager.java:25 qattr [@-1,129:133='types',<0>,12:90].[@-1,135:136='ty',<0>,12:96]
2023-10-25 18:55:11:215 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,13:28].[@-1,173:175='lpf',<0>,13:33]
2023-10-25 18:55:11:215 action-translator LogManager.java:25 attr [@-1,204:206='lpf',<0>,14:15]
2023-10-25 18:55:11:215 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:215 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-25 18:55:11:216 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,96:15]
2023-10-25 18:55:11:216 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,96:49].[@-1,39:42='line',<0>,96:52]
2023-10-25 18:55:11:216 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,96:59].[@-1,49:51='pos',<0>,96:62]
2023-10-25 18:55:11:216 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,96:68].[@-1,58:61='text',<0>,96:71]
2023-10-25 18:55:11:216 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,96:78].[@-1,70:70='e',<0>,96:83]
2023-10-25 18:55:11:217 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-10-25 18:55:11:217 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,100:29]
2023-10-25 18:55:11:218 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,100:59].[@-1,38:41='line',<0>,100:65]
2023-10-25 18:55:11:218 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,100:71].[@-1,50:52='pos',<0>,100:77]
2023-10-25 18:55:11:219 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,100:82].[@-1,60:60='e',<0>,100:87]
2023-10-25 18:55:11:223 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-10-25 18:55:11:223 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,104:36]
2023-10-25 18:55:11:223 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,104:65].[@-1,34:37='line',<0>,104:68]
2023-10-25 18:55:11:223 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,104:75].[@-1,44:46='pos',<0>,104:78]
2023-10-25 18:55:11:223 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,104:84].[@-1,55:55='e',<0>,104:89]
2023-10-25 18:55:11:224 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,104:93].[@-1,65:67='blk',<0>,104:99]
2023-10-25 18:55:11:224 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-10-25 18:55:11:225 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,105:69]
2023-10-25 18:55:11:225 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,105:98].[@-1,33:36='line',<0>,105:101]
2023-10-25 18:55:11:225 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,105:108].[@-1,43:45='pos',<0>,105:111]
2023-10-25 18:55:11:226 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,105:117].[@-1,54:54='e',<0>,105:122]
2023-10-25 18:55:11:226 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,105:126].[@-1,61:63='blk',<0>,105:129]
2023-10-25 18:55:11:226 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,105:140].[@-1,75:77='blk',<0>,105:143]
2023-10-25 18:55:11:227 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-10-25 18:55:11:227 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,106:47]
2023-10-25 18:55:11:228 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,106:76].[@-1,34:37='line',<0>,106:79]
2023-10-25 18:55:11:228 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,106:86].[@-1,44:46='pos',<0>,106:89]
2023-10-25 18:55:11:228 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,106:95].[@-1,55:55='e',<0>,106:100]
2023-10-25 18:55:11:229 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,106:104].[@-1,65:67='blk',<0>,106:110]
2023-10-25 18:55:11:229 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,106:116].[@-1,82:93='else_if_list',<0>,106:127]
2023-10-25 18:55:11:230 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-10-25 18:55:11:230 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,107:82]
2023-10-25 18:55:11:231 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,107:111].[@-1,34:37='line',<0>,107:114]
2023-10-25 18:55:11:231 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,107:121].[@-1,44:46='pos',<0>,107:124]
2023-10-25 18:55:11:231 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,107:130].[@-1,55:55='e',<0>,107:135]
2023-10-25 18:55:11:231 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,107:139].[@-1,62:64='blk',<0>,107:142]
2023-10-25 18:55:11:231 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,107:148].[@-1,79:90='else_if_list',<0>,107:159]
2023-10-25 18:55:11:231 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,107:174].[@-1,97:99='blk',<0>,107:177]
2023-10-25 18:55:11:232 action-translator LogManager.java:25 translate 
2023-10-25 18:55:11:232 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-10-25 18:55:11:233 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-10-25 18:55:11:233 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-10-25 18:55:11:233 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-10-25 18:55:11:233 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-10-25 18:55:11:233 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-25 18:55:11:233 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-10-25 18:55:11:234 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-10-25 18:55:11:234 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-10-25 18:55:11:234 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-10-25 18:55:11:235 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-25 18:55:11:235 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-10-25 18:55:11:235 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,124:41]
2023-10-25 18:55:11:236 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,124:70].[@-1,34:37='line',<0>,124:73]
2023-10-25 18:55:11:236 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,124:80].[@-1,44:46='pos',<0>,124:83]
2023-10-25 18:55:11:236 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,124:89].[@-1,55:55='e',<0>,124:94]
2023-10-25 18:55:11:236 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,124:98].[@-1,65:67='blk',<0>,124:104]
2023-10-25 18:55:11:237 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-10-25 18:55:11:237 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,128:39]
2023-10-25 18:55:11:238 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,128:71].[@-1,40:43='line',<0>,128:77]
2023-10-25 18:55:11:238 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,128:84].[@-1,53:55='pos',<0>,128:90]
2023-10-25 18:55:11:238 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,128:96].[@-1,64:64='e',<0>,128:101]
2023-10-25 18:55:11:239 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,128:105].[@-1,74:76='blk',<0>,128:111]
2023-10-25 18:55:11:240 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-10-25 18:55:11:240 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,132:74]
2023-10-25 18:55:11:241 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,132:102].[@-1,34:37='line',<0>,132:106]
2023-10-25 18:55:11:241 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,132:113].[@-1,45:47='pos',<0>,132:117]
2023-10-25 18:55:11:241 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,132:123].[@-1,54:57='text',<0>,132:126]
2023-10-25 18:55:11:241 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,132:133].[@-1,64:64='e',<0>,132:136]
2023-10-25 18:55:11:241 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,132:139].[@-1,70:70='e',<0>,132:142]
2023-10-25 18:55:11:241 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,132:152].[@-1,86:88='blk',<0>,132:158]
2023-10-25 18:55:11:243 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-10-25 18:55:11:243 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,133:78]
2023-10-25 18:55:11:244 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,133:106].[@-1,34:37='line',<0>,133:110]
2023-10-25 18:55:11:244 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,133:117].[@-1,45:47='pos',<0>,133:121]
2023-10-25 18:55:11:244 action-translator LogManager.java:25 qattr [@-1,51:56='GUIONB',<0>,133:127].[@-1,58:61='text',<0>,133:134]
2023-10-25 18:55:11:245 action-translator LogManager.java:25 qattr [@-1,65:66='e1',<0>,133:141].[@-1,68:68='e',<0>,133:144]
2023-10-25 18:55:11:245 action-translator LogManager.java:25 qattr [@-1,71:72='e2',<0>,133:147].[@-1,74:74='e',<0>,133:150]
2023-10-25 18:55:11:245 action-translator LogManager.java:25 qattr [@-1,84:88='block',<0>,133:160].[@-1,90:92='blk',<0>,133:166]
2023-10-25 18:55:11:247 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-10-25 18:55:11:247 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,134:56]
2023-10-25 18:55:11:248 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,134:84].[@-1,34:37='line',<0>,134:88]
2023-10-25 18:55:11:248 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,134:95].[@-1,45:47='pos',<0>,134:99]
2023-10-25 18:55:11:248 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,134:105].[@-1,54:57='text',<0>,134:108]
2023-10-25 18:55:11:249 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,134:124].[@-1,74:77='text',<0>,134:128]
2023-10-25 18:55:11:249 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,134:135].[@-1,87:89='blk',<0>,134:141]
2023-10-25 18:55:11:250 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);
2023-10-25 18:55:11:251 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,138:30] [@-1,6:91=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)',<0>,138:35]
2023-10-25 18:55:11:251 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)
2023-10-25 18:55:11:252 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,138:59].[@-1,34:37='line',<0>,138:63]
2023-10-25 18:55:11:252 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,138:70].[@-1,45:47='pos',<0>,138:74]
2023-10-25 18:55:11:252 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,138:80].[@-1,54:57='text',<0>,138:83]
2023-10-25 18:55:11:253 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,138:90].[@-1,67:68='ty',<0>,138:96]
2023-10-25 18:55:11:253 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,138:101].[@-1,77:77='e',<0>,138:106]
2023-10-25 18:55:11:254 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);
2023-10-25 18:55:11:255 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,139:19] [@-1,6:98=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)',<0>,139:24]
2023-10-25 18:55:11:255 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-10-25 18:55:11:256 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,139:48].[@-1,34:37='line',<0>,139:52]
2023-10-25 18:55:11:256 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,139:59].[@-1,45:47='pos',<0>,139:63]
2023-10-25 18:55:11:256 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,139:69].[@-1,54:57='text',<0>,139:72]
2023-10-25 18:55:11:257 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,139:97].[@-1,84:84='e',<0>,139:102]
2023-10-25 18:55:11:258 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);
2023-10-25 18:55:11:258 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,140:19] [@-1,6:97=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)',<0>,140:24]
2023-10-25 18:55:11:258 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-10-25 18:55:11:259 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,140:48].[@-1,34:37='line',<0>,140:52]
2023-10-25 18:55:11:259 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,140:59].[@-1,45:47='pos',<0>,140:63]
2023-10-25 18:55:11:260 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,140:69].[@-1,54:57='text',<0>,140:72]
2023-10-25 18:55:11:260 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,140:97].[@-1,84:84='e',<0>,140:102]
2023-10-25 18:55:11:261 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);
2023-10-25 18:55:11:261 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,141:30] [@-1,6:90=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)',<0>,141:35]
2023-10-25 18:55:11:262 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)
2023-10-25 18:55:11:262 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,141:59].[@-1,34:37='line',<0>,141:63]
2023-10-25 18:55:11:263 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,141:70].[@-1,45:47='pos',<0>,141:74]
2023-10-25 18:55:11:263 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,141:80].[@-1,54:57='text',<0>,141:83]
2023-10-25 18:55:11:263 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,141:90].[@-1,67:68='ty',<0>,141:96]
2023-10-25 18:55:11:264 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,141:101].[@-1,77:77='e',<0>,141:106]
2023-10-25 18:55:11:264 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ;
2023-10-25 18:55:11:265 action-translator LogManager.java:25 setAttr [@-1,2:4='dec',<0>,142:20] [@-1,7:103=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ',<0>,142:25]
2023-10-25 18:55:11:265 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) 
2023-10-25 18:55:11:265 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,142:48].[@-1,34:37='line',<0>,142:52]
2023-10-25 18:55:11:266 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,142:59].[@-1,45:47='pos',<0>,142:63]
2023-10-25 18:55:11:266 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,142:69].[@-1,54:57='text',<0>,142:72]
2023-10-25 18:55:11:266 action-translator LogManager.java:25 qattr [@-1,82:85='expr',<0>,142:100].[@-1,87:87='e',<0>,142:105]
2023-10-25 18:55:11:267 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ;
2023-10-25 18:55:11:267 action-translator LogManager.java:25 setAttr [@-1,2:4='dec',<0>,143:20] [@-1,7:102=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ',<0>,143:25]
2023-10-25 18:55:11:267 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) 
2023-10-25 18:55:11:267 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,143:48].[@-1,34:37='line',<0>,143:52]
2023-10-25 18:55:11:268 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,143:59].[@-1,45:47='pos',<0>,143:63]
2023-10-25 18:55:11:268 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,143:69].[@-1,54:57='text',<0>,143:72]
2023-10-25 18:55:11:268 action-translator LogManager.java:25 qattr [@-1,82:85='expr',<0>,143:100].[@-1,87:87='e',<0>,143:105]
2023-10-25 18:55:11:269 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-10-25 18:55:11:269 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,147:8]
2023-10-25 18:55:11:269 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-10-25 18:55:11:269 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,148:10]
2023-10-25 18:55:11:269 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-10-25 18:55:11:270 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,149:8]
2023-10-25 18:55:11:270 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-10-25 18:55:11:271 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,150:9]
2023-10-25 18:55:11:271 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-10-25 18:55:11:271 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,151:18]
2023-10-25 18:55:11:273 action-translator LogManager.java:25 translate 
2023-10-25 18:55:11:273 action-translator LogManager.java:25 translate  $e = $callFunction.cf 
2023-10-25 18:55:11:274 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:44]
2023-10-25 18:55:11:274 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,2:49].[@-1,20:21='cf',<0>,2:62]
2023-10-25 18:55:11:274 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-10-25 18:55:11:274 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:111]
2023-10-25 18:55:11:274 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,3:141].[@-1,35:38='line',<0>,3:144]
2023-10-25 18:55:11:275 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,3:151].[@-1,45:47='pos',<0>,3:154]
2023-10-25 18:55:11:275 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,3:160].[@-1,54:57='text',<0>,3:163]
2023-10-25 18:55:11:275 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,3:170].[@-1,75:75='l',<0>,3:184]
2023-10-25 18:55:11:276 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-25 18:55:11:276 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-10-25 18:55:11:276 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-10-25 18:55:11:276 action-translator LogManager.java:25 translate  $e = $list.p
2023-10-25 18:55:11:276 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-10-25 18:55:11:276 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,5:48].[@-1,12:12='p',<0>,5:53]
2023-10-25 18:55:11:277 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-10-25 18:55:11:277 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:85]
2023-10-25 18:55:11:277 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,6:111].[@-1,35:38='line',<0>,6:118]
2023-10-25 18:55:11:277 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,6:125].[@-1,49:51='pos',<0>,6:132]
2023-10-25 18:55:11:277 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,6:138].[@-1,66:66='l',<0>,6:149]
2023-10-25 18:55:11:277 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-25 18:55:11:277 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,9:30].[@-1,39:42='text',<0>,9:37]
2023-10-25 18:55:11:278 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,10:43].[@-1,102:105='text',<0>,10:50]
2023-10-25 18:55:11:278 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,14:13]
2023-10-25 18:55:11:278 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,14:43].[@-1,240:243='line',<0>,14:50]
2023-10-25 18:55:11:278 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,14:56].[@-1,253:255='pos',<0>,14:63]
2023-10-25 18:55:11:278 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,16:37].[@-1,341:344='text',<0>,16:44]
2023-10-25 18:55:11:279 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,20:13]
2023-10-25 18:55:11:279 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,20:43].[@-1,474:477='line',<0>,20:50]
2023-10-25 18:55:11:279 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,20:56].[@-1,487:489='pos',<0>,20:63]
2023-10-25 18:55:11:279 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-25 18:55:11:279 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,25:16].[@-1,25:28='text',<0>,25:23]
2023-10-25 18:55:11:280 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,26:9]
2023-10-25 18:55:11:280 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,26:39].[@-1,77:80='line',<0>,26:46]
2023-10-25 18:55:11:280 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,26:53].[@-1,91:93='pos',<0>,26:60]
2023-10-25 18:55:11:281 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-25 18:55:11:281 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:32]
2023-10-25 18:55:11:281 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,28:62].[@-1,36:39='line',<0>,28:66]
2023-10-25 18:55:11:281 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,28:73].[@-1,47:49='pos',<0>,28:77]
2023-10-25 18:55:11:281 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-25 18:55:11:281 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-10-25 18:55:11:281 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-10-25 18:55:11:283 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-10-25 18:55:11:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-25 18:55:11:283 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-25 18:55:11:283 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:139]
2023-10-25 18:55:11:283 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:169].[@-1,37:41='start',<0>,32:174]
2023-10-25 18:55:11:284 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:192].[@-1,60:64='start',<0>,32:197]
2023-10-25 18:55:11:284 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:217].[@-1,85:85='e',<0>,32:222]
2023-10-25 18:55:11:284 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:226].[@-1,92:95='text',<0>,32:229]
2023-10-25 18:55:11:284 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:236].[@-1,105:105='e',<0>,32:242]
2023-10-25 18:55:11:284 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-25 18:55:11:284 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-25 18:55:11:284 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:149]
2023-10-25 18:55:11:284 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:179].[@-1,37:41='start',<0>,33:184]
2023-10-25 18:55:11:285 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:202].[@-1,60:64='start',<0>,33:207]
2023-10-25 18:55:11:285 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:227].[@-1,85:85='e',<0>,33:232]
2023-10-25 18:55:11:285 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:236].[@-1,92:95='text',<0>,33:239]
2023-10-25 18:55:11:285 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:246].[@-1,105:105='e',<0>,33:252]
2023-10-25 18:55:11:285 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-25 18:55:11:287 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-25 18:55:11:287 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:154]
2023-10-25 18:55:11:287 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:184].[@-1,37:41='start',<0>,34:189]
2023-10-25 18:55:11:287 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:207].[@-1,60:64='start',<0>,34:212]
2023-10-25 18:55:11:288 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:232].[@-1,85:85='e',<0>,34:237]
2023-10-25 18:55:11:288 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:241].[@-1,92:95='text',<0>,34:244]
2023-10-25 18:55:11:288 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:251].[@-1,105:105='e',<0>,34:257]
2023-10-25 18:55:11:288 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-25 18:55:11:289 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-25 18:55:11:289 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:154]
2023-10-25 18:55:11:289 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:184].[@-1,37:41='start',<0>,35:189]
2023-10-25 18:55:11:289 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:207].[@-1,60:64='start',<0>,35:212]
2023-10-25 18:55:11:289 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:232].[@-1,85:85='e',<0>,35:237]
2023-10-25 18:55:11:290 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:241].[@-1,92:95='text',<0>,35:244]
2023-10-25 18:55:11:290 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:251].[@-1,105:105='e',<0>,35:257]
2023-10-25 18:55:11:290 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-10-25 18:55:11:290 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-25 18:55:11:290 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:151]
2023-10-25 18:55:11:291 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:181].[@-1,37:41='start',<0>,36:186]
2023-10-25 18:55:11:291 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:204].[@-1,60:64='start',<0>,36:209]
2023-10-25 18:55:11:292 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:229].[@-1,85:85='e',<0>,36:234]
2023-10-25 18:55:11:292 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:238].[@-1,92:95='text',<0>,36:241]
2023-10-25 18:55:11:292 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:248].[@-1,105:105='e',<0>,36:254]
2023-10-25 18:55:11:293 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-10-25 18:55:11:293 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-25 18:55:11:293 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:127]
2023-10-25 18:55:11:293 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:157].[@-1,37:41='start',<0>,37:162]
2023-10-25 18:55:11:293 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:180].[@-1,60:64='start',<0>,37:185]
2023-10-25 18:55:11:293 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:205].[@-1,85:85='e',<0>,37:210]
2023-10-25 18:55:11:293 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:214].[@-1,92:95='text',<0>,37:217]
2023-10-25 18:55:11:293 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:224].[@-1,105:105='e',<0>,37:230]
2023-10-25 18:55:11:293 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-10-25 18:55:11:294 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-25 18:55:11:294 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:126]
2023-10-25 18:55:11:295 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:156].[@-1,37:41='start',<0>,38:161]
2023-10-25 18:55:11:295 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:179].[@-1,60:64='start',<0>,38:184]
2023-10-25 18:55:11:295 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:204].[@-1,85:85='e',<0>,38:209]
2023-10-25 18:55:11:295 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:213].[@-1,92:95='text',<0>,38:216]
2023-10-25 18:55:11:295 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:223].[@-1,105:105='e',<0>,38:229]
2023-10-25 18:55:11:296 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-25 18:55:11:296 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-25 18:55:11:296 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-25 18:55:11:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-25 18:55:11:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-10-25 18:55:11:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-10-25 18:55:11:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-10-25 18:55:11:297 action-translator LogManager.java:25 translate 
2023-10-25 18:55:11:297 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-25 18:55:11:297 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-25 18:55:11:298 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-25 18:55:11:298 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-25 18:55:11:298 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-25 18:55:11:298 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-25 18:55:11:298 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-25 18:55:11:298 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-25 18:55:11:298 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-25 18:55:11:298 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-25 18:55:11:298 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-25 18:55:11:299 action-translator LogManager.java:25 translate 
2023-10-25 18:55:11:299 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-10-25 18:55:11:300 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-10-25 18:55:11:300 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-10-25 18:55:11:300 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-10-25 18:55:11:300 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-10-25 18:55:11:301 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:301 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-10-25 18:55:11:301 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-10-25 18:55:11:303 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-10-25 18:55:11:303 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-10-25 18:55:11:303 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-10-25 18:55:11:303 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-10-25 18:55:11:303 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-25 18:55:11:304 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-10-25 18:55:11:304 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:111]
2023-10-25 18:55:11:304 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:144].[@-1,40:44='start',<0>,6:149]
2023-10-25 18:55:11:304 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:167].[@-1,63:67='start',<0>,6:172]
2023-10-25 18:55:11:304 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:192].[@-1,88:88='p',<0>,6:197]
2023-10-25 18:55:11:304 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:201].[@-1,95:98='text',<0>,6:204]
2023-10-25 18:55:11:304 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:304 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-25 18:55:11:305 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-25 18:55:11:305 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,211:36]
2023-10-25 18:55:11:306 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,211:65].[@-1,34:37='line',<0>,211:68]
2023-10-25 18:55:11:306 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,211:75].[@-1,44:46='pos',<0>,211:78]
2023-10-25 18:55:11:306 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,211:84].[@-1,53:56='text',<0>,211:87]
2023-10-25 18:55:11:306 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,211:94].[@-1,75:75='l',<0>,211:109]
2023-10-25 18:55:11:307 action-translator LogManager.java:25 translate 
2023-10-25 18:55:11:308 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-25 18:55:11:308 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-25 18:55:11:308 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-25 18:55:11:308 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-25 18:55:11:309 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-25 18:55:11:309 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-25 18:55:11:309 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-25 18:55:11:310 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:310 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-10-25 18:55:11:311 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-10-25 18:55:11:311 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-10-25 18:55:11:311 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-10-25 18:55:11:312 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:313 action-translator LogManager.java:25 translate 
2023-10-25 18:55:11:313 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-10-25 18:55:11:314 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-10-25 18:55:11:314 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-10-25 18:55:11:314 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-10-25 18:55:11:315 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-25 18:55:11:315 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-10-25 18:55:11:315 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:316 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-10-25 18:55:11:316 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-10-25 18:55:11:316 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-10-25 18:55:11:317 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-10-25 18:55:11:317 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-10-25 18:55:11:317 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-25 18:55:11:505 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-25 18:55:11:506 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-25 18:55:11:544 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-25 18:55:11:544 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

