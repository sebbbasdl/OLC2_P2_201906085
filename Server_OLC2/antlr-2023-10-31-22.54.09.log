2023-10-31 22:54:08:010 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-31 22:54:08:032 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-31 22:54:08:516 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MODULO))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-31 22:54:08:524 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (SET MUL DIV MODULO)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-31 22:54:08:528 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (SET MUL DIV MODULO)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-31 22:54:08:529 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-10-31 22:54:08:563 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=185> ID<tokenIndex=187> D_PTS<tokenIndex=189> types<tokenIndex=191> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=171> VAR<tokenIndex=173> ID<tokenIndex=175> D_PTS<tokenIndex=177> types<tokenIndex=179> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-10-31 22:54:08:573 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 185))) (ID (ELEMENT_OPTIONS (= tokenIndex 187))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 189))) (types (ELEMENT_OPTIONS (= tokenIndex 191))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 171))) (VAR (ELEMENT_OPTIONS (= tokenIndex 173))) (ID (ELEMENT_OPTIONS (= tokenIndex 175))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 177))) (types (ELEMENT_OPTIONS (= tokenIndex 179))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-10-31 22:54:08:574 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lpf]
    :   ( {} ID<tokenIndex=276> D_PTS<tokenIndex=278> types<tokenIndex=280> {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | { $lpf = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=264> ID<tokenIndex=266> D_PTS<tokenIndex=268> types<tokenIndex=270> {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
        )*
    ;
2023-10-31 22:54:08:577 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 276))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 278))) (types (ELEMENT_OPTIONS (= tokenIndex 280))) {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 264))) (ID (ELEMENT_OPTIONS (= tokenIndex 266))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 268))) (types (ELEMENT_OPTIONS (= tokenIndex 270))) {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }))))))
2023-10-31 22:54:08:578 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=437>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=431> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-10-31 22:54:08:580 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 437))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 431))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-10-31 22:54:08:581 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=513>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=507> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-10-31 22:54:08:583 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 513))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 507))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-10-31 22:54:08:588 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=SUB<tokenIndex=824> right=expr<tokenIndex=828,p=20> { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) } 
        | callFunction<tokenIndex=968> { $e = $callFunction.cf } 
        | ID<tokenIndex=974> LLAVEIZQ<tokenIndex=976> listStructExp<tokenIndex=978> LLAVEDER<tokenIndex=980> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | PARIZQ<tokenIndex=986> expr<tokenIndex=988> PARDER<tokenIndex=990> { $e = $expr.e } 
        | list=listArray<tokenIndex=998> { $e = $list.p} 
        | CORIZQ<tokenIndex=1004> listParams<tokenIndex=1006> CORDER<tokenIndex=1008> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | INT<tokenIndex=1014> PARIZQ<tokenIndex=1016> expr<tokenIndex=1018> PARDER<tokenIndex=1020> { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) } 
        | STR<tokenIndex=1026> PARIZQ<tokenIndex=1028> expr<tokenIndex=1030> PARDER<tokenIndex=1032> { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) } 
        | FLOAT<tokenIndex=1038> PARIZQ<tokenIndex=1040> expr<tokenIndex=1042> PARDER<tokenIndex=1044> { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) } 
        | NUMBER<tokenIndex=1050>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1056>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1062> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1068> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=841>|DIV<tokenIndex=843>|MODULO<tokenIndex=845>) right=expr<tokenIndex=850,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=863>|SUB<tokenIndex=865>) right=expr<tokenIndex=870,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=883>|MAYOR<tokenIndex=885>) right=expr<tokenIndex=890,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=903>|MENOR<tokenIndex=905>) right=expr<tokenIndex=910,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=923>|DIF<tokenIndex=925>) right=expr<tokenIndex=930,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=942> right=expr<tokenIndex=946,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=958> right=expr<tokenIndex=962,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-31 22:54:08:604 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 824)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 828) (= p 20)))) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 968))) { $e = $callFunction.cf }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 974))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 976))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 978))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 980))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 986))) (expr (ELEMENT_OPTIONS (= tokenIndex 988))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 990))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 998)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1004))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1006))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1008))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 1014))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1016))) (expr (ELEMENT_OPTIONS (= tokenIndex 1018))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1020))) { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) }) (ALT (STR (ELEMENT_OPTIONS (= tokenIndex 1026))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1028))) (expr (ELEMENT_OPTIONS (= tokenIndex 1030))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1032))) { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) }) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 1038))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1040))) (expr (ELEMENT_OPTIONS (= tokenIndex 1042))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1044))) { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1050))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1056))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1062))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1068))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 841))) (DIV (ELEMENT_OPTIONS (= tokenIndex 843))) (MODULO (ELEMENT_OPTIONS (= tokenIndex 845))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 850) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 863))) (SUB (ELEMENT_OPTIONS (= tokenIndex 865))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 870) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 883))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 885))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 890) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 903))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 905))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 910) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 923))) (DIF (ELEMENT_OPTIONS (= tokenIndex 925))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 930) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 942)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 946) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 958)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 962) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-31 22:54:08:604 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1093> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1085> expr<tokenIndex=1087> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-31 22:54:08:605 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1093))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1085))) (expr (ELEMENT_OPTIONS (= tokenIndex 1087))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-31 22:54:08:607 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1136> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=1112> expr<tokenIndex=1114> CORDER<tokenIndex=1116> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1128> ID<tokenIndex=1130> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2023-10-31 22:54:08:610 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1136))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1112))) (expr (ELEMENT_OPTIONS (= tokenIndex 1114))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1116))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1128))) (ID (ELEMENT_OPTIONS (= tokenIndex 1130))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2023-10-31 22:54:08:610 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1180>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1172> expr<tokenIndex=1174> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-10-31 22:54:08:612 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1180))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1172))) (expr (ELEMENT_OPTIONS (= tokenIndex 1174))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-10-31 22:54:08:613 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1213> D_PTS<tokenIndex=1215> expr<tokenIndex=1217>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1201> ID<tokenIndex=1203> D_PTS<tokenIndex=1205> expr<tokenIndex=1207> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-10-31 22:54:08:619 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1213))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1215))) (expr (ELEMENT_OPTIONS (= tokenIndex 1217))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1201))) (ID (ELEMENT_OPTIONS (= tokenIndex 1203))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1205))) (expr (ELEMENT_OPTIONS (= tokenIndex 1207))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-10-31 22:54:08:632 grammar LogManager.java:25 import INT=1
2023-10-31 22:54:08:632 grammar LogManager.java:25 import FLOAT=2
2023-10-31 22:54:08:633 grammar LogManager.java:25 import BOOL=3
2023-10-31 22:54:08:633 grammar LogManager.java:25 import STR=4
2023-10-31 22:54:08:633 grammar LogManager.java:25 import TRU=5
2023-10-31 22:54:08:633 grammar LogManager.java:25 import FAL=6
2023-10-31 22:54:08:634 grammar LogManager.java:25 import PRINT=7
2023-10-31 22:54:08:634 grammar LogManager.java:25 import IF=8
2023-10-31 22:54:08:634 grammar LogManager.java:25 import ELSE=9
2023-10-31 22:54:08:634 grammar LogManager.java:25 import WHILE=10
2023-10-31 22:54:08:635 grammar LogManager.java:25 import FOR=11
2023-10-31 22:54:08:635 grammar LogManager.java:25 import SWITCH=12
2023-10-31 22:54:08:635 grammar LogManager.java:25 import CASE=13
2023-10-31 22:54:08:635 grammar LogManager.java:25 import DEFAULT=14
2023-10-31 22:54:08:635 grammar LogManager.java:25 import IN=15
2023-10-31 22:54:08:635 grammar LogManager.java:25 import VAR=16
2023-10-31 22:54:08:636 grammar LogManager.java:25 import LET=17
2023-10-31 22:54:08:636 grammar LogManager.java:25 import BREAK=18
2023-10-31 22:54:08:636 grammar LogManager.java:25 import CONTINUE=19
2023-10-31 22:54:08:636 grammar LogManager.java:25 import RETURN=20
2023-10-31 22:54:08:636 grammar LogManager.java:25 import GUARD=21
2023-10-31 22:54:08:637 grammar LogManager.java:25 import APPEND=22
2023-10-31 22:54:08:637 grammar LogManager.java:25 import REMOVELAST=23
2023-10-31 22:54:08:637 grammar LogManager.java:25 import REMOVE=24
2023-10-31 22:54:08:637 grammar LogManager.java:25 import COUNT=25
2023-10-31 22:54:08:637 grammar LogManager.java:25 import ISEMPTY=26
2023-10-31 22:54:08:638 grammar LogManager.java:25 import AT=27
2023-10-31 22:54:08:638 grammar LogManager.java:25 import FUNC=28
2023-10-31 22:54:08:638 grammar LogManager.java:25 import STRUCT=29
2023-10-31 22:54:08:638 grammar LogManager.java:25 import NUMBER=30
2023-10-31 22:54:08:638 grammar LogManager.java:25 import STRING=31
2023-10-31 22:54:08:638 grammar LogManager.java:25 import ID=32
2023-10-31 22:54:08:638 grammar LogManager.java:25 import DIF=33
2023-10-31 22:54:08:639 grammar LogManager.java:25 import IG_IG=34
2023-10-31 22:54:08:639 grammar LogManager.java:25 import NOT=35
2023-10-31 22:54:08:639 grammar LogManager.java:25 import OR=36
2023-10-31 22:54:08:639 grammar LogManager.java:25 import AND=37
2023-10-31 22:54:08:639 grammar LogManager.java:25 import IG=38
2023-10-31 22:54:08:639 grammar LogManager.java:25 import MAY_IG=39
2023-10-31 22:54:08:639 grammar LogManager.java:25 import MEN_IG=40
2023-10-31 22:54:08:639 grammar LogManager.java:25 import MAYOR=41
2023-10-31 22:54:08:639 grammar LogManager.java:25 import MENOR=42
2023-10-31 22:54:08:639 grammar LogManager.java:25 import MUL=43
2023-10-31 22:54:08:640 grammar LogManager.java:25 import DIV=44
2023-10-31 22:54:08:640 grammar LogManager.java:25 import ADD=45
2023-10-31 22:54:08:640 grammar LogManager.java:25 import SUB=46
2023-10-31 22:54:08:640 grammar LogManager.java:25 import PARIZQ=47
2023-10-31 22:54:08:640 grammar LogManager.java:25 import PARDER=48
2023-10-31 22:54:08:641 grammar LogManager.java:25 import LLAVEIZQ=49
2023-10-31 22:54:08:641 grammar LogManager.java:25 import LLAVEDER=50
2023-10-31 22:54:08:641 grammar LogManager.java:25 import D_PTS=51
2023-10-31 22:54:08:641 grammar LogManager.java:25 import CORIZQ=52
2023-10-31 22:54:08:641 grammar LogManager.java:25 import CORDER=53
2023-10-31 22:54:08:641 grammar LogManager.java:25 import COMA=54
2023-10-31 22:54:08:642 grammar LogManager.java:25 import ARROW1=55
2023-10-31 22:54:08:642 grammar LogManager.java:25 import PUNTO=56
2023-10-31 22:54:08:642 grammar LogManager.java:25 import MODULO=57
2023-10-31 22:54:08:642 grammar LogManager.java:25 import GUIONB=58
2023-10-31 22:54:08:642 grammar LogManager.java:25 import WHITESPACE=59
2023-10-31 22:54:08:642 grammar LogManager.java:25 import COMMENT=60
2023-10-31 22:54:08:642 grammar LogManager.java:25 import LINE_COMMENT=61
2023-10-31 22:54:08:642 grammar LogManager.java:25 import 'Int'=1
2023-10-31 22:54:08:642 grammar LogManager.java:25 import 'Float'=2
2023-10-31 22:54:08:642 grammar LogManager.java:25 import 'Bool'=3
2023-10-31 22:54:08:642 grammar LogManager.java:25 import 'String'=4
2023-10-31 22:54:08:642 grammar LogManager.java:25 import 'true'=5
2023-10-31 22:54:08:642 grammar LogManager.java:25 import 'false'=6
2023-10-31 22:54:08:642 grammar LogManager.java:25 import 'print'=7
2023-10-31 22:54:08:642 grammar LogManager.java:25 import 'if'=8
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'else'=9
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'while'=10
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'for'=11
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'switch'=12
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'case'=13
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'default'=14
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'in'=15
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'var'=16
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'let'=17
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'break'=18
2023-10-31 22:54:08:643 grammar LogManager.java:25 import 'continue'=19
2023-10-31 22:54:08:644 grammar LogManager.java:25 import 'return'=20
2023-10-31 22:54:08:644 grammar LogManager.java:25 import 'guard'=21
2023-10-31 22:54:08:644 grammar LogManager.java:25 import 'append'=22
2023-10-31 22:54:08:644 grammar LogManager.java:25 import 'removeLast'=23
2023-10-31 22:54:08:644 grammar LogManager.java:25 import 'remove'=24
2023-10-31 22:54:08:644 grammar LogManager.java:25 import 'count'=25
2023-10-31 22:54:08:644 grammar LogManager.java:25 import 'isEmpty'=26
2023-10-31 22:54:08:644 grammar LogManager.java:25 import 'at'=27
2023-10-31 22:54:08:645 grammar LogManager.java:25 import 'func'=28
2023-10-31 22:54:08:645 grammar LogManager.java:25 import 'struct'=29
2023-10-31 22:54:08:645 grammar LogManager.java:25 import '!='=33
2023-10-31 22:54:08:645 grammar LogManager.java:25 import '=='=34
2023-10-31 22:54:08:645 grammar LogManager.java:25 import '!'=35
2023-10-31 22:54:08:645 grammar LogManager.java:25 import '||'=36
2023-10-31 22:54:08:645 grammar LogManager.java:25 import '&&'=37
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '='=38
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '>='=39
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '<='=40
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '>'=41
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '<'=42
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '*'=43
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '/'=44
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '+'=45
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '-'=46
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '('=47
2023-10-31 22:54:08:646 grammar LogManager.java:25 import ')'=48
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '{'=49
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '}'=50
2023-10-31 22:54:08:646 grammar LogManager.java:25 import ':'=51
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '['=52
2023-10-31 22:54:08:646 grammar LogManager.java:25 import ']'=53
2023-10-31 22:54:08:646 grammar LogManager.java:25 import ','=54
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '->'=55
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '.'=56
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '%'=57
2023-10-31 22:54:08:646 grammar LogManager.java:25 import '_'=58
2023-10-31 22:54:08:647 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-10-31 22:54:08:647 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61}
2023-10-31 22:54:08:647 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-10-31 22:54:08:708 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-31 22:54:08:709 LL1 LogManager.java:25 look=[{7..8, 10..12, 16..19, 21, 28..29, 32}, null]
2023-10-31 22:54:08:709 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:709 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-31 22:54:08:709 LL1 LogManager.java:25 look=[7, 8, {16..17}, 32, 28, 29, 10, 11, 21, 12, 18, 19]
2023-10-31 22:54:08:710 LL1 LogManager.java:25 LL(1)? true
2023-10-31 22:54:08:710 LL1 LogManager.java:25 
DECISION 2 in rule listStructDec
2023-10-31 22:54:08:710 LL1 LogManager.java:25 look=[16, null]
2023-10-31 22:54:08:710 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:710 LL1 LogManager.java:25 
DECISION 3 in rule listStructDec
2023-10-31 22:54:08:710 LL1 LogManager.java:25 look=[null, 50]
2023-10-31 22:54:08:710 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:710 LL1 LogManager.java:25 
DECISION 4 in rule function
2023-10-31 22:54:08:710 LL1 LogManager.java:25 look=[28, 28]
2023-10-31 22:54:08:710 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:710 LL1 LogManager.java:25 
DECISION 5 in rule listParamsFunc
2023-10-31 22:54:08:710 LL1 LogManager.java:25 look=[32, null]
2023-10-31 22:54:08:711 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:711 LL1 LogManager.java:25 
DECISION 6 in rule listParamsFunc
2023-10-31 22:54:08:711 LL1 LogManager.java:25 look=[null, 48]
2023-10-31 22:54:08:711 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:711 LL1 LogManager.java:25 
DECISION 7 in rule ifstmt
2023-10-31 22:54:08:711 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-10-31 22:54:08:711 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:711 LL1 LogManager.java:25 
DECISION 8 in rule elseiflist
2023-10-31 22:54:08:711 LL1 LogManager.java:25 look=[null, null]
2023-10-31 22:54:08:711 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:711 LL1 LogManager.java:25 
DECISION 9 in rule caselist
2023-10-31 22:54:08:712 LL1 LogManager.java:25 look=[null, 14]
2023-10-31 22:54:08:712 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:712 LL1 LogManager.java:25 
DECISION 10 in rule forstmt
2023-10-31 22:54:08:712 LL1 LogManager.java:25 look=[11, 11, 11]
2023-10-31 22:54:08:712 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:712 LL1 LogManager.java:25 
DECISION 11 in rule declarationstmt
2023-10-31 22:54:08:712 LL1 LogManager.java:25 look=[16, 16, 17, 17]
2023-10-31 22:54:08:712 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:712 LL1 LogManager.java:25 
DECISION 12 in rule types
2023-10-31 22:54:08:712 LL1 LogManager.java:25 look=[1, 2, 4, 3, 52]
2023-10-31 22:54:08:712 LL1 LogManager.java:25 LL(1)? true
2023-10-31 22:54:08:712 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-10-31 22:54:08:712 LL1 LogManager.java:25 look=[46, 32, 32, 47, 32, 52, 1, 4, 2, 30, 31, 5, 6]
2023-10-31 22:54:08:712 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:713 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-10-31 22:54:08:713 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-10-31 22:54:08:713 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:713 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-10-31 22:54:08:714 LL1 LogManager.java:25 look=[null, null]
2023-10-31 22:54:08:714 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:714 LL1 LogManager.java:25 
DECISION 16 in rule listParams
2023-10-31 22:54:08:714 LL1 LogManager.java:25 look=[null, 53]
2023-10-31 22:54:08:715 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:715 LL1 LogManager.java:25 
DECISION 17 in rule listArray
2023-10-31 22:54:08:715 LL1 LogManager.java:25 look=[null, null]
2023-10-31 22:54:08:715 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:715 LL1 LogManager.java:25 
DECISION 18 in rule listArray
2023-10-31 22:54:08:716 LL1 LogManager.java:25 look=[null, null]
2023-10-31 22:54:08:716 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:716 LL1 LogManager.java:25 
DECISION 19 in rule listParamsCall
2023-10-31 22:54:08:717 LL1 LogManager.java:25 look=[{1..2, 4..6, 30..32, 46..47, 52}, null]
2023-10-31 22:54:08:717 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:717 LL1 LogManager.java:25 
DECISION 20 in rule listParamsCall
2023-10-31 22:54:08:717 LL1 LogManager.java:25 look=[null, 48]
2023-10-31 22:54:08:717 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:717 LL1 LogManager.java:25 
DECISION 21 in rule listStructExp
2023-10-31 22:54:08:717 LL1 LogManager.java:25 look=[32, null]
2023-10-31 22:54:08:717 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:717 LL1 LogManager.java:25 
DECISION 22 in rule listStructExp
2023-10-31 22:54:08:717 LL1 LogManager.java:25 look=[null, 50]
2023-10-31 22:54:08:718 LL1 LogManager.java:25 LL(1)? false
2023-10-31 22:54:08:727 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-31 22:54:08:745 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-31 22:54:08:746 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-10-31 22:54:08:747 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-10-31 22:54:08:750 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-31 22:54:08:750 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-10-31 22:54:08:752 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-31 22:54:08:752 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-10-31 22:54:08:752 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-10-31 22:54:08:753 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-31 22:54:08:754 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-10-31 22:54:08:754 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-10-31 22:54:08:754 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-10-31 22:54:08:755 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-10-31 22:54:08:755 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-10-31 22:54:08:755 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-10-31 22:54:08:755 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-10-31 22:54:08:755 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-10-31 22:54:08:755 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2023-10-31 22:54:08:755 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-10-31 22:54:08:755 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,42:23].[@-1,21:23='ass',<0>,42:34]
2023-10-31 22:54:08:755 action-translator LogManager.java:25 translate  $inst = $function.fun 
2023-10-31 22:54:08:757 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:13]
2023-10-31 22:54:08:757 action-translator LogManager.java:25 qattr [@-1,10:17='function',<0>,43:21].[@-1,19:21='fun',<0>,43:30]
2023-10-31 22:54:08:757 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-10-31 22:54:08:757 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:19]
2023-10-31 22:54:08:757 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,44:27].[@-1,25:27='dec',<0>,44:42]
2023-10-31 22:54:08:758 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-10-31 22:54:08:758 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-10-31 22:54:08:758 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,45:22].[@-1,20:25='whiles',<0>,45:32]
2023-10-31 22:54:08:758 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-10-31 22:54:08:758 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:12]
2023-10-31 22:54:08:759 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,46:20].[@-1,18:21='fors',<0>,46:28]
2023-10-31 22:54:08:759 action-translator LogManager.java:25 translate  $inst = $guardtmt.guard 
2023-10-31 22:54:08:759 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:13]
2023-10-31 22:54:08:759 action-translator LogManager.java:25 qattr [@-1,10:17='guardtmt',<0>,47:21].[@-1,19:23='guard',<0>,47:30]
2023-10-31 22:54:08:759 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-10-31 22:54:08:760 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:14]
2023-10-31 22:54:08:760 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,48:22].[@-1,20:24='swtch',<0>,48:32]
2023-10-31 22:54:08:761 action-translator LogManager.java:25 translate  $inst = $breaktmt.break 
2023-10-31 22:54:08:761 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:13]
2023-10-31 22:54:08:761 action-translator LogManager.java:25 qattr [@-1,10:17='breaktmt',<0>,49:21].[@-1,19:23='break',<0>,49:30]
2023-10-31 22:54:08:762 action-translator LogManager.java:25 translate  $inst = $continuetmt.continue 
2023-10-31 22:54:08:762 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:15]
2023-10-31 22:54:08:762 action-translator LogManager.java:25 qattr [@-1,10:20='continuetmt',<0>,50:23].[@-1,22:29='continue',<0>,50:35]
2023-10-31 22:54:08:764 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-10-31 22:54:08:764 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,55:46]
2023-10-31 22:54:08:764 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,55:76].[@-1,39:42='line',<0>,55:83]
2023-10-31 22:54:08:765 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,55:90].[@-1,53:55='pos',<0>,55:97]
2023-10-31 22:54:08:766 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,55:103].[@-1,62:65='text',<0>,55:106]
2023-10-31 22:54:08:766 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,55:113].[@-1,83:83='l',<0>,55:127]
2023-10-31 22:54:08:767 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:767 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-10-31 22:54:08:767 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-10-31 22:54:08:767 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-10-31 22:54:08:767 action-translator LogManager.java:25 attr [@-1,213:213='l',<0>,6:25]
2023-10-31 22:54:08:768 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-10-31 22:54:08:768 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-10-31 22:54:08:769 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:770 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-10-31 22:54:08:770 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,13:98].[@-1,184:187='text',<0>,13:101]
2023-10-31 22:54:08:771 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,13:108].[@-1,197:198='ty',<0>,13:114]
2023-10-31 22:54:08:771 action-translator LogManager.java:25 qattr [@-1,274:277='list',<0>,14:72].[@-1,279:279='l',<0>,14:77]
2023-10-31 22:54:08:771 action-translator LogManager.java:25 attr [@-1,353:353='l',<0>,15:59]
2023-10-31 22:54:08:772 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:773 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)

2023-10-31 22:54:08:774 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,77:5]
2023-10-31 22:54:08:774 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,77:37].[@-1,43:46='line',<0>,77:42]
2023-10-31 22:54:08:775 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,77:49].[@-1,55:57='pos',<0>,77:54]
2023-10-31 22:54:08:775 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,77:60].[@-1,64:67='text',<0>,77:63]
2023-10-31 22:54:08:775 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,77:70].[@-1,86:88='lpf',<0>,77:85]
2023-10-31 22:54:08:775 action-translator LogManager.java:25 qattr [@-1,110:114='block',<0>,77:109].[@-1,116:118='blk',<0>,77:115]
2023-10-31 22:54:08:777 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)

2023-10-31 22:54:08:777 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,81:5]
2023-10-31 22:54:08:777 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,81:37].[@-1,43:46='line',<0>,81:42]
2023-10-31 22:54:08:778 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,81:49].[@-1,55:57='pos',<0>,81:54]
2023-10-31 22:54:08:778 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,81:60].[@-1,64:67='text',<0>,81:63]
2023-10-31 22:54:08:778 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,81:70].[@-1,86:88='lpf',<0>,81:85]
2023-10-31 22:54:08:779 action-translator LogManager.java:25 qattr [@-1,92:96='types',<0>,81:91].[@-1,98:99='ty',<0>,81:97]
2023-10-31 22:54:08:779 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,81:102].[@-1,109:111='blk',<0>,81:108]
2023-10-31 22:54:08:780 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:780 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-10-31 22:54:08:781 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,3:5]
2023-10-31 22:54:08:781 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,4:51].[@-1,84:87='line',<0>,4:54]
2023-10-31 22:54:08:781 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,4:61].[@-1,94:96='pos',<0>,4:64]
2023-10-31 22:54:08:781 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,4:70].[@-1,103:106='text',<0>,4:73]
2023-10-31 22:54:08:781 action-translator LogManager.java:25 qattr [@-1,110:114='types',<0>,4:80].[@-1,116:117='ty',<0>,4:86]
2023-10-31 22:54:08:781 action-translator LogManager.java:25 attr [@-1,126:128='lpf',<0>,5:5]
2023-10-31 22:54:08:781 action-translator LogManager.java:25 attr [@-1,140:142='lpf',<0>,5:19]
2023-10-31 22:54:08:782 action-translator LogManager.java:25 translate  $lpf = []interface{}{} 
2023-10-31 22:54:08:782 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,7:12]
2023-10-31 22:54:08:782 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:782 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-10-31 22:54:08:782 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,12:61].[@-1,103:106='line',<0>,12:64]
2023-10-31 22:54:08:782 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,12:71].[@-1,113:115='pos',<0>,12:74]
2023-10-31 22:54:08:783 action-translator LogManager.java:25 qattr [@-1,119:120='ID',<0>,12:80].[@-1,122:125='text',<0>,12:83]
2023-10-31 22:54:08:783 action-translator LogManager.java:25 qattr [@-1,129:133='types',<0>,12:90].[@-1,135:136='ty',<0>,12:96]
2023-10-31 22:54:08:783 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,13:28].[@-1,173:175='lpf',<0>,13:33]
2023-10-31 22:54:08:783 action-translator LogManager.java:25 attr [@-1,204:206='lpf',<0>,14:15]
2023-10-31 22:54:08:783 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:784 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-31 22:54:08:784 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,101:15]
2023-10-31 22:54:08:784 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,101:49].[@-1,39:42='line',<0>,101:52]
2023-10-31 22:54:08:785 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,101:59].[@-1,49:51='pos',<0>,101:62]
2023-10-31 22:54:08:785 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,101:68].[@-1,58:61='text',<0>,101:71]
2023-10-31 22:54:08:785 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,101:78].[@-1,70:70='e',<0>,101:83]
2023-10-31 22:54:08:786 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-10-31 22:54:08:786 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,105:29]
2023-10-31 22:54:08:786 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,105:59].[@-1,38:41='line',<0>,105:65]
2023-10-31 22:54:08:786 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,105:71].[@-1,50:52='pos',<0>,105:77]
2023-10-31 22:54:08:786 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,105:82].[@-1,60:60='e',<0>,105:87]
2023-10-31 22:54:08:788 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-10-31 22:54:08:788 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,109:36]
2023-10-31 22:54:08:788 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,109:65].[@-1,34:37='line',<0>,109:68]
2023-10-31 22:54:08:789 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,109:75].[@-1,44:46='pos',<0>,109:78]
2023-10-31 22:54:08:789 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,109:84].[@-1,55:55='e',<0>,109:89]
2023-10-31 22:54:08:789 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,109:93].[@-1,65:67='blk',<0>,109:99]
2023-10-31 22:54:08:789 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-10-31 22:54:08:789 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,110:69]
2023-10-31 22:54:08:790 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,110:98].[@-1,33:36='line',<0>,110:101]
2023-10-31 22:54:08:790 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,110:108].[@-1,43:45='pos',<0>,110:111]
2023-10-31 22:54:08:790 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,110:117].[@-1,54:54='e',<0>,110:122]
2023-10-31 22:54:08:790 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,110:126].[@-1,61:63='blk',<0>,110:129]
2023-10-31 22:54:08:790 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,110:140].[@-1,75:77='blk',<0>,110:143]
2023-10-31 22:54:08:791 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-10-31 22:54:08:791 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,111:47]
2023-10-31 22:54:08:791 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,111:76].[@-1,34:37='line',<0>,111:79]
2023-10-31 22:54:08:791 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,111:86].[@-1,44:46='pos',<0>,111:89]
2023-10-31 22:54:08:791 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,111:95].[@-1,55:55='e',<0>,111:100]
2023-10-31 22:54:08:791 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,111:104].[@-1,65:67='blk',<0>,111:110]
2023-10-31 22:54:08:791 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,111:116].[@-1,82:93='else_if_list',<0>,111:127]
2023-10-31 22:54:08:791 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-10-31 22:54:08:792 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,112:82]
2023-10-31 22:54:08:792 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,112:111].[@-1,34:37='line',<0>,112:114]
2023-10-31 22:54:08:792 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,112:121].[@-1,44:46='pos',<0>,112:124]
2023-10-31 22:54:08:792 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,112:130].[@-1,55:55='e',<0>,112:135]
2023-10-31 22:54:08:792 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,112:139].[@-1,62:64='blk',<0>,112:142]
2023-10-31 22:54:08:793 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,112:148].[@-1,79:90='else_if_list',<0>,112:159]
2023-10-31 22:54:08:793 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,112:174].[@-1,97:99='blk',<0>,112:177]
2023-10-31 22:54:08:794 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:794 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-10-31 22:54:08:794 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-10-31 22:54:08:795 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-10-31 22:54:08:795 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-10-31 22:54:08:795 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-10-31 22:54:08:795 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-31 22:54:08:795 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-10-31 22:54:08:795 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-10-31 22:54:08:797 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-10-31 22:54:08:797 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-10-31 22:54:08:797 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-31 22:54:08:797 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-10-31 22:54:08:798 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,129:41]
2023-10-31 22:54:08:798 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,129:70].[@-1,34:37='line',<0>,129:73]
2023-10-31 22:54:08:798 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,129:80].[@-1,44:46='pos',<0>,129:83]
2023-10-31 22:54:08:798 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,129:89].[@-1,55:55='e',<0>,129:94]
2023-10-31 22:54:08:798 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,129:98].[@-1,65:67='blk',<0>,129:104]
2023-10-31 22:54:08:799 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-10-31 22:54:08:799 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,133:64]
2023-10-31 22:54:08:800 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,133:97].[@-1,42:45='line',<0>,133:104]
2023-10-31 22:54:08:800 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,133:111].[@-1,56:58='pos',<0>,133:118]
2023-10-31 22:54:08:800 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,133:124].[@-1,67:67='e',<0>,133:129]
2023-10-31 22:54:08:800 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,133:132].[@-1,79:83='cases',<0>,133:141]
2023-10-31 22:54:08:800 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,133:149].[@-1,93:95='blk',<0>,133:155]
2023-10-31 22:54:08:801 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:801 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-10-31 22:54:08:802 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-10-31 22:54:08:802 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-10-31 22:54:08:802 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-10-31 22:54:08:802 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-10-31 22:54:08:802 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-31 22:54:08:803 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-10-31 22:54:08:803 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-10-31 22:54:08:803 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-10-31 22:54:08:803 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-10-31 22:54:08:803 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-31 22:54:08:804 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-10-31 22:54:08:805 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,148:26]
2023-10-31 22:54:08:805 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,148:57].[@-1,38:41='line',<0>,148:62]
2023-10-31 22:54:08:805 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,148:69].[@-1,50:52='pos',<0>,148:74]
2023-10-31 22:54:08:806 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,148:79].[@-1,60:60='e',<0>,148:84]
2023-10-31 22:54:08:806 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,148:88].[@-1,70:72='blk',<0>,148:94]
2023-10-31 22:54:08:807 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-10-31 22:54:08:807 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,152:39]
2023-10-31 22:54:08:807 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,152:71].[@-1,40:43='line',<0>,152:77]
2023-10-31 22:54:08:807 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,152:84].[@-1,53:55='pos',<0>,152:90]
2023-10-31 22:54:08:807 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,152:96].[@-1,64:64='e',<0>,152:101]
2023-10-31 22:54:08:808 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,152:105].[@-1,74:76='blk',<0>,152:111]
2023-10-31 22:54:08:809 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-10-31 22:54:08:809 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,156:74]
2023-10-31 22:54:08:810 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,156:102].[@-1,34:37='line',<0>,156:106]
2023-10-31 22:54:08:810 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,156:113].[@-1,45:47='pos',<0>,156:117]
2023-10-31 22:54:08:810 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,156:123].[@-1,54:57='text',<0>,156:126]
2023-10-31 22:54:08:810 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,156:133].[@-1,64:64='e',<0>,156:136]
2023-10-31 22:54:08:810 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,156:139].[@-1,70:70='e',<0>,156:142]
2023-10-31 22:54:08:810 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,156:152].[@-1,86:88='blk',<0>,156:158]
2023-10-31 22:54:08:810 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-10-31 22:54:08:810 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,157:78]
2023-10-31 22:54:08:810 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,157:106].[@-1,34:37='line',<0>,157:110]
2023-10-31 22:54:08:812 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,157:117].[@-1,45:47='pos',<0>,157:121]
2023-10-31 22:54:08:812 action-translator LogManager.java:25 qattr [@-1,51:56='GUIONB',<0>,157:127].[@-1,58:61='text',<0>,157:134]
2023-10-31 22:54:08:812 action-translator LogManager.java:25 qattr [@-1,65:66='e1',<0>,157:141].[@-1,68:68='e',<0>,157:144]
2023-10-31 22:54:08:812 action-translator LogManager.java:25 qattr [@-1,71:72='e2',<0>,157:147].[@-1,74:74='e',<0>,157:150]
2023-10-31 22:54:08:812 action-translator LogManager.java:25 qattr [@-1,84:88='block',<0>,157:160].[@-1,90:92='blk',<0>,157:166]
2023-10-31 22:54:08:814 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-10-31 22:54:08:814 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,158:56]
2023-10-31 22:54:08:815 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,158:84].[@-1,34:37='line',<0>,158:88]
2023-10-31 22:54:08:815 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,158:95].[@-1,45:47='pos',<0>,158:99]
2023-10-31 22:54:08:815 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,158:105].[@-1,54:57='text',<0>,158:108]
2023-10-31 22:54:08:815 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,158:124].[@-1,74:77='text',<0>,158:128]
2023-10-31 22:54:08:815 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,158:135].[@-1,87:89='blk',<0>,158:141]
2023-10-31 22:54:08:816 action-translator LogManager.java:25 translate $guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )
2023-10-31 22:54:08:816 action-translator LogManager.java:25 attr [@-1,1:5='guard',<0>,162:43]
2023-10-31 22:54:08:816 action-translator LogManager.java:25 qattr [@-1,33:37='GUARD',<0>,162:75].[@-1,39:42='line',<0>,162:81]
2023-10-31 22:54:08:816 action-translator LogManager.java:25 qattr [@-1,46:50='GUARD',<0>,162:88].[@-1,52:54='pos',<0>,162:94]
2023-10-31 22:54:08:816 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,162:100].[@-1,63:63='e',<0>,162:105]
2023-10-31 22:54:08:816 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,162:109].[@-1,73:75='blk',<0>,162:115]
2023-10-31 22:54:08:817 action-translator LogManager.java:25 translate  $break = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-10-31 22:54:08:817 action-translator LogManager.java:25 attr [@-1,2:6='break',<0>,166:10]
2023-10-31 22:54:08:817 action-translator LogManager.java:25 qattr [@-1,33:37='BREAK',<0>,166:41].[@-1,39:42='line',<0>,166:47]
2023-10-31 22:54:08:817 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,166:54].[@-1,52:54='pos',<0>,166:60]
2023-10-31 22:54:08:818 action-translator LogManager.java:25 translate  $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-10-31 22:54:08:818 action-translator LogManager.java:25 attr [@-1,2:9='continue',<0>,170:13]
2023-10-31 22:54:08:818 action-translator LogManager.java:25 qattr [@-1,39:46='CONTINUE',<0>,170:50].[@-1,48:51='line',<0>,170:59]
2023-10-31 22:54:08:819 action-translator LogManager.java:25 qattr [@-1,55:62='CONTINUE',<0>,170:66].[@-1,64:66='pos',<0>,170:75]
2023-10-31 22:54:08:820 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);
2023-10-31 22:54:08:820 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,175:30] [@-1,6:91=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)',<0>,175:35]
2023-10-31 22:54:08:821 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)
2023-10-31 22:54:08:821 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,175:59].[@-1,34:37='line',<0>,175:63]
2023-10-31 22:54:08:821 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,175:70].[@-1,45:47='pos',<0>,175:74]
2023-10-31 22:54:08:821 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,175:80].[@-1,54:57='text',<0>,175:83]
2023-10-31 22:54:08:822 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,175:90].[@-1,67:68='ty',<0>,175:96]
2023-10-31 22:54:08:822 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,175:101].[@-1,77:77='e',<0>,175:106]
2023-10-31 22:54:08:823 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);
2023-10-31 22:54:08:823 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,176:19] [@-1,6:98=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)',<0>,176:24]
2023-10-31 22:54:08:823 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-10-31 22:54:08:823 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,176:48].[@-1,34:37='line',<0>,176:52]
2023-10-31 22:54:08:823 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,176:59].[@-1,45:47='pos',<0>,176:63]
2023-10-31 22:54:08:824 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,176:69].[@-1,54:57='text',<0>,176:72]
2023-10-31 22:54:08:824 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,176:97].[@-1,84:84='e',<0>,176:102]
2023-10-31 22:54:08:824 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);
2023-10-31 22:54:08:825 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,177:19] [@-1,6:97=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)',<0>,177:24]
2023-10-31 22:54:08:825 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-10-31 22:54:08:825 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,177:48].[@-1,34:37='line',<0>,177:52]
2023-10-31 22:54:08:825 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,177:59].[@-1,45:47='pos',<0>,177:63]
2023-10-31 22:54:08:825 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,177:69].[@-1,54:57='text',<0>,177:72]
2023-10-31 22:54:08:827 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,177:97].[@-1,84:84='e',<0>,177:102]
2023-10-31 22:54:08:827 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);
2023-10-31 22:54:08:828 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,178:30] [@-1,6:90=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)',<0>,178:35]
2023-10-31 22:54:08:828 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)
2023-10-31 22:54:08:828 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,178:59].[@-1,34:37='line',<0>,178:63]
2023-10-31 22:54:08:829 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,178:70].[@-1,45:47='pos',<0>,178:74]
2023-10-31 22:54:08:829 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,178:80].[@-1,54:57='text',<0>,178:83]
2023-10-31 22:54:08:830 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,178:90].[@-1,67:68='ty',<0>,178:96]
2023-10-31 22:54:08:830 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,178:101].[@-1,77:77='e',<0>,178:106]
2023-10-31 22:54:08:830 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-10-31 22:54:08:831 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,182:8]
2023-10-31 22:54:08:831 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-10-31 22:54:08:831 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,183:10]
2023-10-31 22:54:08:831 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-10-31 22:54:08:832 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,184:8]
2023-10-31 22:54:08:832 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-10-31 22:54:08:832 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,185:9]
2023-10-31 22:54:08:832 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-10-31 22:54:08:833 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,186:18]
2023-10-31 22:54:08:836 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:836 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) 
2023-10-31 22:54:08:836 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-10-31 22:54:08:836 action-translator LogManager.java:25 attr [@-1,32:33='op',<0>,2:100]
2023-10-31 22:54:08:837 action-translator LogManager.java:25 attr [@-1,47:48='op',<0>,2:115]
2023-10-31 22:54:08:837 action-translator LogManager.java:25 qattr [@-1,64:68='right',<0>,2:132].[@-1,70:70='e',<0>,2:138]
2023-10-31 22:54:08:838 action-translator LogManager.java:25 qattr [@-1,81:85='right',<0>,2:149].[@-1,87:87='e',<0>,2:155]
2023-10-31 22:54:08:838 action-translator LogManager.java:25 translate  $e = $callFunction.cf 
2023-10-31 22:54:08:839 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:41]
2023-10-31 22:54:08:839 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,3:46].[@-1,20:21='cf',<0>,3:59]
2023-10-31 22:54:08:839 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-10-31 22:54:08:840 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:111]
2023-10-31 22:54:08:840 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,4:141].[@-1,35:38='line',<0>,4:144]
2023-10-31 22:54:08:840 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,4:151].[@-1,45:47='pos',<0>,4:154]
2023-10-31 22:54:08:840 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,4:160].[@-1,54:57='text',<0>,4:163]
2023-10-31 22:54:08:841 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,4:170].[@-1,75:75='l',<0>,4:184]
2023-10-31 22:54:08:841 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-31 22:54:08:842 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:79]
2023-10-31 22:54:08:842 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,5:84].[@-1,12:12='e',<0>,5:89]
2023-10-31 22:54:08:842 action-translator LogManager.java:25 translate  $e = $list.p
2023-10-31 22:54:08:842 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:43]
2023-10-31 22:54:08:843 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,6:48].[@-1,12:12='p',<0>,6:53]
2023-10-31 22:54:08:843 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-10-31 22:54:08:843 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:88]
2023-10-31 22:54:08:844 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,7:114].[@-1,35:38='line',<0>,7:121]
2023-10-31 22:54:08:844 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,7:128].[@-1,49:51='pos',<0>,7:135]
2023-10-31 22:54:08:844 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,7:141].[@-1,66:66='l',<0>,7:152]
2023-10-31 22:54:08:845 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER,  $expr.text) 
2023-10-31 22:54:08:845 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:103]
2023-10-31 22:54:08:845 action-translator LogManager.java:25 attr [@-1,33:35='INT',<0>,8:134]
2023-10-31 22:54:08:845 action-translator LogManager.java:25 attr [@-1,48:50='INT',<0>,8:149]
2023-10-31 22:54:08:846 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,8:166].[@-1,70:70='e',<0>,8:171]
2023-10-31 22:54:08:846 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,8:197].[@-1,101:104='text',<0>,8:202]
2023-10-31 22:54:08:847 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING, $expr.text) 
2023-10-31 22:54:08:847 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:103]
2023-10-31 22:54:08:847 action-translator LogManager.java:25 attr [@-1,33:35='STR',<0>,9:134]
2023-10-31 22:54:08:848 action-translator LogManager.java:25 attr [@-1,48:50='STR',<0>,9:149]
2023-10-31 22:54:08:848 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,9:166].[@-1,70:70='e',<0>,9:171]
2023-10-31 22:54:08:849 action-translator LogManager.java:25 qattr [@-1,94:97='expr',<0>,9:195].[@-1,99:102='text',<0>,9:200]
2023-10-31 22:54:08:849 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT, $expr.text) 
2023-10-31 22:54:08:850 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,10:105]
2023-10-31 22:54:08:850 action-translator LogManager.java:25 attr [@-1,33:37='FLOAT',<0>,10:136]
2023-10-31 22:54:08:850 action-translator LogManager.java:25 attr [@-1,50:54='FLOAT',<0>,10:153]
2023-10-31 22:54:08:851 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,10:172].[@-1,74:74='e',<0>,10:177]
2023-10-31 22:54:08:851 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,10:200].[@-1,102:105='text',<0>,10:205]
2023-10-31 22:54:08:852 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-31 22:54:08:852 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,13:30].[@-1,39:42='text',<0>,13:37]
2023-10-31 22:54:08:853 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,14:43].[@-1,102:105='text',<0>,14:50]
2023-10-31 22:54:08:853 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,18:13]
2023-10-31 22:54:08:853 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,18:43].[@-1,240:243='line',<0>,18:50]
2023-10-31 22:54:08:854 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,18:56].[@-1,253:255='pos',<0>,18:63]
2023-10-31 22:54:08:854 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,20:37].[@-1,341:344='text',<0>,20:44]
2023-10-31 22:54:08:855 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,24:13]
2023-10-31 22:54:08:855 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,24:43].[@-1,474:477='line',<0>,24:50]
2023-10-31 22:54:08:855 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,24:56].[@-1,487:489='pos',<0>,24:63]
2023-10-31 22:54:08:855 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-31 22:54:08:857 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,29:16].[@-1,25:28='text',<0>,29:23]
2023-10-31 22:54:08:857 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,30:9]
2023-10-31 22:54:08:857 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,30:39].[@-1,77:80='line',<0>,30:46]
2023-10-31 22:54:08:858 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,30:53].[@-1,91:93='pos',<0>,30:60]
2023-10-31 22:54:08:858 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-31 22:54:08:858 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:33]
2023-10-31 22:54:08:858 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,32:63].[@-1,36:39='line',<0>,32:67]
2023-10-31 22:54:08:859 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,32:74].[@-1,47:49='pos',<0>,32:78]
2023-10-31 22:54:08:859 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-31 22:54:08:859 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:33]
2023-10-31 22:54:08:859 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,33:63].[@-1,36:39='line',<0>,33:67]
2023-10-31 22:54:08:860 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,33:74].[@-1,47:49='pos',<0>,33:78]
2023-10-31 22:54:08:860 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-31 22:54:08:861 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-31 22:54:08:861 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:162]
2023-10-31 22:54:08:861 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:192].[@-1,37:41='start',<0>,36:197]
2023-10-31 22:54:08:861 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:215].[@-1,60:64='start',<0>,36:220]
2023-10-31 22:54:08:862 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:240].[@-1,85:85='e',<0>,36:245]
2023-10-31 22:54:08:862 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:249].[@-1,92:95='text',<0>,36:252]
2023-10-31 22:54:08:862 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:259].[@-1,105:105='e',<0>,36:265]
2023-10-31 22:54:08:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-31 22:54:08:863 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-31 22:54:08:863 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:149]
2023-10-31 22:54:08:863 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:179].[@-1,37:41='start',<0>,37:184]
2023-10-31 22:54:08:864 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:202].[@-1,60:64='start',<0>,37:207]
2023-10-31 22:54:08:864 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:227].[@-1,85:85='e',<0>,37:232]
2023-10-31 22:54:08:864 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:236].[@-1,92:95='text',<0>,37:239]
2023-10-31 22:54:08:864 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:246].[@-1,105:105='e',<0>,37:252]
2023-10-31 22:54:08:864 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-31 22:54:08:865 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-31 22:54:08:865 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:154]
2023-10-31 22:54:08:865 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:184].[@-1,37:41='start',<0>,38:189]
2023-10-31 22:54:08:865 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:207].[@-1,60:64='start',<0>,38:212]
2023-10-31 22:54:08:865 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:232].[@-1,85:85='e',<0>,38:237]
2023-10-31 22:54:08:865 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:241].[@-1,92:95='text',<0>,38:244]
2023-10-31 22:54:08:866 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:251].[@-1,105:105='e',<0>,38:257]
2023-10-31 22:54:08:866 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-31 22:54:08:866 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-31 22:54:08:867 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:154]
2023-10-31 22:54:08:867 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:184].[@-1,37:41='start',<0>,39:189]
2023-10-31 22:54:08:867 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:207].[@-1,60:64='start',<0>,39:212]
2023-10-31 22:54:08:867 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:232].[@-1,85:85='e',<0>,39:237]
2023-10-31 22:54:08:867 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:241].[@-1,92:95='text',<0>,39:244]
2023-10-31 22:54:08:867 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:251].[@-1,105:105='e',<0>,39:257]
2023-10-31 22:54:08:867 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-31 22:54:08:868 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-31 22:54:08:868 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:151]
2023-10-31 22:54:08:868 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:181].[@-1,37:41='start',<0>,40:186]
2023-10-31 22:54:08:868 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:204].[@-1,60:64='start',<0>,40:209]
2023-10-31 22:54:08:869 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:229].[@-1,85:85='e',<0>,40:234]
2023-10-31 22:54:08:869 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:238].[@-1,92:95='text',<0>,40:241]
2023-10-31 22:54:08:869 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:248].[@-1,105:105='e',<0>,40:254]
2023-10-31 22:54:08:869 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-31 22:54:08:869 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-31 22:54:08:869 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:127]
2023-10-31 22:54:08:869 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:157].[@-1,37:41='start',<0>,41:162]
2023-10-31 22:54:08:870 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:180].[@-1,60:64='start',<0>,41:185]
2023-10-31 22:54:08:870 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:205].[@-1,85:85='e',<0>,41:210]
2023-10-31 22:54:08:870 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:214].[@-1,92:95='text',<0>,41:217]
2023-10-31 22:54:08:870 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:224].[@-1,105:105='e',<0>,41:230]
2023-10-31 22:54:08:870 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-31 22:54:08:870 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-31 22:54:08:871 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:126]
2023-10-31 22:54:08:871 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:156].[@-1,37:41='start',<0>,42:161]
2023-10-31 22:54:08:871 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:179].[@-1,60:64='start',<0>,42:184]
2023-10-31 22:54:08:871 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:204].[@-1,85:85='e',<0>,42:209]
2023-10-31 22:54:08:871 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:213].[@-1,92:95='text',<0>,42:216]
2023-10-31 22:54:08:871 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:223].[@-1,105:105='e',<0>,42:229]
2023-10-31 22:54:08:872 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-31 22:54:08:872 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-31 22:54:08:872 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-31 22:54:08:872 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-31 22:54:08:873 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-31 22:54:08:873 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-31 22:54:08:873 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-31 22:54:08:874 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:875 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-31 22:54:08:875 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-31 22:54:08:875 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-31 22:54:08:875 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-31 22:54:08:875 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-31 22:54:08:875 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-31 22:54:08:876 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-31 22:54:08:876 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-31 22:54:08:877 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-31 22:54:08:877 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-31 22:54:08:877 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-31 22:54:08:878 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:878 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-10-31 22:54:08:879 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-10-31 22:54:08:879 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-10-31 22:54:08:880 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-10-31 22:54:08:880 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-10-31 22:54:08:881 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:881 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-10-31 22:54:08:881 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:130]
2023-10-31 22:54:08:881 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:162].[@-1,39:43='start',<0>,5:167]
2023-10-31 22:54:08:881 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:185].[@-1,62:66='start',<0>,5:190]
2023-10-31 22:54:08:882 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:210].[@-1,87:87='p',<0>,5:215]
2023-10-31 22:54:08:882 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:219].[@-1,96:96='e',<0>,5:224]
2023-10-31 22:54:08:882 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-31 22:54:08:882 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-10-31 22:54:08:882 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-10-31 22:54:08:883 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-10-31 22:54:08:883 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-10-31 22:54:08:883 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-10-31 22:54:08:883 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-10-31 22:54:08:884 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:884 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-31 22:54:08:885 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-31 22:54:08:885 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,250:36]
2023-10-31 22:54:08:885 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,250:65].[@-1,34:37='line',<0>,250:68]
2023-10-31 22:54:08:885 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,250:75].[@-1,44:46='pos',<0>,250:78]
2023-10-31 22:54:08:885 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,250:84].[@-1,53:56='text',<0>,250:87]
2023-10-31 22:54:08:887 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,250:94].[@-1,75:75='l',<0>,250:109]
2023-10-31 22:54:08:887 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:887 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-31 22:54:08:888 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-31 22:54:08:888 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-31 22:54:08:888 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-31 22:54:08:889 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-31 22:54:08:889 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-31 22:54:08:889 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-31 22:54:08:890 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:890 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-10-31 22:54:08:890 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-10-31 22:54:08:891 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-10-31 22:54:08:891 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-10-31 22:54:08:891 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:892 action-translator LogManager.java:25 translate 
2023-10-31 22:54:08:892 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-10-31 22:54:08:892 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-10-31 22:54:08:892 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-10-31 22:54:08:893 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-10-31 22:54:08:893 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-31 22:54:08:893 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-10-31 22:54:08:893 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:08:893 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-10-31 22:54:08:893 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-10-31 22:54:08:893 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-10-31 22:54:08:893 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-10-31 22:54:08:893 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-10-31 22:54:08:894 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-31 22:54:09:157 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-31 22:54:09:157 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-31 22:54:09:201 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-31 22:54:09:201 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

