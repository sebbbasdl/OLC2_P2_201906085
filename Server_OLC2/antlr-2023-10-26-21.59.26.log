2023-10-26 21:59:25:550 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-26 21:59:25:572 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-26 21:59:25:975 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-26 21:59:25:984 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-26 21:59:25:986 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT assignment { $inst = $assignment.ass }) (ALT function { $inst = $function.fun }) (ALT structCreation { $inst = $structCreation.dec }) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IG expr { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-26 21:59:25:986 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-10-26 21:59:26:013 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=168> ID<tokenIndex=170> D_PTS<tokenIndex=172> types<tokenIndex=174> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=154> VAR<tokenIndex=156> ID<tokenIndex=158> D_PTS<tokenIndex=160> types<tokenIndex=162> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-10-26 21:59:26:024 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 168))) (ID (ELEMENT_OPTIONS (= tokenIndex 170))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 172))) (types (ELEMENT_OPTIONS (= tokenIndex 174))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 154))) (VAR (ELEMENT_OPTIONS (= tokenIndex 156))) (ID (ELEMENT_OPTIONS (= tokenIndex 158))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 160))) (types (ELEMENT_OPTIONS (= tokenIndex 162))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-10-26 21:59:26:025 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lpf]
    :   ( {} ID<tokenIndex=259> D_PTS<tokenIndex=261> types<tokenIndex=263> {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | { $lpf = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=247> ID<tokenIndex=249> D_PTS<tokenIndex=251> types<tokenIndex=253> {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
        )*
    ;
2023-10-26 21:59:26:028 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 259))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 261))) (types (ELEMENT_OPTIONS (= tokenIndex 263))) {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 247))) (ID (ELEMENT_OPTIONS (= tokenIndex 249))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 251))) (types (ELEMENT_OPTIONS (= tokenIndex 253))) {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }))))))
2023-10-26 21:59:26:028 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=420>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=414> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-10-26 21:59:26:031 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 420))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 414))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-10-26 21:59:26:031 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=496>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=490> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-10-26 21:59:26:033 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 496))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 490))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-10-26 21:59:26:036 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=SUB<tokenIndex=755> right=expr<tokenIndex=759,p=17> { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) } 
        | callFunction<tokenIndex=897> { $e = $callFunction.cf } 
        | ID<tokenIndex=903> LLAVEIZQ<tokenIndex=905> listStructExp<tokenIndex=907> LLAVEDER<tokenIndex=909> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | PARIZQ<tokenIndex=915> expr<tokenIndex=917> PARDER<tokenIndex=919> { $e = $expr.e } 
        | list=listArray<tokenIndex=927> { $e = $list.p} 
        | CORIZQ<tokenIndex=933> listParams<tokenIndex=935> CORDER<tokenIndex=937> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=943>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=949>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=955> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=961> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MUL<tokenIndex=772>|DIV<tokenIndex=774>) right=expr<tokenIndex=779,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(ADD<tokenIndex=792>|SUB<tokenIndex=794>) right=expr<tokenIndex=799,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MAY_IG<tokenIndex=812>|MAYOR<tokenIndex=814>) right=expr<tokenIndex=819,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MEN_IG<tokenIndex=832>|MENOR<tokenIndex=834>) right=expr<tokenIndex=839,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(IG_IG<tokenIndex=852>|DIF<tokenIndex=854>) right=expr<tokenIndex=859,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=AND<tokenIndex=871> right=expr<tokenIndex=875,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=OR<tokenIndex=887> right=expr<tokenIndex=891,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-26 21:59:26:046 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 755)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 759) (= p 17)))) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 897))) { $e = $callFunction.cf }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 903))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 905))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 907))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 909))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 915))) (expr (ELEMENT_OPTIONS (= tokenIndex 917))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 919))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 927)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 933))) (listParams (ELEMENT_OPTIONS (= tokenIndex 935))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 937))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 943))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 949))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 955))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 961))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 772))) (DIV (ELEMENT_OPTIONS (= tokenIndex 774))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 779) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 792))) (SUB (ELEMENT_OPTIONS (= tokenIndex 794))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 799) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 812))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 814))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 819) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 832))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 834))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 839) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 852))) (DIF (ELEMENT_OPTIONS (= tokenIndex 854))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 859) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 871)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 875) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 887)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 891) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-26 21:59:26:047 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=986> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=978> expr<tokenIndex=980> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-26 21:59:26:048 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 986))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 978))) (expr (ELEMENT_OPTIONS (= tokenIndex 980))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-26 21:59:26:049 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1029> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=1005> expr<tokenIndex=1007> CORDER<tokenIndex=1009> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1021> ID<tokenIndex=1023> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2023-10-26 21:59:26:051 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1029))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1005))) (expr (ELEMENT_OPTIONS (= tokenIndex 1007))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1009))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1021))) (ID (ELEMENT_OPTIONS (= tokenIndex 1023))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2023-10-26 21:59:26:052 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1073>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1065> expr<tokenIndex=1067> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-10-26 21:59:26:054 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1073))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1065))) (expr (ELEMENT_OPTIONS (= tokenIndex 1067))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-10-26 21:59:26:055 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1106> D_PTS<tokenIndex=1108> expr<tokenIndex=1110>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1094> ID<tokenIndex=1096> D_PTS<tokenIndex=1098> expr<tokenIndex=1100> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-10-26 21:59:26:059 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1106))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1108))) (expr (ELEMENT_OPTIONS (= tokenIndex 1110))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1094))) (ID (ELEMENT_OPTIONS (= tokenIndex 1096))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1098))) (expr (ELEMENT_OPTIONS (= tokenIndex 1100))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-10-26 21:59:26:073 grammar LogManager.java:25 import INT=1
2023-10-26 21:59:26:073 grammar LogManager.java:25 import FLOAT=2
2023-10-26 21:59:26:073 grammar LogManager.java:25 import BOOL=3
2023-10-26 21:59:26:073 grammar LogManager.java:25 import STR=4
2023-10-26 21:59:26:073 grammar LogManager.java:25 import TRU=5
2023-10-26 21:59:26:073 grammar LogManager.java:25 import FAL=6
2023-10-26 21:59:26:074 grammar LogManager.java:25 import PRINT=7
2023-10-26 21:59:26:074 grammar LogManager.java:25 import IF=8
2023-10-26 21:59:26:074 grammar LogManager.java:25 import ELSE=9
2023-10-26 21:59:26:074 grammar LogManager.java:25 import WHILE=10
2023-10-26 21:59:26:074 grammar LogManager.java:25 import FOR=11
2023-10-26 21:59:26:075 grammar LogManager.java:25 import SWITCH=12
2023-10-26 21:59:26:075 grammar LogManager.java:25 import CASE=13
2023-10-26 21:59:26:075 grammar LogManager.java:25 import DEFAULT=14
2023-10-26 21:59:26:075 grammar LogManager.java:25 import IN=15
2023-10-26 21:59:26:075 grammar LogManager.java:25 import VAR=16
2023-10-26 21:59:26:075 grammar LogManager.java:25 import LET=17
2023-10-26 21:59:26:076 grammar LogManager.java:25 import BREAK=18
2023-10-26 21:59:26:076 grammar LogManager.java:25 import CONTINUE=19
2023-10-26 21:59:26:076 grammar LogManager.java:25 import RETURN=20
2023-10-26 21:59:26:076 grammar LogManager.java:25 import GUARD=21
2023-10-26 21:59:26:076 grammar LogManager.java:25 import APPEND=22
2023-10-26 21:59:26:077 grammar LogManager.java:25 import REMOVELAST=23
2023-10-26 21:59:26:077 grammar LogManager.java:25 import REMOVE=24
2023-10-26 21:59:26:077 grammar LogManager.java:25 import COUNT=25
2023-10-26 21:59:26:078 grammar LogManager.java:25 import ISEMPTY=26
2023-10-26 21:59:26:078 grammar LogManager.java:25 import AT=27
2023-10-26 21:59:26:078 grammar LogManager.java:25 import FUNC=28
2023-10-26 21:59:26:078 grammar LogManager.java:25 import STRUCT=29
2023-10-26 21:59:26:079 grammar LogManager.java:25 import NUMBER=30
2023-10-26 21:59:26:079 grammar LogManager.java:25 import STRING=31
2023-10-26 21:59:26:079 grammar LogManager.java:25 import ID=32
2023-10-26 21:59:26:080 grammar LogManager.java:25 import DIF=33
2023-10-26 21:59:26:080 grammar LogManager.java:25 import IG_IG=34
2023-10-26 21:59:26:080 grammar LogManager.java:25 import NOT=35
2023-10-26 21:59:26:080 grammar LogManager.java:25 import OR=36
2023-10-26 21:59:26:080 grammar LogManager.java:25 import AND=37
2023-10-26 21:59:26:080 grammar LogManager.java:25 import IG=38
2023-10-26 21:59:26:080 grammar LogManager.java:25 import MAY_IG=39
2023-10-26 21:59:26:082 grammar LogManager.java:25 import MEN_IG=40
2023-10-26 21:59:26:082 grammar LogManager.java:25 import MAYOR=41
2023-10-26 21:59:26:082 grammar LogManager.java:25 import MENOR=42
2023-10-26 21:59:26:083 grammar LogManager.java:25 import MUL=43
2023-10-26 21:59:26:083 grammar LogManager.java:25 import DIV=44
2023-10-26 21:59:26:083 grammar LogManager.java:25 import ADD=45
2023-10-26 21:59:26:083 grammar LogManager.java:25 import SUB=46
2023-10-26 21:59:26:083 grammar LogManager.java:25 import PARIZQ=47
2023-10-26 21:59:26:083 grammar LogManager.java:25 import PARDER=48
2023-10-26 21:59:26:084 grammar LogManager.java:25 import LLAVEIZQ=49
2023-10-26 21:59:26:084 grammar LogManager.java:25 import LLAVEDER=50
2023-10-26 21:59:26:084 grammar LogManager.java:25 import D_PTS=51
2023-10-26 21:59:26:084 grammar LogManager.java:25 import CORIZQ=52
2023-10-26 21:59:26:084 grammar LogManager.java:25 import CORDER=53
2023-10-26 21:59:26:085 grammar LogManager.java:25 import COMA=54
2023-10-26 21:59:26:085 grammar LogManager.java:25 import ARROW1=55
2023-10-26 21:59:26:085 grammar LogManager.java:25 import PUNTO=56
2023-10-26 21:59:26:085 grammar LogManager.java:25 import MODULO=57
2023-10-26 21:59:26:086 grammar LogManager.java:25 import GUIONB=58
2023-10-26 21:59:26:086 grammar LogManager.java:25 import WHITESPACE=59
2023-10-26 21:59:26:086 grammar LogManager.java:25 import COMMENT=60
2023-10-26 21:59:26:086 grammar LogManager.java:25 import LINE_COMMENT=61
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'Int'=1
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'Float'=2
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'Bool'=3
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'String'=4
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'true'=5
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'false'=6
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'print'=7
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'if'=8
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'else'=9
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'while'=10
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'for'=11
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'switch'=12
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'case'=13
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'default'=14
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'in'=15
2023-10-26 21:59:26:086 grammar LogManager.java:25 import 'var'=16
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'let'=17
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'break'=18
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'continue'=19
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'return'=20
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'guard'=21
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'append'=22
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'removeLast'=23
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'remove'=24
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'count'=25
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'isEmpty'=26
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'at'=27
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'func'=28
2023-10-26 21:59:26:087 grammar LogManager.java:25 import 'struct'=29
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '!='=33
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '=='=34
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '!'=35
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '||'=36
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '&&'=37
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '='=38
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '>='=39
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '<='=40
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '>'=41
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '<'=42
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '*'=43
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '/'=44
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '+'=45
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '-'=46
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '('=47
2023-10-26 21:59:26:088 grammar LogManager.java:25 import ')'=48
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '{'=49
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '}'=50
2023-10-26 21:59:26:088 grammar LogManager.java:25 import ':'=51
2023-10-26 21:59:26:088 grammar LogManager.java:25 import '['=52
2023-10-26 21:59:26:088 grammar LogManager.java:25 import ']'=53
2023-10-26 21:59:26:089 grammar LogManager.java:25 import ','=54
2023-10-26 21:59:26:089 grammar LogManager.java:25 import '->'=55
2023-10-26 21:59:26:089 grammar LogManager.java:25 import '.'=56
2023-10-26 21:59:26:089 grammar LogManager.java:25 import '%'=57
2023-10-26 21:59:26:089 grammar LogManager.java:25 import '_'=58
2023-10-26 21:59:26:089 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-10-26 21:59:26:089 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61}
2023-10-26 21:59:26:089 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-10-26 21:59:26:130 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-26 21:59:26:130 LL1 LogManager.java:25 look=[{7..8, 10..12, 16..17, 28..29, 32}, null]
2023-10-26 21:59:26:130 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:130 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-26 21:59:26:130 LL1 LogManager.java:25 look=[7, 8, {16..17}, 32, 28, 29, 10, 11, 12]
2023-10-26 21:59:26:130 LL1 LogManager.java:25 LL(1)? true
2023-10-26 21:59:26:130 LL1 LogManager.java:25 
DECISION 2 in rule listStructDec
2023-10-26 21:59:26:132 LL1 LogManager.java:25 look=[16, null]
2023-10-26 21:59:26:132 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:132 LL1 LogManager.java:25 
DECISION 3 in rule listStructDec
2023-10-26 21:59:26:132 LL1 LogManager.java:25 look=[null, 50]
2023-10-26 21:59:26:132 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:132 LL1 LogManager.java:25 
DECISION 4 in rule function
2023-10-26 21:59:26:132 LL1 LogManager.java:25 look=[28, 28]
2023-10-26 21:59:26:132 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:132 LL1 LogManager.java:25 
DECISION 5 in rule listParamsFunc
2023-10-26 21:59:26:132 LL1 LogManager.java:25 look=[32, null]
2023-10-26 21:59:26:133 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:133 LL1 LogManager.java:25 
DECISION 6 in rule listParamsFunc
2023-10-26 21:59:26:133 LL1 LogManager.java:25 look=[null, 48]
2023-10-26 21:59:26:133 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:133 LL1 LogManager.java:25 
DECISION 7 in rule ifstmt
2023-10-26 21:59:26:133 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-10-26 21:59:26:133 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:133 LL1 LogManager.java:25 
DECISION 8 in rule elseiflist
2023-10-26 21:59:26:134 LL1 LogManager.java:25 look=[null, null]
2023-10-26 21:59:26:134 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:134 LL1 LogManager.java:25 
DECISION 9 in rule caselist
2023-10-26 21:59:26:134 LL1 LogManager.java:25 look=[null, 14]
2023-10-26 21:59:26:134 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:134 LL1 LogManager.java:25 
DECISION 10 in rule forstmt
2023-10-26 21:59:26:134 LL1 LogManager.java:25 look=[11, 11, 11]
2023-10-26 21:59:26:134 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:134 LL1 LogManager.java:25 
DECISION 11 in rule declarationstmt
2023-10-26 21:59:26:134 LL1 LogManager.java:25 look=[16, 16, 17, 17]
2023-10-26 21:59:26:134 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:134 LL1 LogManager.java:25 
DECISION 12 in rule types
2023-10-26 21:59:26:135 LL1 LogManager.java:25 look=[1, 2, 4, 3, 52]
2023-10-26 21:59:26:135 LL1 LogManager.java:25 LL(1)? true
2023-10-26 21:59:26:135 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-10-26 21:59:26:135 LL1 LogManager.java:25 look=[46, 32, 32, 47, 32, 52, 30, 31, 5, 6]
2023-10-26 21:59:26:135 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:135 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-10-26 21:59:26:135 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-10-26 21:59:26:135 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:135 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-10-26 21:59:26:137 LL1 LogManager.java:25 look=[null, null]
2023-10-26 21:59:26:137 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:137 LL1 LogManager.java:25 
DECISION 16 in rule listParams
2023-10-26 21:59:26:137 LL1 LogManager.java:25 look=[null, 53]
2023-10-26 21:59:26:137 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:137 LL1 LogManager.java:25 
DECISION 17 in rule listArray
2023-10-26 21:59:26:137 LL1 LogManager.java:25 look=[null, null]
2023-10-26 21:59:26:137 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:137 LL1 LogManager.java:25 
DECISION 18 in rule listArray
2023-10-26 21:59:26:137 LL1 LogManager.java:25 look=[null, null]
2023-10-26 21:59:26:137 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:137 LL1 LogManager.java:25 
DECISION 19 in rule listParamsCall
2023-10-26 21:59:26:138 LL1 LogManager.java:25 look=[{5..6, 30..32, 46..47, 52}, null]
2023-10-26 21:59:26:138 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:138 LL1 LogManager.java:25 
DECISION 20 in rule listParamsCall
2023-10-26 21:59:26:138 LL1 LogManager.java:25 look=[null, 48]
2023-10-26 21:59:26:138 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:138 LL1 LogManager.java:25 
DECISION 21 in rule listStructExp
2023-10-26 21:59:26:138 LL1 LogManager.java:25 look=[32, null]
2023-10-26 21:59:26:138 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:138 LL1 LogManager.java:25 
DECISION 22 in rule listStructExp
2023-10-26 21:59:26:138 LL1 LogManager.java:25 look=[null, 50]
2023-10-26 21:59:26:138 LL1 LogManager.java:25 LL(1)? false
2023-10-26 21:59:26:145 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-26 21:59:26:159 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-26 21:59:26:159 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-10-26 21:59:26:160 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-10-26 21:59:26:162 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-26 21:59:26:162 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-10-26 21:59:26:164 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-26 21:59:26:164 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-10-26 21:59:26:164 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-10-26 21:59:26:165 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-26 21:59:26:166 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-10-26 21:59:26:166 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-10-26 21:59:26:167 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-10-26 21:59:26:167 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-10-26 21:59:26:167 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-10-26 21:59:26:168 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-10-26 21:59:26:168 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-10-26 21:59:26:169 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-10-26 21:59:26:169 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2023-10-26 21:59:26:169 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-10-26 21:59:26:169 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,42:23].[@-1,21:23='ass',<0>,42:34]
2023-10-26 21:59:26:169 action-translator LogManager.java:25 translate  $inst = $function.fun 
2023-10-26 21:59:26:170 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:13]
2023-10-26 21:59:26:170 action-translator LogManager.java:25 qattr [@-1,10:17='function',<0>,43:21].[@-1,19:21='fun',<0>,43:30]
2023-10-26 21:59:26:170 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-10-26 21:59:26:170 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:19]
2023-10-26 21:59:26:170 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,44:27].[@-1,25:27='dec',<0>,44:42]
2023-10-26 21:59:26:171 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-10-26 21:59:26:171 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-10-26 21:59:26:171 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,45:22].[@-1,20:25='whiles',<0>,45:32]
2023-10-26 21:59:26:171 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-10-26 21:59:26:172 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:12]
2023-10-26 21:59:26:172 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,46:20].[@-1,18:21='fors',<0>,46:28]
2023-10-26 21:59:26:172 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-10-26 21:59:26:172 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-10-26 21:59:26:173 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,47:22].[@-1,20:24='swtch',<0>,47:32]
2023-10-26 21:59:26:174 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-10-26 21:59:26:174 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,51:46]
2023-10-26 21:59:26:174 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,51:76].[@-1,39:42='line',<0>,51:83]
2023-10-26 21:59:26:176 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,51:90].[@-1,53:55='pos',<0>,51:97]
2023-10-26 21:59:26:176 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,51:103].[@-1,62:65='text',<0>,51:106]
2023-10-26 21:59:26:177 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,51:113].[@-1,83:83='l',<0>,51:127]
2023-10-26 21:59:26:180 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:180 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-10-26 21:59:26:181 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-10-26 21:59:26:181 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-10-26 21:59:26:182 action-translator LogManager.java:25 attr [@-1,213:213='l',<0>,6:25]
2023-10-26 21:59:26:182 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-10-26 21:59:26:183 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-10-26 21:59:26:184 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:184 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-10-26 21:59:26:184 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,13:98].[@-1,184:187='text',<0>,13:101]
2023-10-26 21:59:26:185 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,13:108].[@-1,197:198='ty',<0>,13:114]
2023-10-26 21:59:26:185 action-translator LogManager.java:25 qattr [@-1,274:277='list',<0>,14:72].[@-1,279:279='l',<0>,14:77]
2023-10-26 21:59:26:185 action-translator LogManager.java:25 attr [@-1,353:353='l',<0>,15:59]
2023-10-26 21:59:26:186 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:187 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)

2023-10-26 21:59:26:187 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,73:5]
2023-10-26 21:59:26:188 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,73:37].[@-1,43:46='line',<0>,73:42]
2023-10-26 21:59:26:188 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,73:49].[@-1,55:57='pos',<0>,73:54]
2023-10-26 21:59:26:188 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,73:60].[@-1,64:67='text',<0>,73:63]
2023-10-26 21:59:26:189 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,73:70].[@-1,86:88='lpf',<0>,73:85]
2023-10-26 21:59:26:189 action-translator LogManager.java:25 qattr [@-1,110:114='block',<0>,73:109].[@-1,116:118='blk',<0>,73:115]
2023-10-26 21:59:26:191 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)

2023-10-26 21:59:26:191 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,77:5]
2023-10-26 21:59:26:192 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,77:37].[@-1,43:46='line',<0>,77:42]
2023-10-26 21:59:26:192 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,77:49].[@-1,55:57='pos',<0>,77:54]
2023-10-26 21:59:26:192 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,77:60].[@-1,64:67='text',<0>,77:63]
2023-10-26 21:59:26:193 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,77:70].[@-1,86:88='lpf',<0>,77:85]
2023-10-26 21:59:26:193 action-translator LogManager.java:25 qattr [@-1,92:96='types',<0>,77:91].[@-1,98:99='ty',<0>,77:97]
2023-10-26 21:59:26:194 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,77:102].[@-1,109:111='blk',<0>,77:108]
2023-10-26 21:59:26:195 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:195 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-10-26 21:59:26:195 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,3:5]
2023-10-26 21:59:26:196 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,4:51].[@-1,84:87='line',<0>,4:54]
2023-10-26 21:59:26:196 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,4:61].[@-1,94:96='pos',<0>,4:64]
2023-10-26 21:59:26:196 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,4:70].[@-1,103:106='text',<0>,4:73]
2023-10-26 21:59:26:197 action-translator LogManager.java:25 qattr [@-1,110:114='types',<0>,4:80].[@-1,116:117='ty',<0>,4:86]
2023-10-26 21:59:26:197 action-translator LogManager.java:25 attr [@-1,126:128='lpf',<0>,5:5]
2023-10-26 21:59:26:197 action-translator LogManager.java:25 attr [@-1,140:142='lpf',<0>,5:19]
2023-10-26 21:59:26:197 action-translator LogManager.java:25 translate  $lpf = []interface{}{} 
2023-10-26 21:59:26:197 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,7:12]
2023-10-26 21:59:26:197 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:198 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-10-26 21:59:26:198 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,12:61].[@-1,103:106='line',<0>,12:64]
2023-10-26 21:59:26:198 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,12:71].[@-1,113:115='pos',<0>,12:74]
2023-10-26 21:59:26:198 action-translator LogManager.java:25 qattr [@-1,119:120='ID',<0>,12:80].[@-1,122:125='text',<0>,12:83]
2023-10-26 21:59:26:199 action-translator LogManager.java:25 qattr [@-1,129:133='types',<0>,12:90].[@-1,135:136='ty',<0>,12:96]
2023-10-26 21:59:26:199 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,13:28].[@-1,173:175='lpf',<0>,13:33]
2023-10-26 21:59:26:199 action-translator LogManager.java:25 attr [@-1,204:206='lpf',<0>,14:15]
2023-10-26 21:59:26:199 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:200 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-26 21:59:26:200 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,97:15]
2023-10-26 21:59:26:200 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,97:49].[@-1,39:42='line',<0>,97:52]
2023-10-26 21:59:26:200 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,97:59].[@-1,49:51='pos',<0>,97:62]
2023-10-26 21:59:26:200 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,97:68].[@-1,58:61='text',<0>,97:71]
2023-10-26 21:59:26:200 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,97:78].[@-1,70:70='e',<0>,97:83]
2023-10-26 21:59:26:202 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-10-26 21:59:26:202 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,101:29]
2023-10-26 21:59:26:203 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,101:59].[@-1,38:41='line',<0>,101:65]
2023-10-26 21:59:26:203 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,101:71].[@-1,50:52='pos',<0>,101:77]
2023-10-26 21:59:26:203 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,101:82].[@-1,60:60='e',<0>,101:87]
2023-10-26 21:59:26:206 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-10-26 21:59:26:207 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,105:36]
2023-10-26 21:59:26:207 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,105:65].[@-1,34:37='line',<0>,105:68]
2023-10-26 21:59:26:207 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,105:75].[@-1,44:46='pos',<0>,105:78]
2023-10-26 21:59:26:207 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,105:84].[@-1,55:55='e',<0>,105:89]
2023-10-26 21:59:26:208 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,105:93].[@-1,65:67='blk',<0>,105:99]
2023-10-26 21:59:26:208 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-10-26 21:59:26:208 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,106:69]
2023-10-26 21:59:26:208 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,106:98].[@-1,33:36='line',<0>,106:101]
2023-10-26 21:59:26:208 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,106:108].[@-1,43:45='pos',<0>,106:111]
2023-10-26 21:59:26:209 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,106:117].[@-1,54:54='e',<0>,106:122]
2023-10-26 21:59:26:209 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,106:126].[@-1,61:63='blk',<0>,106:129]
2023-10-26 21:59:26:209 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,106:140].[@-1,75:77='blk',<0>,106:143]
2023-10-26 21:59:26:209 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-10-26 21:59:26:210 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,107:47]
2023-10-26 21:59:26:210 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,107:76].[@-1,34:37='line',<0>,107:79]
2023-10-26 21:59:26:210 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,107:86].[@-1,44:46='pos',<0>,107:89]
2023-10-26 21:59:26:210 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,107:95].[@-1,55:55='e',<0>,107:100]
2023-10-26 21:59:26:210 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,107:104].[@-1,65:67='blk',<0>,107:110]
2023-10-26 21:59:26:211 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,107:116].[@-1,82:93='else_if_list',<0>,107:127]
2023-10-26 21:59:26:211 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-10-26 21:59:26:212 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,108:82]
2023-10-26 21:59:26:212 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,108:111].[@-1,34:37='line',<0>,108:114]
2023-10-26 21:59:26:212 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,108:121].[@-1,44:46='pos',<0>,108:124]
2023-10-26 21:59:26:213 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,108:130].[@-1,55:55='e',<0>,108:135]
2023-10-26 21:59:26:213 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,108:139].[@-1,62:64='blk',<0>,108:142]
2023-10-26 21:59:26:213 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,108:148].[@-1,79:90='else_if_list',<0>,108:159]
2023-10-26 21:59:26:214 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,108:174].[@-1,97:99='blk',<0>,108:177]
2023-10-26 21:59:26:215 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:216 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-10-26 21:59:26:216 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-10-26 21:59:26:216 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-10-26 21:59:26:217 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-10-26 21:59:26:217 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-10-26 21:59:26:218 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-26 21:59:26:218 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-10-26 21:59:26:218 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-10-26 21:59:26:218 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-10-26 21:59:26:218 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-10-26 21:59:26:219 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-26 21:59:26:219 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-10-26 21:59:26:220 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,125:41]
2023-10-26 21:59:26:220 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,125:70].[@-1,34:37='line',<0>,125:73]
2023-10-26 21:59:26:220 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,125:80].[@-1,44:46='pos',<0>,125:83]
2023-10-26 21:59:26:220 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,125:89].[@-1,55:55='e',<0>,125:94]
2023-10-26 21:59:26:220 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,125:98].[@-1,65:67='blk',<0>,125:104]
2023-10-26 21:59:26:221 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-10-26 21:59:26:221 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,129:64]
2023-10-26 21:59:26:222 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,129:97].[@-1,42:45='line',<0>,129:104]
2023-10-26 21:59:26:222 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,129:111].[@-1,56:58='pos',<0>,129:118]
2023-10-26 21:59:26:222 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,129:124].[@-1,67:67='e',<0>,129:129]
2023-10-26 21:59:26:222 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,129:132].[@-1,79:83='cases',<0>,129:141]
2023-10-26 21:59:26:222 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,129:149].[@-1,93:95='blk',<0>,129:155]
2023-10-26 21:59:26:223 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:223 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-10-26 21:59:26:223 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-10-26 21:59:26:224 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-10-26 21:59:26:224 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-10-26 21:59:26:224 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-10-26 21:59:26:225 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-26 21:59:26:225 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-10-26 21:59:26:226 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-10-26 21:59:26:226 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-10-26 21:59:26:226 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-10-26 21:59:26:227 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-26 21:59:26:228 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-10-26 21:59:26:228 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,144:26]
2023-10-26 21:59:26:229 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,144:57].[@-1,38:41='line',<0>,144:62]
2023-10-26 21:59:26:229 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,144:69].[@-1,50:52='pos',<0>,144:74]
2023-10-26 21:59:26:229 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,144:79].[@-1,60:60='e',<0>,144:84]
2023-10-26 21:59:26:230 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,144:88].[@-1,70:72='blk',<0>,144:94]
2023-10-26 21:59:26:232 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-10-26 21:59:26:232 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,148:39]
2023-10-26 21:59:26:232 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,148:71].[@-1,40:43='line',<0>,148:77]
2023-10-26 21:59:26:233 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,148:84].[@-1,53:55='pos',<0>,148:90]
2023-10-26 21:59:26:233 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,148:96].[@-1,64:64='e',<0>,148:101]
2023-10-26 21:59:26:233 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,148:105].[@-1,74:76='blk',<0>,148:111]
2023-10-26 21:59:26:236 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-10-26 21:59:26:236 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,152:74]
2023-10-26 21:59:26:236 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,152:102].[@-1,34:37='line',<0>,152:106]
2023-10-26 21:59:26:237 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,152:113].[@-1,45:47='pos',<0>,152:117]
2023-10-26 21:59:26:237 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,152:123].[@-1,54:57='text',<0>,152:126]
2023-10-26 21:59:26:237 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,152:133].[@-1,64:64='e',<0>,152:136]
2023-10-26 21:59:26:238 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,152:139].[@-1,70:70='e',<0>,152:142]
2023-10-26 21:59:26:238 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,152:152].[@-1,86:88='blk',<0>,152:158]
2023-10-26 21:59:26:240 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-10-26 21:59:26:240 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,153:78]
2023-10-26 21:59:26:241 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,153:106].[@-1,34:37='line',<0>,153:110]
2023-10-26 21:59:26:241 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,153:117].[@-1,45:47='pos',<0>,153:121]
2023-10-26 21:59:26:241 action-translator LogManager.java:25 qattr [@-1,51:56='GUIONB',<0>,153:127].[@-1,58:61='text',<0>,153:134]
2023-10-26 21:59:26:242 action-translator LogManager.java:25 qattr [@-1,65:66='e1',<0>,153:141].[@-1,68:68='e',<0>,153:144]
2023-10-26 21:59:26:242 action-translator LogManager.java:25 qattr [@-1,71:72='e2',<0>,153:147].[@-1,74:74='e',<0>,153:150]
2023-10-26 21:59:26:242 action-translator LogManager.java:25 qattr [@-1,84:88='block',<0>,153:160].[@-1,90:92='blk',<0>,153:166]
2023-10-26 21:59:26:244 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-10-26 21:59:26:244 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,154:56]
2023-10-26 21:59:26:244 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,154:84].[@-1,34:37='line',<0>,154:88]
2023-10-26 21:59:26:245 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,154:95].[@-1,45:47='pos',<0>,154:99]
2023-10-26 21:59:26:245 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,154:105].[@-1,54:57='text',<0>,154:108]
2023-10-26 21:59:26:245 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,154:124].[@-1,74:77='text',<0>,154:128]
2023-10-26 21:59:26:245 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,154:135].[@-1,87:89='blk',<0>,154:141]
2023-10-26 21:59:26:247 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);
2023-10-26 21:59:26:247 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,158:30] [@-1,6:91=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)',<0>,158:35]
2023-10-26 21:59:26:247 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)
2023-10-26 21:59:26:247 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,158:59].[@-1,34:37='line',<0>,158:63]
2023-10-26 21:59:26:248 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,158:70].[@-1,45:47='pos',<0>,158:74]
2023-10-26 21:59:26:248 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,158:80].[@-1,54:57='text',<0>,158:83]
2023-10-26 21:59:26:248 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,158:90].[@-1,67:68='ty',<0>,158:96]
2023-10-26 21:59:26:248 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,158:101].[@-1,77:77='e',<0>,158:106]
2023-10-26 21:59:26:249 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);
2023-10-26 21:59:26:249 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,159:19] [@-1,6:98=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)',<0>,159:24]
2023-10-26 21:59:26:249 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-10-26 21:59:26:250 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,159:48].[@-1,34:37='line',<0>,159:52]
2023-10-26 21:59:26:250 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,159:59].[@-1,45:47='pos',<0>,159:63]
2023-10-26 21:59:26:250 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,159:69].[@-1,54:57='text',<0>,159:72]
2023-10-26 21:59:26:250 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,159:97].[@-1,84:84='e',<0>,159:102]
2023-10-26 21:59:26:250 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);
2023-10-26 21:59:26:250 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,160:19] [@-1,6:97=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)',<0>,160:24]
2023-10-26 21:59:26:250 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-10-26 21:59:26:252 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,160:48].[@-1,34:37='line',<0>,160:52]
2023-10-26 21:59:26:252 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,160:59].[@-1,45:47='pos',<0>,160:63]
2023-10-26 21:59:26:252 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,160:69].[@-1,54:57='text',<0>,160:72]
2023-10-26 21:59:26:252 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,160:97].[@-1,84:84='e',<0>,160:102]
2023-10-26 21:59:26:252 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);
2023-10-26 21:59:26:253 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,161:30] [@-1,6:90=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)',<0>,161:35]
2023-10-26 21:59:26:253 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)
2023-10-26 21:59:26:253 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,161:59].[@-1,34:37='line',<0>,161:63]
2023-10-26 21:59:26:253 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,161:70].[@-1,45:47='pos',<0>,161:74]
2023-10-26 21:59:26:253 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,161:80].[@-1,54:57='text',<0>,161:83]
2023-10-26 21:59:26:253 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,161:90].[@-1,67:68='ty',<0>,161:96]
2023-10-26 21:59:26:254 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,161:101].[@-1,77:77='e',<0>,161:106]
2023-10-26 21:59:26:254 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-10-26 21:59:26:254 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,165:8]
2023-10-26 21:59:26:254 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-10-26 21:59:26:255 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,166:10]
2023-10-26 21:59:26:255 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-10-26 21:59:26:255 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,167:8]
2023-10-26 21:59:26:255 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-10-26 21:59:26:255 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,168:9]
2023-10-26 21:59:26:255 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-10-26 21:59:26:255 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,169:18]
2023-10-26 21:59:26:258 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:258 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) 
2023-10-26 21:59:26:258 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-10-26 21:59:26:258 action-translator LogManager.java:25 attr [@-1,32:33='op',<0>,2:100]
2023-10-26 21:59:26:259 action-translator LogManager.java:25 attr [@-1,47:48='op',<0>,2:115]
2023-10-26 21:59:26:259 action-translator LogManager.java:25 qattr [@-1,64:68='right',<0>,2:132].[@-1,70:70='e',<0>,2:138]
2023-10-26 21:59:26:259 action-translator LogManager.java:25 qattr [@-1,81:85='right',<0>,2:149].[@-1,87:87='e',<0>,2:155]
2023-10-26 21:59:26:259 action-translator LogManager.java:25 translate  $e = $callFunction.cf 
2023-10-26 21:59:26:259 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:41]
2023-10-26 21:59:26:260 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,3:46].[@-1,20:21='cf',<0>,3:59]
2023-10-26 21:59:26:260 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-10-26 21:59:26:260 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:111]
2023-10-26 21:59:26:260 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,4:141].[@-1,35:38='line',<0>,4:144]
2023-10-26 21:59:26:260 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,4:151].[@-1,45:47='pos',<0>,4:154]
2023-10-26 21:59:26:260 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,4:160].[@-1,54:57='text',<0>,4:163]
2023-10-26 21:59:26:260 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,4:170].[@-1,75:75='l',<0>,4:184]
2023-10-26 21:59:26:260 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-26 21:59:26:262 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:79]
2023-10-26 21:59:26:262 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,5:84].[@-1,12:12='e',<0>,5:89]
2023-10-26 21:59:26:262 action-translator LogManager.java:25 translate  $e = $list.p
2023-10-26 21:59:26:263 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:43]
2023-10-26 21:59:26:263 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,6:48].[@-1,12:12='p',<0>,6:53]
2023-10-26 21:59:26:264 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-10-26 21:59:26:264 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:85]
2023-10-26 21:59:26:264 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,7:111].[@-1,35:38='line',<0>,7:118]
2023-10-26 21:59:26:264 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,7:125].[@-1,49:51='pos',<0>,7:132]
2023-10-26 21:59:26:265 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,7:138].[@-1,66:66='l',<0>,7:149]
2023-10-26 21:59:26:265 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-26 21:59:26:266 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,10:30].[@-1,39:42='text',<0>,10:37]
2023-10-26 21:59:26:266 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,11:43].[@-1,102:105='text',<0>,11:50]
2023-10-26 21:59:26:266 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,15:13]
2023-10-26 21:59:26:266 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,15:43].[@-1,240:243='line',<0>,15:50]
2023-10-26 21:59:26:267 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,15:56].[@-1,253:255='pos',<0>,15:63]
2023-10-26 21:59:26:267 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,17:37].[@-1,341:344='text',<0>,17:44]
2023-10-26 21:59:26:267 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,21:13]
2023-10-26 21:59:26:267 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,21:43].[@-1,474:477='line',<0>,21:50]
2023-10-26 21:59:26:268 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,21:56].[@-1,487:489='pos',<0>,21:63]
2023-10-26 21:59:26:268 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-26 21:59:26:268 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,26:16].[@-1,25:28='text',<0>,26:23]
2023-10-26 21:59:26:268 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,27:9]
2023-10-26 21:59:26:268 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,27:39].[@-1,77:80='line',<0>,27:46]
2023-10-26 21:59:26:269 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,27:53].[@-1,91:93='pos',<0>,27:60]
2023-10-26 21:59:26:269 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-26 21:59:26:270 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-10-26 21:59:26:270 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-10-26 21:59:26:270 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-10-26 21:59:26:271 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-26 21:59:26:271 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-10-26 21:59:26:271 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-10-26 21:59:26:271 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-10-26 21:59:26:272 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-26 21:59:26:272 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-26 21:59:26:272 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:139]
2023-10-26 21:59:26:272 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:169].[@-1,37:41='start',<0>,33:174]
2023-10-26 21:59:26:272 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:192].[@-1,60:64='start',<0>,33:197]
2023-10-26 21:59:26:273 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:217].[@-1,85:85='e',<0>,33:222]
2023-10-26 21:59:26:273 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:226].[@-1,92:95='text',<0>,33:229]
2023-10-26 21:59:26:273 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:236].[@-1,105:105='e',<0>,33:242]
2023-10-26 21:59:26:273 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-26 21:59:26:274 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-26 21:59:26:274 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:149]
2023-10-26 21:59:26:275 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:179].[@-1,37:41='start',<0>,34:184]
2023-10-26 21:59:26:275 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:202].[@-1,60:64='start',<0>,34:207]
2023-10-26 21:59:26:275 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:227].[@-1,85:85='e',<0>,34:232]
2023-10-26 21:59:26:275 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:236].[@-1,92:95='text',<0>,34:239]
2023-10-26 21:59:26:275 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:246].[@-1,105:105='e',<0>,34:252]
2023-10-26 21:59:26:276 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-26 21:59:26:276 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-26 21:59:26:276 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:154]
2023-10-26 21:59:26:276 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:184].[@-1,37:41='start',<0>,35:189]
2023-10-26 21:59:26:277 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:207].[@-1,60:64='start',<0>,35:212]
2023-10-26 21:59:26:277 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:232].[@-1,85:85='e',<0>,35:237]
2023-10-26 21:59:26:277 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:241].[@-1,92:95='text',<0>,35:244]
2023-10-26 21:59:26:278 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:251].[@-1,105:105='e',<0>,35:257]
2023-10-26 21:59:26:278 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-26 21:59:26:279 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-26 21:59:26:279 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:154]
2023-10-26 21:59:26:279 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:184].[@-1,37:41='start',<0>,36:189]
2023-10-26 21:59:26:279 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:207].[@-1,60:64='start',<0>,36:212]
2023-10-26 21:59:26:279 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:232].[@-1,85:85='e',<0>,36:237]
2023-10-26 21:59:26:279 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:241].[@-1,92:95='text',<0>,36:244]
2023-10-26 21:59:26:279 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:251].[@-1,105:105='e',<0>,36:257]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-10-26 21:59:26:280 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-26 21:59:26:280 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:151]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:181].[@-1,37:41='start',<0>,37:186]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:204].[@-1,60:64='start',<0>,37:209]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:229].[@-1,85:85='e',<0>,37:234]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:238].[@-1,92:95='text',<0>,37:241]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:248].[@-1,105:105='e',<0>,37:254]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-10-26 21:59:26:280 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-26 21:59:26:280 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:127]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:157].[@-1,37:41='start',<0>,38:162]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:180].[@-1,60:64='start',<0>,38:185]
2023-10-26 21:59:26:280 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:205].[@-1,85:85='e',<0>,38:210]
2023-10-26 21:59:26:282 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:214].[@-1,92:95='text',<0>,38:217]
2023-10-26 21:59:26:282 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:224].[@-1,105:105='e',<0>,38:230]
2023-10-26 21:59:26:282 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-10-26 21:59:26:282 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-26 21:59:26:282 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:126]
2023-10-26 21:59:26:283 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:156].[@-1,37:41='start',<0>,39:161]
2023-10-26 21:59:26:283 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:179].[@-1,60:64='start',<0>,39:184]
2023-10-26 21:59:26:283 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:204].[@-1,85:85='e',<0>,39:209]
2023-10-26 21:59:26:283 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:213].[@-1,92:95='text',<0>,39:216]
2023-10-26 21:59:26:283 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:223].[@-1,105:105='e',<0>,39:229]
2023-10-26 21:59:26:284 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-26 21:59:26:284 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-26 21:59:26:284 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-26 21:59:26:284 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-26 21:59:26:284 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-10-26 21:59:26:284 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-10-26 21:59:26:284 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-10-26 21:59:26:284 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:285 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-26 21:59:26:285 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-26 21:59:26:285 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-26 21:59:26:285 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-26 21:59:26:285 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-26 21:59:26:285 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-26 21:59:26:285 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-26 21:59:26:285 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-26 21:59:26:285 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-26 21:59:26:285 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-26 21:59:26:285 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-26 21:59:26:286 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:286 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-10-26 21:59:26:286 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-10-26 21:59:26:287 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-10-26 21:59:26:287 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-10-26 21:59:26:287 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-10-26 21:59:26:288 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:288 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-10-26 21:59:26:289 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:130]
2023-10-26 21:59:26:289 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:162].[@-1,39:43='start',<0>,5:167]
2023-10-26 21:59:26:290 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:185].[@-1,62:66='start',<0>,5:190]
2023-10-26 21:59:26:290 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:210].[@-1,87:87='p',<0>,5:215]
2023-10-26 21:59:26:290 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:219].[@-1,96:96='e',<0>,5:224]
2023-10-26 21:59:26:290 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-26 21:59:26:291 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-10-26 21:59:26:291 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-10-26 21:59:26:291 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-10-26 21:59:26:291 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-10-26 21:59:26:291 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-10-26 21:59:26:291 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-10-26 21:59:26:292 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:292 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-26 21:59:26:293 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-26 21:59:26:293 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,230:36]
2023-10-26 21:59:26:293 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,230:65].[@-1,34:37='line',<0>,230:68]
2023-10-26 21:59:26:293 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,230:75].[@-1,44:46='pos',<0>,230:78]
2023-10-26 21:59:26:293 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,230:84].[@-1,53:56='text',<0>,230:87]
2023-10-26 21:59:26:294 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,230:94].[@-1,75:75='l',<0>,230:109]
2023-10-26 21:59:26:295 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:295 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-26 21:59:26:295 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-26 21:59:26:295 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-26 21:59:26:296 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-26 21:59:26:296 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-26 21:59:26:296 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-26 21:59:26:296 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-26 21:59:26:296 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:297 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-10-26 21:59:26:297 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-10-26 21:59:26:297 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-10-26 21:59:26:297 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-10-26 21:59:26:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:298 action-translator LogManager.java:25 translate 
2023-10-26 21:59:26:298 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-10-26 21:59:26:298 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-10-26 21:59:26:298 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-10-26 21:59:26:298 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-10-26 21:59:26:298 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-26 21:59:26:298 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-10-26 21:59:26:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:299 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-10-26 21:59:26:299 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-10-26 21:59:26:299 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-10-26 21:59:26:299 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-10-26 21:59:26:299 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-10-26 21:59:26:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-26 21:59:26:509 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-26 21:59:26:510 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-26 21:59:26:554 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-26 21:59:26:554 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

